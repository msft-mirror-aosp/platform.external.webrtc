# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "audio",
    srcs = [
        "audio_level.cc",
        "audio_receive_stream.cc",
        "audio_send_stream.cc",
        "audio_state.cc",
        "audio_transport_impl.cc",
        "channel_receive.cc",
        "channel_receive_frame_transformer_delegate.cc",
        "channel_send.cc",
        "channel_send_frame_transformer_delegate.cc",
        "remix_resample.cc",
    ],
    hdrs = [
        "audio_level.h",
        "audio_receive_stream.h",
        "audio_send_stream.h",
        "audio_state.h",
        "audio_transport_impl.h",
        "channel_receive.h",
        "channel_receive_frame_transformer_delegate.h",
        "channel_send.h",
        "channel_send_frame_transformer_delegate.h",
        "conversion.h",
        "remix_resample.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:call_api",
        "//api:field_trials_view",
        "//api:frame_transformer_interface",
        "//api:function_view",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:transport_api",
        "//api/audio:aec3_factory",
        "//api/audio:audio_device",
        "//api/audio:audio_frame_api",
        "//api/audio:audio_frame_processor",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/neteq:neteq_api",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport/rtp:rtp_source",
        "//api/units:time_delta",
        "//audio/utility:audio_frame_operations",
        "//call:audio_sender_interface",
        "//call:bitrate_allocator",
        "//call:call_interfaces",
        "//call:rtp_interfaces",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//logging:rtc_event_audio",
        "//logging:rtc_stream_config",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//modules/async_audio_processing",
        "//modules/audio_coding",
        "//modules/audio_coding:audio_coding_module_typedefs",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:audio_network_adaptor_config",
        "//modules/audio_coding:red",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_processing",
        "//modules/audio_processing:audio_frame_proxies",
        "//modules/audio_processing:rms_level",
        "//modules/pacing",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:audio_format_to_string",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:rate_limiter",
        "//rtc_base:refcount",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:safe_minmax",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/containers:flat_set",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "audio_end_to_end_test",
    testonly = 1,
    srcs = ["test/audio_end_to_end_test.cc"],
    hdrs = ["test/audio_end_to_end_test.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:simulated_network_api",
        "//api/audio:audio_device",
        "//api/task_queue",
        "//audio",
        "//call:fake_network",
        "//modules/audio_device:test_audio_device_module",
        "//system_wrappers",
        "//test:test_common",
        "//test:test_support",
        "//test:video_test_constants",
    ],
)

cc_library(
    name = "audio_tests",
    testonly = 1,
    srcs = [
        "audio_receive_stream_unittest.cc",
        "audio_send_stream_tests.cc",
        "audio_send_stream_unittest.cc",
        "audio_state_unittest.cc",
        "channel_receive_frame_transformer_delegate_unittest.cc",
        "channel_send_frame_transformer_delegate_unittest.cc",
        "channel_send_unittest.cc",
        "remix_resample_unittest.cc",
        "test/audio_stats_test.cc",
        "test/nack_test.cc",
        "test/non_sender_rtt_test.cc",
    ],
    hdrs = ["mock_voe_channel_proxy.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:mock_audio_mixer",
        "//api:mock_frame_decryptor",
        "//api:mock_frame_encryptor",
        "//api:mock_frame_transformer",
        "//api:mock_transformable_audio_frame",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/audio:audio_frame_api",
        "//api/audio:audio_processing_statistics",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        #"//api/audio_codecs/opus:audio_decoder_opus",
        #"//api/audio_codecs/opus:audio_encoder_opus",
        "//api/crypto:frame_decryptor_interface",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/task_queue:default_task_queue_factory",
        "//api/task_queue/test:mock_task_queue_base",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//audio",
        "//audio:audio_end_to_end_test",
        "//audio:channel_receive_unittest",
        "//audio/utility:utility_tests",
        "//call:mock_bitrate_allocator",
        "//call:mock_call_interfaces",
        "//call:mock_rtp_interfaces",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//call:rtp_sender",
        "//common_audio",
        "//logging:mocks",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_device:mock_audio_device",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/audio_mixer:audio_mixer_test_utils",
        "//modules/audio_processing:mocks",
        "//modules/pacing",
        "//modules/rtp_rtcp:mock_rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:macromagic",
        "//rtc_base:refcount",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:safe_compare",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//system_wrappers",
        "//test:audio_codec_mocks",
        "//test:field_trial",
        "//test:mock_transport",
        "//test:rtp_test_utils",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_common",
        "//test:test_support",
        "//test:video_test_constants",
        "//test/time_controller",
    ],
)

cc_library(
    name = "channel_receive_unittest",
    testonly = 1,
    srcs = ["channel_receive_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:mock_frame_transformer",
        "//api/audio:audio_device",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/crypto:frame_decryptor_interface",
        "//api/task_queue:default_task_queue_factory",
        "//audio",
        "//logging:mocks",
        "//modules/audio_device:mock_audio_device",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:logging",
        "//rtc_base:threading",
        "//test:audio_codec_mocks",
        "//test:mock_transport",
        "//test:test_support",
        "//test/time_controller",
    ],
)
