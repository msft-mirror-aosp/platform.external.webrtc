# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "common_video",
    srcs = [
        "bitrate_adjuster.cc",
        "frame_rate_estimator.cc",
        "framerate_controller.cc",
        "h264/h264_bitstream_parser.cc",
        "h264/h264_common.cc",
        "h264/pps_parser.cc",
        "h264/sps_parser.cc",
        "h264/sps_vui_rewriter.cc",
        "libyuv/webrtc_libyuv.cc",
        "video_frame_buffer.cc",
        "video_frame_buffer_pool.cc",
    ],
    hdrs = [
        "frame_rate_estimator.h",
        "framerate_controller.h",
        "h264/h264_bitstream_parser.h",
        "h264/h264_common.h",
        "h264/pps_parser.h",
        "h264/sps_parser.h",
        "h264/sps_vui_rewriter.h",
        "include/bitrate_adjuster.h",
        "include/quality_limitation_reason.h",
        "include/video_frame_buffer.h",
        "include/video_frame_buffer_pool.h",
        "libyuv/include/webrtc_libyuv.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/numeric:bits",
        "@com_google_absl//absl/types:optional",
        "@libyuv//:libyuv",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_frame",
        "//api/video:video_frame_i010",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:bitstream_parser_api",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:bit_buffer",
        "//rtc_base:bitstream_reader",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:rate_statistics",
        "//rtc_base:refcount",
        "//rtc_base:safe_minmax",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:rtc_export",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "frame_counts",
    hdrs = ["frame_counts.h"],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "common_video_unittests",
    testonly = 1,
    srcs = [
        "bitrate_adjuster_unittest.cc",
        "frame_rate_estimator_unittest.cc",
        "framerate_controller_unittest.cc",
        "h264/h264_bitstream_parser_unittest.cc",
        "h264/pps_parser_unittest.cc",
        "h264/sps_parser_unittest.cc",
        "h264/sps_vui_rewriter_unittest.cc",
        "libyuv/libyuv_unittest.cc",
        "video_frame_buffer_pool_unittest.cc",
        "video_frame_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = ["//resources:foreman_cif.yuv"],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "@libyuv//:libyuv",
        "//api:scoped_refptr",
        "//api/units:time_delta",
        "//api/video:video_frame",
        "//api/video:video_frame_i010",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//common_video",
        "//rtc_base:bit_buffer",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:timeutils",
        "//system_wrappers",
        "//test:fileutils",
        "//test:frame_utils",
        "//test:test_main",
        "//test:test_support",
        "//test:video_test_common",
    ],
)
