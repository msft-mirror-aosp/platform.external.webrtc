# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "version",
    srcs = ["version.cc"],
    hdrs = ["version.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//call:__pkg__"],
)

cc_library(
    name = "call_interfaces",
    srcs = [
        "audio_receive_stream.cc",
        "audio_send_stream.cc",
        "audio_state.cc",
        "call_config.cc",
        "flexfec_receive_stream.cc",
        "syncable.cc",
    ],
    hdrs = [
        "audio_receive_stream.h",
        "audio_send_stream.h",
        "audio_state.h",
        "call.h",
        "call_config.h",
        "flexfec_receive_stream.h",
        "packet_receiver.h",
        "syncable.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:fec_controller_api",
        "//api:frame_transformer_interface",
        "//api:network_state_predictor_api",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:transport_api",
        "//api/adaptation:resource_adaptation_api",
        "//api/audio:audio_device",
        "//api/audio:audio_frame_processor",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio:audio_processing_statistics",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/environment",
        "//api/metronome",
        "//api/neteq:neteq_api",
        "//api/task_queue",
        "//api/transport:bitrate_settings",
        "//api/transport:network_control",
        "//call:audio_sender_interface",
        "//call:receive_stream_interface",
        "//call:rtp_interfaces",
        "//call:video_stream_api",
        "//modules/async_audio_processing",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_processing",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:audio_format_to_string",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:network_route",
        "//rtc_base:refcount",
        "//rtc_base:stringutils",
        "//rtc_base/network:sent_packet",
    ],
)

cc_library(
    name = "audio_sender_interface",
    hdrs = ["audio_sender.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/audio:audio_frame_api"],
)

cc_library(
    name = "rtp_interfaces",
    srcs = ["rtp_config.cc"],
    hdrs = [
        "rtp_config.h",
        "rtp_packet_sink_interface.h",
        "rtp_stream_receiver_controller_interface.h",
        "rtp_transport_config.h",
        "rtp_transport_controller_send_factory_interface.h",
        "rtp_transport_controller_send_interface.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:fec_controller_api",
        "//api:frame_transformer_interface",
        "//api:network_state_predictor_api",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api/crypto:options",
        "//api/environment",
        "//api/transport:bandwidth_estimation_settings",
        "//api/transport:bitrate_settings",
        "//api/transport:network_control",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//common_video:frame_counts",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "rtp_receiver",
    srcs = [
        "rtp_demuxer.cc",
        "rtp_stream_receiver_controller.cc",
        "rtx_receive_stream.cc",
    ],
    hdrs = [
        "rtp_demuxer.h",
        "rtp_stream_receiver_controller.h",
        "rtx_receive_stream.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:rtp_headers",
        "//api:sequence_checker",
        "//call:rtp_interfaces",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//rtc_base/containers:flat_map",
        "//rtc_base/containers:flat_set",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "rtp_sender",
    srcs = [
        "rtp_payload_params.cc",
        "rtp_transport_controller_send.cc",
        "rtp_video_sender.cc",
    ],
    hdrs = [
        "rtp_payload_params.h",
        "rtp_transport_controller_send.h",
        "rtp_transport_controller_send_factory.h",
        "rtp_video_sender.h",
        "rtp_video_sender_interface.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api:array_view",
        "//api:bitrate_allocation",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:network_state_predictor_api",
        "//api:rtp_parameters",
        "//api:sequence_checker",
        "//api:transport_api",
        "//api/environment",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:field_trial_based_config",
        "//api/transport:goog_cc",
        "//api/transport:network_control",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:video_frame",
        "//api/video:video_layers_allocation",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//call:bitrate_configurator",
        "//call:rtp_interfaces",
        "//logging:rtc_event_bwe",
        "//modules/congestion_controller",
        "//modules/congestion_controller/rtp:control_handler",
        "//modules/congestion_controller/rtp:transport_feedback",
        "//modules/pacing",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/rtp_rtcp:rtp_video_header",
        "//modules/video_coding:chain_diff_calculator",
        "//modules/video_coding:codec_globals_headers",
        "//modules/video_coding:frame_dependencies_calculator",
        "//modules/video_coding:video_codec_interface",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network_route",
        "//rtc_base:race_checker",
        "//rtc_base:random",
        "//rtc_base:rate_limiter",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
    ],
)

cc_library(
    name = "bitrate_configurator",
    srcs = ["rtp_bitrate_configurator.cc"],
    hdrs = ["rtp_bitrate_configurator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/transport:bitrate_settings",
        "//api/units:data_rate",
        "//call:rtp_interfaces",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "bitrate_allocator",
    srcs = ["bitrate_allocator.cc"],
    hdrs = ["bitrate_allocator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:bitrate_allocation",
        "//api:sequence_checker",
        "//api/transport:network_control",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:safe_minmax",
        "//rtc_base/system:no_unique_address",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "call",
    srcs = [
        "call.cc",
        "create_call.cc",
        "degraded_call.cc",
        "flexfec_receive_stream_impl.cc",
        "receive_time_calculator.cc",
    ],
    hdrs = [
        "create_call.h",
        "degraded_call.h",
        "flexfec_receive_stream_impl.h",
        "receive_time_calculator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:sequence_checker",
        "//api:simulated_network_api",
        "//api:transport_api",
        "//api/rtc_event_log",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:network_control",
        "//api/units:time_delta",
        "//api/video_codecs:video_codecs_api",
        "//audio",
        "//call:bitrate_allocator",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//call:rtp_sender",
        "//call:simulated_network",
        "//call:version",
        "//call:video_stream_api",
        "//call/adaptation:resource_adaptation",
        "//logging:rtc_event_audio",
        "//logging:rtc_event_rtp_rtcp",
        "//logging:rtc_event_video",
        "//logging:rtc_stream_config",
        "//modules/congestion_controller",
        "//modules/pacing",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rate_limiter",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_minmax",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/network:sent_packet",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
        "//test/network:simulated_network",
        "//video",
        "//video:decode_synchronizer",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "receive_stream_interface",
    hdrs = ["receive_stream.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:frame_transformer_interface",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api/crypto:frame_decryptor_interface",
        "//api/transport/rtp:rtp_source",
        "//modules/rtp_rtcp:rtp_rtcp_format",
    ],
)

cc_library(
    name = "video_stream_api",
    srcs = [
        "video_receive_stream.cc",
        "video_send_stream.cc",
    ],
    hdrs = [
        "video_receive_stream.h",
        "video_send_stream.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api:frame_transformer_interface",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:transport_api",
        "//api/adaptation:resource_adaptation_api",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video:video_stream_encoder",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//call:receive_stream_interface",
        "//call:rtp_interfaces",
        "//common_video",
        "//common_video:frame_counts",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "simulated_network",
    hdrs = ["simulated_network.h"],
    visibility = ["//:__subpackages__"],
    deps = ["//test/network:simulated_network"],
)

cc_library(
    name = "simulated_packet_receiver",
    hdrs = ["simulated_packet_receiver.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:simulated_network_api",
        "//call:call_interfaces",
    ],
)

cc_library(
    name = "fake_network",
    srcs = ["fake_network_pipe.cc"],
    hdrs = ["fake_network_pipe.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:rtp_parameters",
        "//api:sequence_checker",
        "//api:simulated_network_api",
        "//api:transport_api",
        "//api/units:timestamp",
        "//call:call_interfaces",
        "//call:simulated_packet_receiver",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//test/network:simulated_network",
    ],
)

cc_library(
    name = "call_tests",
    testonly = 1,
    srcs = [
        "bitrate_allocator_unittest.cc",
        "bitrate_estimator_tests.cc",
        "call_unittest.cc",
        "flexfec_receive_stream_unittest.cc",
        "receive_time_calculator_unittest.cc",
        "rtp_bitrate_configurator_unittest.cc",
        "rtp_demuxer_unittest.cc",
        "rtp_payload_params_unittest.cc",
        "rtp_video_sender_unittest.cc",
        "rtx_receive_stream_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:difficult_photo_1850_1110.yuv",
        "//resources:photo_1850_1110.yuv",
        "//resources:presentation_1850_1110.yuv",
        "//resources:web_screenshot_1850_1110.yuv",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "@com_google_googletest//:gtest",
        "//api:array_view",
        "//api:create_frame_generator",
        "//api:mock_audio_mixer",
        "//api:mock_frame_transformer",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:transport_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/test/video:function_video_factory",
        "//api/transport:field_trial_based_config",
        "//api/units:timestamp",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//audio",
        "//call",
        "//call:bitrate_allocator",
        "//call:bitrate_configurator",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:mock_rtp_interfaces",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//call:rtp_sender",
        "//call:simulated_network",
        "//call/adaptation:resource_adaptation_test_utilities",
        "//modules/audio_device:mock_audio_device",
        "//modules/audio_mixer",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/audio_processing:mocks",
        "//modules/congestion_controller",
        "//modules/pacing",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:mock_rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding",
        "//modules/video_coding:codec_globals_headers",
        "//modules/video_coding:video_codec_interface",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:random",
        "//rtc_base:rate_limiter",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//test:audio_codec_mocks",
        "//test:direct_transport",
        "//test:encoder_settings",
        "//test:explicit_key_value_config",
        "//test:fake_video_codecs",
        "//test:field_trial",
        "//test:frame_generator_capturer",
        "//test:mock_transport",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_common",
        "//test:test_support",
        "//test:video_test_constants",
        "//test/scenario",
        "//test/time_controller",
        "//video",
    ],
)

cc_library(
    name = "call_perf_tests",
    testonly = 1,
    srcs = [
        "call_perf_tests.cc",
        "rampup_tests.cc",
    ],
    hdrs = ["rampup_tests.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "//api:rtc_event_log_output_file",
        "//api:simulated_network_api",
        "//api/audio:audio_device",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/numerics",
        "//api/rtc_event_log",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metric",
        "//api/units:data_rate",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_bitrate_allocation",
        "//api/video_codecs:video_codecs_api",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:simulated_network",
        "//call:video_stream_api",
        "//media:rtc_internal_video_codecs",
        "//media:rtc_simulcast_encoder_adapter",
        "//modules/audio_coding",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_device:test_audio_device_module",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:rtc_event",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:metrics",
        "//test:direct_transport",
        "//test:encoder_settings",
        "//test:fake_video_codecs",
        "//test:field_trial",
        "//test:fileutils",
        "//test:frame_generator_capturer",
        "//test:null_transport",
        "//test:test_common",
        "//test:test_flags",
        "//test:test_support",
        "//test:video_test_common",
        "//test:video_test_constants",
        "//test/network:simulated_network",
        "//video",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "mock_rtp_interfaces",
    testonly = 1,
    hdrs = [
        "test/mock_rtp_packet_sink_interface.h",
        "test/mock_rtp_transport_controller_send.h",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:dtmf_sender_interface",
        "//api:frame_transformer_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/transport:bitrate_settings",
        "//call:rtp_interfaces",
        "//modules/pacing",
        "//modules/rtp_rtcp",
        "//rtc_base:network_route",
        "//rtc_base:rate_limiter",
        "//rtc_base/network:sent_packet",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_bitrate_allocator",
    testonly = 1,
    hdrs = ["test/mock_bitrate_allocator.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//call:bitrate_allocator",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_call_interfaces",
    testonly = 1,
    hdrs = ["test/mock_audio_send_stream.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//call:call_interfaces",
        "//test:test_support",
    ],
)

cc_library(
    name = "fake_network_pipe_unittests",
    testonly = 1,
    srcs = ["fake_network_pipe_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_googletest//:gtest",
        "//api:simulated_network_api",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//call:fake_network",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//system_wrappers",
        "//test:test_support",
        "//test/network:simulated_network",
    ],
)
