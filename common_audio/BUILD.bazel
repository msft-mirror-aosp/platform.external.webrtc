# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "common_audio",
    srcs = [
        "audio_converter.cc",
        "audio_util.cc",
        "channel_buffer.cc",
        "real_fourier.cc",
        "real_fourier_ooura.cc",
        "resampler/push_resampler.cc",
        "resampler/push_sinc_resampler.cc",
        "resampler/resampler.cc",
        "resampler/sinc_resampler.cc",
        "smoothing_filter.cc",
        "vad/vad.cc",
        "wav_file.cc",
        "wav_header.cc",
        "window_generator.cc",
    ],
    hdrs = [
        "audio_converter.h",
        "channel_buffer.h",
        "include/audio_util.h",
        "real_fourier.h",
        "real_fourier_ooura.h",
        "resampler/include/push_resampler.h",
        "resampler/include/resampler.h",
        "resampler/push_sinc_resampler.h",
        "smoothing_filter.h",
        "vad/include/vad.h",
        "wav_file.h",
        "wav_header.h",
        "window_generator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//common_audio:common_audio_c",
        "//common_audio:sinc_resampler",
        "//common_audio/third_party/ooura:fft_size_256",
        "//rtc_base:checks",
        "//rtc_base:gtest_prod",
        "//rtc_base:logging",
        "//rtc_base:safe_conversions",
        "//rtc_base:sanitizer",
        "//rtc_base:timeutils",
        "//rtc_base/memory:aligned_malloc",
        "//rtc_base/system:arch",
        "//rtc_base/system:file_wrapper",
        "//system_wrappers",
    ] + platform_select(
        arm64 = ["//common_audio:common_audio_neon"],
        linux = [
            "//common_audio:common_audio_avx2",
            "//common_audio:common_audio_sse2",
        ],
        windows = [
            "//common_audio:common_audio_avx2",
            "//common_audio:common_audio_sse2",
        ],
    ),
)

cc_library(
    name = "mock_common_audio",
    testonly = 1,
    hdrs = [
        "mocks/mock_smoothing_filter.h",
        "vad/mock/mock_vad.h",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//common_audio",
        "//test:test_support",
    ],
)

cc_library(
    name = "common_audio_c_arm_asm",
    visibility = ["//common_audio:__pkg__"],
)

cc_library(
    name = "common_audio_c",
    srcs = [
        "ring_buffer.c",
        "signal_processing/auto_corr_to_refl_coef.c",
        "signal_processing/auto_correlation.c",
        "signal_processing/complex_bit_reverse.c",
        "signal_processing/complex_fft.c",
        "signal_processing/copy_set_operations.c",
        "signal_processing/cross_correlation.c",
        "signal_processing/division_operations.c",
        "signal_processing/downsample_fast.c",
        "signal_processing/energy.c",
        "signal_processing/filter_ar.c",
        "signal_processing/filter_ar_fast_q12.c",
        "signal_processing/filter_ma_fast_q12.c",
        "signal_processing/get_hanning_window.c",
        "signal_processing/get_scaling_square.c",
        "signal_processing/ilbc_specific_functions.c",
        "signal_processing/levinson_durbin.c",
        "signal_processing/lpc_to_refl_coef.c",
        "signal_processing/min_max_operations.c",
        "signal_processing/randomization_functions.c",
        "signal_processing/real_fft.c",
        "signal_processing/refl_coef_to_lpc.c",
        "signal_processing/resample.c",
        "signal_processing/resample_48khz.c",
        "signal_processing/resample_by_2.c",
        "signal_processing/resample_by_2_internal.c",
        "signal_processing/resample_fractional.c",
        "signal_processing/spl_init.c",
        "signal_processing/spl_inl.c",
        "signal_processing/spl_sqrt.c",
        "signal_processing/splitting_filter.c",
        "signal_processing/sqrt_of_one_minus_x_squared.c",
        "signal_processing/vector_scaling_operations.c",
        "vad/vad_core.c",
        "vad/vad_filterbank.c",
        "vad/vad_gmm.c",
        "vad/vad_sp.c",
        "vad/webrtc_vad.c",
    ],
    hdrs = [
        "ring_buffer.h",
        "signal_processing/complex_fft_tables.h",
        "signal_processing/include/real_fft.h",
        "signal_processing/include/signal_processing_library.h",
        "signal_processing/include/spl_inl.h",
        "signal_processing/include/spl_inl_armv7.h",
        "signal_processing/resample_by_2_internal.h",
        "vad/include/webrtc_vad.h",
        "vad/vad_core.h",
        "vad/vad_filterbank.h",
        "vad/vad_gmm.h",
        "vad/vad_sp.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//common_audio:common_audio_c_arm_asm",
        "//common_audio:common_audio_cc",
        "//common_audio/third_party/ooura:fft_size_256",
        "//common_audio/third_party/spl_sqrt_floor",
        "//rtc_base:checks",
        "//rtc_base:compile_assert_c",
        "//rtc_base:sanitizer",
        "//rtc_base/system:arch",
        "//system_wrappers",
    ],
)

cc_library(
    name = "common_audio_cc",
    srcs = ["signal_processing/dot_product_with_scale.cc"],
    hdrs = ["signal_processing/dot_product_with_scale.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//common_audio:__pkg__"],
    deps = [
        "//rtc_base:safe_conversions",
        "//system_wrappers",
    ],
)

cc_library(
    name = "sinc_resampler",
    hdrs = ["resampler/sinc_resampler.h"],
    visibility = ["//common_audio:__pkg__"],
    deps = [
        "//rtc_base:gtest_prod",
        "//rtc_base/memory:aligned_malloc",
        "//rtc_base/system:arch",
        "//system_wrappers",
    ],
)

cc_library(
    name = "fir_filter",
    hdrs = ["fir_filter.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "fir_filter_factory",
    srcs = [
        "fir_filter_c.cc",
        "fir_filter_factory.cc",
    ],
    hdrs = [
        "fir_filter_c.h",
        "fir_filter_factory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//common_audio:fir_filter",
        "//rtc_base:checks",
        "//rtc_base/system:arch",
        "//system_wrappers",
    ] + platform_select(
        arm64 = ["//common_audio:common_audio_neon"],
        linux = [
            "//common_audio:common_audio_avx2",
            "//common_audio:common_audio_sse2",
        ],
        windows = [
            "//common_audio:common_audio_avx2",
            "//common_audio:common_audio_sse2",
        ],
    ),
)

cc_library(
    name = "common_audio_sse2",
    srcs = [
        "fir_filter_sse.cc",
        "resampler/sinc_resampler_sse.cc",
    ],
    hdrs = ["fir_filter_sse.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = [
            "-fno-exceptions",
            "-msse2",
        ],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//common_audio:__pkg__"],
    deps = [
        "//common_audio:fir_filter",
        "//common_audio:sinc_resampler",
        "//rtc_base:checks",
        "//rtc_base/memory:aligned_malloc",
    ],
)

cc_library(
    name = "common_audio_avx2",
    srcs = [
        "fir_filter_avx2.cc",
        "resampler/sinc_resampler_avx2.cc",
    ],
    hdrs = ["fir_filter_avx2.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = [
            "-fno-exceptions",
            "-mavx2",
            "-mfma",
        ],
        windows = [
            "-fno-rtti",
            "-march=haswell",
        ],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//common_audio:__pkg__"],
    deps = [
        "//common_audio:fir_filter",
        "//common_audio:sinc_resampler",
        "//rtc_base:checks",
        "//rtc_base/memory:aligned_malloc",
    ],
)

cc_library(
    name = "common_audio_neon",
    srcs = [
        "fir_filter_neon.cc",
        "resampler/sinc_resampler_neon.cc",
    ],
    hdrs = ["fir_filter_neon.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//common_audio:__pkg__"],
    deps = [
        "//common_audio:common_audio_neon_c",
        "//common_audio:fir_filter",
        "//common_audio:sinc_resampler",
        "//rtc_base:checks",
        "//rtc_base/memory:aligned_malloc",
    ],
)

cc_library(
    name = "common_audio_neon_c",
    srcs = [
        "signal_processing/cross_correlation_neon.c",
        "signal_processing/downsample_fast_neon.c",
        "signal_processing/min_max_operations_neon.c",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
        "-Wstrict-prototypes",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//common_audio:common_audio_c",
        "//rtc_base:checks",
        "//rtc_base/system:arch",
    ],
    alwayslink = 1,
)

cc_test(
    name = "common_audio_unittests",
    testonly = 1,
    srcs = [
        "audio_converter_unittest.cc",
        "audio_util_unittest.cc",
        "channel_buffer_unittest.cc",
        "fir_filter_unittest.cc",
        "real_fourier_unittest.cc",
        "resampler/push_resampler_unittest.cc",
        "resampler/push_sinc_resampler_unittest.cc",
        "resampler/resampler_unittest.cc",
        "resampler/sinc_resampler_unittest.cc",
        "resampler/sinusoidal_linear_chirp_source.cc",
        "resampler/sinusoidal_linear_chirp_source.h",
        "ring_buffer_unittest.cc",
        "signal_processing/real_fft_unittest.cc",
        "signal_processing/signal_processing_unittest.cc",
        "smoothing_filter_unittest.cc",
        "vad/vad_core_unittest.cc",
        "vad/vad_filterbank_unittest.cc",
        "vad/vad_gmm_unittest.cc",
        "vad/vad_sp_unittest.cc",
        "vad/vad_unittest.cc",
        "vad/vad_unittest.h",
        "wav_file_unittest.cc",
        "wav_header_unittest.cc",
        "window_generator_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//common_audio:fir_filter",
        "//common_audio:fir_filter_factory",
        "//common_audio:sinc_resampler",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/system:arch",
        "//system_wrappers",
        "//test:fileutils",
        "//test:rtc_expect_death",
        "//test:test_main",
        "//test:test_support",
    ],
)
