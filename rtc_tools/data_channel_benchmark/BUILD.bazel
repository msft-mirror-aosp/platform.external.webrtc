# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select", "webrtc_grpc_library")

webrtc_grpc_library(
    name = "signaling_grpc_proto",
    srcs = ["peer_connection_signaling.proto"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "signaling_interface",
    hdrs = ["signaling_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
    ],
)

cc_library(
    name = "grpc_signaling",
    testonly = 1,
    srcs = ["grpc_signaling.cc"],
    hdrs = ["grpc_signaling.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GPR_FORBID_UNREACHABLE_CODE=0",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_github_grpc_grpc//:grpc++",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//rtc_base:threading",
        "//rtc_tools/data_channel_benchmark:signaling_grpc_proto",
        "//rtc_tools/data_channel_benchmark:signaling_interface",
    ],
)

cc_binary(
    name = "data_channel_benchmark",
    testonly = 1,
    srcs = [
        "data_channel_benchmark.cc",
        "peer_connection_client.cc",
        "peer_connection_client.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "//api:create_peerconnection_factory",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/video_codecs:video_decoder_factory_template",
        "//api/video_codecs:video_decoder_factory_template_dav1d_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_decoder_factory_template_open_h264_adapter",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//rtc_base:logging",
        "//rtc_base:refcount",
        "//rtc_base:rtc_event",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_tools/data_channel_benchmark:grpc_signaling",
        "//rtc_tools/data_channel_benchmark:signaling_interface",
        "//system_wrappers:field_trial",
    ],
)
