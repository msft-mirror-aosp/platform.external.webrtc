# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select", "webrtc_proto_library")

cc_library(
    name = "rtc_tools",
    testonly = 1,
    data = [
        "//resources:foreman_128x96.yuv",
        "//resources:foreman_cif.yuv",
        "//resources:network_tester/client_config.dat",
        "//resources:network_tester/server_config.dat",
        "//resources:reference_less_video_test_file.y4m",
        "//resources:rtc_event_log/rtc_event_log_500kbps.binarypb",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//rtc_tools:audioproc_f",
        "//rtc_tools:chart_proto",
        "//rtc_tools:event_log_visualizer",
        "//rtc_tools:frame_analyzer",
        "//rtc_tools:psnr_ssim_analyzer",
        "//rtc_tools:rtc_event_log_to_text",
        "//rtc_tools:rtp_analyzer",
        "//rtc_tools:tools_unittests",
        "//rtc_tools:unpack_aecdump",
        "//rtc_tools:video_file_reader",
        "//rtc_tools:video_quality_analysis",
        "//rtc_tools/network_tester",
    ] + platform_select(
        arm64 = ["//rtc_tools/data_channel_benchmark"],
        linux = ["//rtc_tools/data_channel_benchmark"],
        windows = [],
    ),
)

cc_library(
    name = "video_file_reader",
    srcs = ["video_file_reader.cc"],
    hdrs = ["video_file_reader.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:make_ref_counted",
        "//api:ref_count",
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:refcount",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "video_file_writer",
    srcs = ["video_file_writer.cc"],
    hdrs = ["video_file_writer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//rtc_base:logging",
        "//rtc_tools:video_file_reader",
    ],
)

cc_library(
    name = "video_quality_analysis",
    testonly = 1,
    srcs = [
        "frame_analyzer/linear_least_squares.cc",
        "frame_analyzer/video_color_aligner.cc",
        "frame_analyzer/video_geometry_aligner.cc",
        "frame_analyzer/video_quality_analysis.cc",
        "frame_analyzer/video_temporal_aligner.cc",
    ],
    hdrs = [
        "frame_analyzer/linear_least_squares.h",
        "frame_analyzer/video_color_aligner.h",
        "frame_analyzer/video_geometry_aligner.h",
        "frame_analyzer/video_quality_analysis.h",
        "frame_analyzer/video_temporal_aligner.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "@libyuv//:libyuv",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/numerics",
        "//api/test/metrics:metric",
        "//api/test/metrics:metrics_logger",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//common_video",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_tools:video_file_reader",
    ],
)

cc_binary(
    name = "frame_analyzer",
    testonly = 1,
    srcs = ["frame_analyzer/frame_analyzer.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/test/metrics:chrome_perf_dashboard_metrics_exporter",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metrics_exporter",
        "//api/test/metrics:stdout_metrics_exporter",
        "//rtc_base:stringutils",
        "//rtc_tools:video_file_reader",
        "//rtc_tools:video_file_writer",
        "//rtc_tools:video_quality_analysis",
    ],
)

cc_binary(
    name = "rtp_generator",
    testonly = 1,
    srcs = [
        "rtp_generator/main.cc",
        "rtp_generator/rtp_generator.cc",
        "rtp_generator/rtp_generator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/strings",
        "//api:create_frame_generator",
        "//api:rtp_parameters",
        "//api:transport_api",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_decoder_factory_template",
        "//api/video_codecs:video_decoder_factory_template_dav1d_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_decoder_factory_template_open_h264_adapter",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//call",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:rtp_interfaces",
        "//call:rtp_sender",
        "//call:simulated_packet_receiver",
        "//call:video_stream_api",
        "//media:media_constants",
        "//media:rtc_audio_video",
        "//rtc_base:rtc_json",
        "//rtc_base:threading",
        "//rtc_base/system:file_wrapper",
        "//test:fileutils",
        "//test:frame_generator_capturer",
        "//test:rtp_test_utils",
        "//test/network:simulated_network",
        "//video/config:encoder_config",
        "//video/config:streams_config",
    ],
)

cc_binary(
    name = "video_replay",
    testonly = 1,
    srcs = ["video_replay.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "//api:field_trials",
        "//api:rtp_parameters",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/task_queue",
        "//api/test/video:function_video_factory",
        "//api/transport:field_trial_based_config",
        "//api/units:timestamp",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//call",
        "//call:call_interfaces",
        "//common_video",
        "//media:rtc_internal_video_codecs",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:checks",
        "//rtc_base:rtc_json",
        "//rtc_base:stringutils",
        "//system_wrappers",
        "//test:call_config_utils",
        "//test:encoder_settings",
        "//test:fake_video_codecs",
        "//test:null_transport",
        "//test:rtp_test_utils",
        "//test:run_loop",
        "//test:run_test",
        "//test:run_test_interface",
        "//test:test_renderer",
        "//test:test_renderer_generic",
        "//test:test_support",
        "//test:test_video_capturer",
        "//test:video_test_common",
        "//test:video_test_constants",
        "//test:video_test_support",
        "//test/time_controller",
    ] + platform_select(
        arm64 = [
            "//test:run_test_objc",
            "//test:test_renderer_objc",
        ],
        linux = ["//test:run_test_generic"],
        windows = ["//test:run_test_generic"],
    ),
)

cc_binary(
    name = "psnr_ssim_analyzer",
    testonly = 1,
    srcs = ["psnr_ssim_analyzer/psnr_ssim_analyzer.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//rtc_tools:video_file_reader",
        "//rtc_tools:video_quality_analysis",
    ],
)

cc_library(
    name = "reference_less_video_analysis_lib",
    testonly = 1,
    srcs = ["frame_analyzer/reference_less_video_analysis_lib.cc"],
    hdrs = ["frame_analyzer/reference_less_video_analysis_lib.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//rtc_tools:video_file_reader",
        "//rtc_tools:video_quality_analysis",
    ],
)

cc_binary(
    name = "reference_less_video_analysis",
    testonly = 1,
    srcs = ["frame_analyzer/reference_less_video_analysis.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "//rtc_tools:reference_less_video_analysis_lib",
    ],
)

webrtc_proto_library(
    name = "chart_proto",
    srcs = [
        "rtc_event_log_visualizer/proto/chart.proto",
        "rtc_event_log_visualizer/proto/chart_enums.proto",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "event_log_visualizer_utils",
    srcs = [
        "rtc_event_log_visualizer/alerts.cc",
        "rtc_event_log_visualizer/analyze_audio.cc",
        "rtc_event_log_visualizer/analyzer.cc",
        "rtc_event_log_visualizer/analyzer_common.cc",
        "rtc_event_log_visualizer/log_simulation.cc",
        "rtc_event_log_visualizer/plot_base.cc",
    ],
    hdrs = [
        "rtc_event_log_visualizer/alerts.h",
        "rtc_event_log_visualizer/analyze_audio.h",
        "rtc_event_log_visualizer/analyzer.h",
        "rtc_event_log_visualizer/analyzer_common.h",
        "rtc_event_log_visualizer/log_simulation.h",
        "rtc_event_log_visualizer/plot_base.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:function_view",
        "//api:make_ref_counted",
        "//api:network_state_predictor_api",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api/audio_codecs:audio_codecs_api",
        "//api/environment:environment_factory",
        "//api/neteq:neteq_api",
        "//api/rtc_event_log",
        "//api/transport:field_trial_based_config",
        "//api/transport:goog_cc",
        "//api/transport:network_control",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//call:call_interfaces",
        "//call:video_stream_api",
        "//logging:ice_log",
        "//logging:rtc_event_audio",
        "//logging:rtc_event_bwe",
        "//logging:rtc_event_generic_packet_events",
        "//logging:rtc_event_log_parser",
        "//logging:rtc_event_log_proto",
        "//logging:rtc_event_rtp_rtcp",
        "//logging:rtc_stream_config",
        "//modules/audio_coding:ana_debug_dump_proto",
        "//modules/audio_coding:audio_network_adaptor",
        "//modules/audio_coding:audio_network_adaptor_config",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/congestion_controller",
        "//modules/congestion_controller/goog_cc:delay_based_bwe",
        "//modules/congestion_controller/goog_cc:estimators",
        "//modules/congestion_controller/rtp:transport_feedback",
        "//modules/pacing",
        "//modules/remote_bitrate_estimator",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rate_statistics",
        "//rtc_base:refcount",
        "//rtc_base:rtc_numerics",
        "//rtc_base:stringutils",
        "//rtc_base/network:sent_packet",
        "//rtc_tools:chart_proto",
        "//system_wrappers",
        "//test:explicit_key_value_config",
    ],
)

cc_library(
    name = "event_log_visualizer_bindings",
    srcs = ["rtc_event_log_visualizer/analyzer_bindings.cc"],
    hdrs = ["rtc_event_log_visualizer/analyzer_bindings.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api/units:time_delta",
        "//logging:rtc_event_log_parser",
        "//rtc_base:protobuf_utils",
        "//rtc_base:safe_conversions",
        "//rtc_tools:chart_proto",
        "//rtc_tools:event_log_visualizer_utils",
    ],
)

cc_library(
    name = "event_log_visualizer_bindings_unittest",
    testonly = 1,
    srcs = ["rtc_event_log_visualizer/analyzer_bindings_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//rtc_base:protobuf_utils",
        "//rtc_base/system:file_wrapper",
        "//rtc_tools:chart_proto",
        "//rtc_tools:event_log_visualizer_bindings",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_binary(
    name = "video_encoder",
    testonly = 1,
    srcs = [
        "video_encoder/encoded_image_file_writer.cc",
        "video_encoder/encoded_image_file_writer.h",
        "video_encoder/video_encoder.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "//api:create_frame_generator",
        "//api:frame_generator_api",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video_codecs:builtin_video_encoder_factory",
        "//api/video_codecs:video_codecs_api",
        "//media:media_constants",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding/codecs/av1:av1_svc_config",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base:logging",
        "//test:y4m_frame_generator",
    ],
)

cc_binary(
    name = "event_log_visualizer",
    srcs = [
        "rtc_event_log_visualizer/conversational_speech_en.h",
        "rtc_event_log_visualizer/main.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/flags:config",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/strings",
        "//api/neteq:neteq_api",
        "//api/rtc_event_log",
        "//logging:rtc_event_log_parser",
        "//modules/audio_coding:neteq",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:protobuf_utils",
        "//rtc_tools:event_log_visualizer_utils",
        "//system_wrappers:field_trial",
    ],
)

cc_binary(
    name = "rtc_event_log_to_text",
    testonly = 1,
    srcs = [
        "rtc_event_log_to_text/converter.cc",
        "rtc_event_log_to_text/converter.h",
        "rtc_event_log_to_text/main.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/strings",
        "//api/rtc_event_log",
        "//logging:ice_log",
        "//logging:rtc_event_audio",
        "//logging:rtc_event_begin_end",
        "//logging:rtc_event_bwe",
        "//logging:rtc_event_frame_events",
        "//logging:rtc_event_generic_packet_events",
        "//logging:rtc_event_log2_proto",
        "//logging:rtc_event_log_impl_encoder",
        "//logging:rtc_event_log_parser",
        "//logging:rtc_event_log_proto",
        "//logging:rtc_event_pacing",
        "//logging:rtc_event_rtp_rtcp",
        "//logging:rtc_event_video",
        "//logging:rtc_stream_config",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_test(
    name = "tools_unittests",
    testonly = 1,
    srcs = [
        "frame_analyzer/linear_least_squares_unittest.cc",
        "frame_analyzer/reference_less_video_analysis_unittest.cc",
        "frame_analyzer/video_color_aligner_unittest.cc",
        "frame_analyzer/video_geometry_aligner_unittest.cc",
        "frame_analyzer/video_quality_analysis_unittest.cc",
        "frame_analyzer/video_temporal_aligner_unittest.cc",
        "sanitizers_unittest.cc",
        "video_file_reader_unittest.cc",
        "video_file_writer_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:foreman_128x96.yuv",
        "//resources:foreman_cif.yuv",
        "//resources:network_tester/client_config.dat",
        "//resources:network_tester/server_config.dat",
        "//resources:reference_less_video_test_file.y4m",
        "//resources:rtc_event_log/rtc_event_log_500kbps.binarypb",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "@libyuv//:libyuv",
        "//api:scoped_refptr",
        "//api/test/metrics:metric",
        "//api/test/metrics:metrics_logger",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//common_video",
        "//rtc_base:checks",
        "//rtc_base:null_socket_server",
        "//rtc_base:threading",
        "//rtc_tools:event_log_visualizer_bindings_unittest",
        "//rtc_tools:reference_less_video_analysis_lib",
        "//rtc_tools:video_file_reader",
        "//rtc_tools:video_file_writer",
        "//rtc_tools:video_quality_analysis",
        "//rtc_tools/network_tester:network_tester_unittests",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_main",
        "//test:test_support",
    ],
)

cc_binary(
    name = "audioproc_f",
    testonly = 1,
    srcs = ["audioproc_f/audioproc_float_main.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:audioproc_f_api",
        "//api/audio:audio_processing",
        "//modules/audio_processing",
    ],
)

cc_binary(
    name = "unpack_aecdump",
    srcs = ["unpack_aecdump/unpack.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "//api:function_view",
        "//common_audio",
        "//modules/audio_processing",
        "//modules/audio_processing:audioproc_debug_proto",
        "//modules/audio_processing:audioproc_protobuf_utils",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:protobuf_utils",
        "//rtc_base:stringutils",
        "//rtc_base/system:arch",
    ],
)
