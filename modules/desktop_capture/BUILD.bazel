# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "primitives",
    srcs = [
        "desktop_frame.cc",
        "desktop_geometry.cc",
        "desktop_region.cc",
        "shared_desktop_frame.cc",
        "shared_memory.cc",
    ],
    hdrs = [
        "desktop_capture_types.h",
        "desktop_frame.h",
        "desktop_geometry.h",
        "desktop_region.h",
        "shared_desktop_frame.h",
        "shared_memory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@libyuv//:libyuv",
        "//api:scoped_refptr",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "desktop_capture_modules_tests",
    testonly = 1,
    srcs = [
        "screen_capturer_integration_test.cc",
        "screen_drawer_unittest.cc",
        "window_finder_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
            "WEBRTC_USE_X11",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:function_view",
        "//api:scoped_refptr",
        "//modules/desktop_capture",
        "//modules/desktop_capture:desktop_capture_mock",
        "//modules/desktop_capture:primitives",
        "//modules/desktop_capture:screen_drawer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:platform_thread",
        "//rtc_base:random",
        "//rtc_base:timeutils",
        "//rtc_base/third_party/base64",
        "//system_wrappers",
        "//test:test_support",
        "//test:video_test_support",
    ] + platform_select(
        arm64 = [],
        linux = [],
        windows = ["//rtc_base/win:windows_version"],
    ),
)

cc_library(
    name = "desktop_capture_unittests",
    testonly = 1,
    srcs = [
        "blank_detector_desktop_capturer_wrapper_unittest.cc",
        "cropped_desktop_frame_unittest.cc",
        "desktop_and_cursor_composer_unittest.cc",
        "desktop_capturer_differ_wrapper_unittest.cc",
        "desktop_frame_rotation_unittest.cc",
        "desktop_frame_unittest.cc",
        "desktop_geometry_unittest.cc",
        "desktop_region_unittest.cc",
        "differ_block_unittest.cc",
        "fallback_desktop_capturer_wrapper_unittest.cc",
        "rgba_color_unittest.cc",
        "screen_capturer_helper_unittest.cc",
        "screen_capturer_unittest.cc",
        "test_utils.cc",
        "test_utils_unittest.cc",
        "window_capturer_unittest.cc",
    ] + platform_select(
        arm64 = ["screen_capturer_mac_unittest.cc"],
        linux = [],
        windows = [
            "win/cursor_unittest.cc",
            "win/cursor_unittest_resources.rc",
            "win/screen_capture_utils_unittest.cc",
            "win/screen_capturer_win_directx_unittest.cc",
            "win/test_support/test_window.cc",
            "win/window_capture_utils_unittest.cc",
        ],
    ),
    hdrs = [
        "test_utils.h",
    ] + platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "win/cursor_unittest_resources.h",
            "win/test_support/test_window.h",
        ],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
            "WEBRTC_USE_X11",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/desktop_capture",
        "//modules/desktop_capture:desktop_capture_mock",
        "//modules/desktop_capture:primitives",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:random",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//system_wrappers",
        "//system_wrappers:metrics",
        "//test:test_support",
    ] + platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "//rtc_base/win:scoped_com_initializer",
            "//rtc_base/win:windows_version",
        ],
    ),
)

cc_library(
    name = "screen_drawer",
    testonly = 1,
    srcs = [
        "screen_drawer.cc",
    ] + platform_select(
        arm64 = [
            "screen_drawer_lock_posix.cc",
            "screen_drawer_mac.cc",
        ],
        linux = [
            "screen_drawer_linux.cc",
            "screen_drawer_lock_posix.cc",
        ],
        windows = ["screen_drawer_win.cc"],
    ),
    hdrs = [
        "screen_drawer.h",
    ] + platform_select(
        arm64 = ["screen_drawer_lock_posix.h"],
        linux = ["screen_drawer_lock_posix.h"],
        windows = [],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
            "WEBRTC_USE_X11",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:scoped_refptr",
        "//modules/desktop_capture",
        "//modules/desktop_capture:primitives",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//system_wrappers",
    ] + platform_select(
        arm64 = [],
        linux = [
            "@Xorg//:Xorg_static",
            "@Xorg//:libX11_static",
            "@Xorg//:libXcomposite_static",
            "@Xorg//:libXdamage_static",
            "@Xorg//:libXfixes_static",
            "@Xorg//:libXrandr_static",
            "@Xorg//:libXtst_static",
        ],
        windows = [],
    ),
)

cc_library(
    name = "desktop_capture_mock",
    testonly = 1,
    srcs = ["mock_desktop_capturer_callback.cc"],
    hdrs = ["mock_desktop_capturer_callback.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
            "WEBRTC_USE_X11",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/desktop_capture",
        "//modules/desktop_capture:primitives",
        "//test:test_support",
    ],
)

cc_library(
    name = "desktop_capture",
    srcs = [
        "blank_detector_desktop_capturer_wrapper.cc",
        "cropped_desktop_frame.cc",
        "cropping_window_capturer.cc",
        "desktop_and_cursor_composer.cc",
        "desktop_capture_metrics_helper.cc",
        "desktop_capture_options.cc",
        "desktop_capturer.cc",
        "desktop_capturer_differ_wrapper.cc",
        "desktop_capturer_wrapper.cc",
        "desktop_frame_generator.cc",
        "desktop_frame_rotation.cc",
        "differ_block.cc",
        "fake_desktop_capturer.cc",
        "fallback_desktop_capturer_wrapper.cc",
        "full_screen_application_handler.cc",
        "full_screen_window_detector.cc",
        "mouse_cursor.cc",
        "resolution_tracker.cc",
        "rgba_color.cc",
        "screen_capturer_helper.cc",
        "window_finder.cc",
    ] + platform_select(
        arm64 = [
            "mac/desktop_configuration_monitor.cc",
            "mac/desktop_frame_utils.cc",
            "mac/full_screen_mac_application_handler.cc",
            "mac/window_list_utils.cc",
        ],
        linux = [
            "linux/x11/mouse_cursor_monitor_x11.cc",
            "linux/x11/screen_capturer_x11.cc",
            "linux/x11/shared_x_display.cc",
            "linux/x11/window_capturer_x11.cc",
            "linux/x11/window_finder_x11.cc",
            "linux/x11/window_list_utils.cc",
            "linux/x11/x_atom_cache.cc",
            "linux/x11/x_error_trap.cc",
            "linux/x11/x_server_pixel_buffer.cc",
            "linux/x11/x_window_property.cc",
            "mouse_cursor_monitor_linux.cc",
            "screen_capturer_linux.cc",
            "window_capturer_linux.cc",
        ],
        windows = [
            "cropping_window_capturer_win.cc",
            "desktop_frame_win.cc",
            "mouse_cursor_monitor_win.cc",
            "screen_capturer_win.cc",
            "win/cursor.cc",
            "win/d3d_device.cc",
            "win/desktop.cc",
            "win/desktop_capture_utils.cc",
            "win/display_configuration_monitor.cc",
            "win/dxgi_adapter_duplicator.cc",
            "win/dxgi_context.cc",
            "win/dxgi_duplicator_controller.cc",
            "win/dxgi_frame.cc",
            "win/dxgi_output_duplicator.cc",
            "win/dxgi_texture.cc",
            "win/dxgi_texture_mapping.cc",
            "win/dxgi_texture_staging.cc",
            "win/full_screen_win_application_handler.cc",
            "win/scoped_thread_desktop.cc",
            "win/screen_capture_utils.cc",
            "win/screen_capturer_win_directx.cc",
            "win/screen_capturer_win_gdi.cc",
            "win/screen_capturer_win_magnifier.cc",
            "win/selected_window_context.cc",
            "win/window_capture_utils.cc",
            "win/window_capturer_win_gdi.cc",
            "window_capturer_win.cc",
            "window_finder_win.cc",
        ],
    ),
    hdrs = [
        "blank_detector_desktop_capturer_wrapper.h",
        "cropped_desktop_frame.h",
        "cropping_window_capturer.h",
        "delegated_source_list_controller.h",
        "desktop_and_cursor_composer.h",
        "desktop_capture_metrics_helper.h",
        "desktop_capture_options.h",
        "desktop_capturer.h",
        "desktop_capturer_differ_wrapper.h",
        "desktop_capturer_wrapper.h",
        "desktop_frame_generator.h",
        "desktop_frame_rotation.h",
        "differ_block.h",
        "fake_desktop_capturer.h",
        "fallback_desktop_capturer_wrapper.h",
        "full_screen_application_handler.h",
        "full_screen_window_detector.h",
        "mouse_cursor.h",
        "mouse_cursor_monitor.h",
        "resolution_tracker.h",
        "rgba_color.h",
        "screen_capture_frame_queue.h",
        "screen_capturer_helper.h",
        "window_finder.h",
    ] + platform_select(
        arm64 = [
            "mac/desktop_configuration.h",
            "mac/desktop_configuration_monitor.h",
            "mac/desktop_frame_utils.h",
            "mac/full_screen_mac_application_handler.h",
            "mac/window_list_utils.h",
        ],
        linux = [
            "linux/x11/mouse_cursor_monitor_x11.h",
            "linux/x11/screen_capturer_x11.h",
            "linux/x11/shared_x_display.h",
            "linux/x11/window_capturer_x11.h",
            "linux/x11/window_finder_x11.h",
            "linux/x11/window_list_utils.h",
            "linux/x11/x_atom_cache.h",
            "linux/x11/x_error_trap.h",
            "linux/x11/x_server_pixel_buffer.h",
            "linux/x11/x_window_property.h",
        ],
        windows = [
            "desktop_frame_win.h",
            "win/cursor.h",
            "win/d3d_device.h",
            "win/desktop.h",
            "win/desktop_capture_utils.h",
            "win/display_configuration_monitor.h",
            "win/dxgi_adapter_duplicator.h",
            "win/dxgi_context.h",
            "win/dxgi_duplicator_controller.h",
            "win/dxgi_frame.h",
            "win/dxgi_output_duplicator.h",
            "win/dxgi_texture.h",
            "win/dxgi_texture_mapping.h",
            "win/dxgi_texture_staging.h",
            "win/full_screen_win_application_handler.h",
            "win/scoped_gdi_object.h",
            "win/scoped_thread_desktop.h",
            "win/screen_capture_utils.h",
            "win/screen_capturer_win_directx.h",
            "win/screen_capturer_win_gdi.h",
            "win/screen_capturer_win_magnifier.h",
            "win/selected_window_context.h",
            "win/window_capture_utils.h",
            "win/window_capturer_win_gdi.h",
            "window_finder_win.h",
        ],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
            "WEBRTC_USE_X11",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    linkopts = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "d3d11.lib",
            "dxgi.lib",
            "shcore.lib",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@libyuv//:libyuv",
        "//api:function_view",
        "//api:make_ref_counted",
        "//api:refcountedbase",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//modules/desktop_capture:primitives",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:random",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:arch",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
        "//system_wrappers",
        "//system_wrappers:metrics",
    ] + platform_select(
        arm64 = ["//modules/desktop_capture:desktop_capture_objc"],
        linux = [
            "@Xorg//:Xorg_static",
            "@Xorg//:libX11_static",
            "@Xorg//:libXcomposite_static",
            "@Xorg//:libXdamage_static",
            "@Xorg//:libXfixes_static",
            "@Xorg//:libXrandr_static",
            "@Xorg//:libXtst_static",
            "//modules/desktop_capture:desktop_capture_differ_sse2",
            "//rtc_base:sanitizer",
        ],
        windows = [
            "//modules/desktop_capture:desktop_capture_differ_sse2",
            "//rtc_base:win32",
            "//rtc_base/containers:flat_map",
            "//rtc_base/win:create_direct3d_device",
            "//rtc_base/win:get_activation_factory",
            "//rtc_base/win:windows_version",
        ],
    ),
)

objc_library(
    name = "desktop_capture_objc",
    srcs = [
        "mac/desktop_configuration.mm",
        "mac/desktop_frame_cgimage.mm",
        "mac/desktop_frame_iosurface.mm",
        "mac/desktop_frame_provider.mm",
        "mac/screen_capturer_mac.mm",
        "mouse_cursor_monitor_mac.mm",
        "screen_capturer_darwin.mm",
        "window_capturer_mac.mm",
        "window_finder_mac.mm",
    ],
    hdrs = [
        "delegated_source_list_controller.h",
        "desktop_capture_options.h",
        "desktop_capturer.h",
        "full_screen_application_handler.h",
        "full_screen_window_detector.h",
        "mac/desktop_configuration.h",
        "mac/desktop_configuration_monitor.h",
        "mac/desktop_frame_cgimage.h",
        "mac/desktop_frame_iosurface.h",
        "mac/desktop_frame_provider.h",
        "mac/screen_capturer_mac.h",
        "mac/window_list_utils.h",
        "mouse_cursor.h",
        "mouse_cursor_monitor.h",
        "screen_capture_frame_queue.h",
        "screen_capturer_helper.h",
        "window_finder.h",
        "window_finder_mac.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
        "-Wimplicit-retain-self",
        "-Wmissing-field-initializers",
        "-Wstrict-overflow",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    includes = [
        "../../sdk/objc",
        "../../sdk/objc/base",
    ],
    visibility = ["//modules/desktop_capture:__pkg__"],
    deps = [
        "@apple_frameworks//:AppKit",
        "@apple_frameworks//:IOKit",
        "@apple_frameworks//:IOSurface",
        "//api:function_view",
        "//api:refcountedbase",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//modules/desktop_capture:primitives",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:rtc_export",
        "//sdk:helpers_objc",
    ],
)

cc_library(
    name = "desktop_capture_differ_sse2",
    srcs = ["differ_vector_sse2.cc"],
    hdrs = ["differ_vector_sse2.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = [
            "-fno-exceptions",
            "-msse2",
        ],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//modules/desktop_capture:__pkg__"],
)
