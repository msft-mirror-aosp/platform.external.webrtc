# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "aec3",
    srcs = [
        "adaptive_fir_filter.cc",
        "adaptive_fir_filter_erl.cc",
        "aec3_common.cc",
        "aec3_fft.cc",
        "aec_state.cc",
        "alignment_mixer.cc",
        "api_call_jitter_metrics.cc",
        "block_buffer.cc",
        "block_delay_buffer.cc",
        "block_framer.cc",
        "block_processor.cc",
        "block_processor_metrics.cc",
        "clockdrift_detector.cc",
        "coarse_filter_update_gain.cc",
        "comfort_noise_generator.cc",
        "config_selector.cc",
        "decimator.cc",
        "dominant_nearend_detector.cc",
        "downsampled_render_buffer.cc",
        "echo_audibility.cc",
        "echo_canceller3.cc",
        "echo_path_delay_estimator.cc",
        "echo_path_variability.cc",
        "echo_remover.cc",
        "echo_remover_metrics.cc",
        "erl_estimator.cc",
        "erle_estimator.cc",
        "fft_buffer.cc",
        "filter_analyzer.cc",
        "frame_blocker.cc",
        "fullband_erle_estimator.cc",
        "matched_filter.cc",
        "matched_filter_lag_aggregator.cc",
        "moving_average.cc",
        "multi_channel_content_detector.cc",
        "refined_filter_update_gain.cc",
        "render_buffer.cc",
        "render_delay_buffer.cc",
        "render_delay_controller.cc",
        "render_delay_controller_metrics.cc",
        "render_signal_analyzer.cc",
        "residual_echo_estimator.cc",
        "reverb_decay_estimator.cc",
        "reverb_frequency_response.cc",
        "reverb_model.cc",
        "reverb_model_estimator.cc",
        "signal_dependent_erle_estimator.cc",
        "spectrum_buffer.cc",
        "stationarity_estimator.cc",
        "subband_erle_estimator.cc",
        "subband_nearend_detector.cc",
        "subtractor.cc",
        "subtractor_output.cc",
        "subtractor_output_analyzer.cc",
        "suppression_filter.cc",
        "suppression_gain.cc",
        "transparent_mode.cc",
    ],
    hdrs = [
        "aec_state.h",
        "alignment_mixer.h",
        "api_call_jitter_metrics.h",
        "block.h",
        "block_delay_buffer.h",
        "block_framer.h",
        "block_processor.h",
        "block_processor_metrics.h",
        "clockdrift_detector.h",
        "coarse_filter_update_gain.h",
        "comfort_noise_generator.h",
        "config_selector.h",
        "decimator.h",
        "delay_estimate.h",
        "dominant_nearend_detector.h",
        "downsampled_render_buffer.h",
        "echo_audibility.h",
        "echo_canceller3.h",
        "echo_path_delay_estimator.h",
        "echo_path_variability.h",
        "echo_remover.h",
        "echo_remover_metrics.h",
        "erl_estimator.h",
        "erle_estimator.h",
        "filter_analyzer.h",
        "frame_blocker.h",
        "fullband_erle_estimator.h",
        "matched_filter_lag_aggregator.h",
        "moving_average.h",
        "multi_channel_content_detector.h",
        "nearend_detector.h",
        "refined_filter_update_gain.h",
        "render_delay_buffer.h",
        "render_delay_controller.h",
        "render_delay_controller_metrics.h",
        "render_signal_analyzer.h",
        "residual_echo_estimator.h",
        "reverb_decay_estimator.h",
        "reverb_frequency_response.h",
        "reverb_model.h",
        "reverb_model_estimator.h",
        "signal_dependent_erle_estimator.h",
        "stationarity_estimator.h",
        "subband_erle_estimator.h",
        "subband_nearend_detector.h",
        "subtractor.h",
        "subtractor_output.h",
        "subtractor_output_analyzer.h",
        "suppression_filter.h",
        "suppression_gain.h",
        "transparent_mode.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio:aec3_config",
        "//api/audio:echo_control",
        "//common_audio:common_audio_c",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing:audio_buffer",
        "//modules/audio_processing:high_pass_filter",
        "//modules/audio_processing/aec3:adaptive_fir_filter",
        "//modules/audio_processing/aec3:adaptive_fir_filter_erl",
        "//modules/audio_processing/aec3:aec3_common",
        "//modules/audio_processing/aec3:aec3_fft",
        "//modules/audio_processing/aec3:fft_data",
        "//modules/audio_processing/aec3:matched_filter",
        "//modules/audio_processing/aec3:render_buffer",
        "//modules/audio_processing/aec3:vector_math",
        "//modules/audio_processing/utility:cascaded_biquad_filter",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:safe_minmax",
        "//rtc_base:swap_queue",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/system:arch",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ] + platform_select(
        arm64 = [],
        linux = ["//modules/audio_processing/aec3:aec3_avx2"],
        windows = ["//modules/audio_processing/aec3:aec3_avx2"],
    ),
)

cc_library(
    name = "aec3_common",
    hdrs = ["aec3_common.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "aec3_fft",
    hdrs = ["aec3_fft.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//common_audio/third_party/ooura:fft_size_128",
        "//modules/audio_processing/aec3:aec3_common",
        "//modules/audio_processing/aec3:fft_data",
        "//rtc_base:checks",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "render_buffer",
    hdrs = [
        "block.h",
        "block_buffer.h",
        "fft_buffer.h",
        "render_buffer.h",
        "spectrum_buffer.h",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//modules/audio_processing/aec3:aec3_common",
        "//modules/audio_processing/aec3:fft_data",
        "//rtc_base:checks",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "adaptive_fir_filter",
    hdrs = ["adaptive_fir_filter.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:array_view",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing/aec3:aec3_common",
        "//modules/audio_processing/aec3:aec3_fft",
        "//modules/audio_processing/aec3:fft_data",
        "//modules/audio_processing/aec3:render_buffer",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "adaptive_fir_filter_erl",
    hdrs = ["adaptive_fir_filter_erl.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//modules/audio_processing/aec3:aec3_common",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "matched_filter",
    hdrs = ["matched_filter.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//modules/audio_processing/aec3:aec3_common",
        "//rtc_base:gtest_prod",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "vector_math",
    hdrs = ["vector_math.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//modules/audio_processing/aec3:aec3_common",
        "//rtc_base:checks",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "fft_data",
    hdrs = ["fft_data.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//modules/audio_processing/aec3:aec3_common",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "aec3_avx2",
    srcs = [
        "adaptive_fir_filter_avx2.cc",
        "adaptive_fir_filter_erl_avx2.cc",
        "fft_data_avx2.cc",
        "matched_filter_avx2.cc",
        "vector_math_avx2.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = [
            "-fno-exceptions",
            "-mavx2",
            "-mfma",
        ],
        windows = [
            "-fno-rtti",
            "-march=haswell",
        ],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//modules/audio_processing/aec3:adaptive_fir_filter",
        "//modules/audio_processing/aec3:adaptive_fir_filter_erl",
        "//modules/audio_processing/aec3:fft_data",
        "//modules/audio_processing/aec3:matched_filter",
        "//modules/audio_processing/aec3:vector_math",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "aec3_unittests",
    testonly = 1,
    srcs = [
        "adaptive_fir_filter_erl_unittest.cc",
        "adaptive_fir_filter_unittest.cc",
        "aec3_fft_unittest.cc",
        "aec_state_unittest.cc",
        "alignment_mixer_unittest.cc",
        "api_call_jitter_metrics_unittest.cc",
        "block_delay_buffer_unittest.cc",
        "block_framer_unittest.cc",
        "block_processor_metrics_unittest.cc",
        "block_processor_unittest.cc",
        "clockdrift_detector_unittest.cc",
        "coarse_filter_update_gain_unittest.cc",
        "comfort_noise_generator_unittest.cc",
        "config_selector_unittest.cc",
        "decimator_unittest.cc",
        "echo_canceller3_unittest.cc",
        "echo_path_delay_estimator_unittest.cc",
        "echo_path_variability_unittest.cc",
        "echo_remover_metrics_unittest.cc",
        "echo_remover_unittest.cc",
        "erl_estimator_unittest.cc",
        "erle_estimator_unittest.cc",
        "fft_data_unittest.cc",
        "filter_analyzer_unittest.cc",
        "frame_blocker_unittest.cc",
        "matched_filter_lag_aggregator_unittest.cc",
        "matched_filter_unittest.cc",
        "mock/mock_block_processor.cc",
        "mock/mock_echo_remover.cc",
        "mock/mock_render_delay_buffer.cc",
        "mock/mock_render_delay_controller.cc",
        "moving_average_unittest.cc",
        "multi_channel_content_detector_unittest.cc",
        "refined_filter_update_gain_unittest.cc",
        "render_buffer_unittest.cc",
        "render_delay_buffer_unittest.cc",
        "render_delay_controller_metrics_unittest.cc",
        "render_delay_controller_unittest.cc",
        "render_signal_analyzer_unittest.cc",
        "residual_echo_estimator_unittest.cc",
        "reverb_model_estimator_unittest.cc",
        "signal_dependent_erle_estimator_unittest.cc",
        "subtractor_unittest.cc",
        "suppression_filter_unittest.cc",
        "suppression_gain_unittest.cc",
        "vector_math_unittest.cc",
    ],
    hdrs = [
        "mock/mock_block_processor.h",
        "mock/mock_echo_remover.h",
        "mock/mock_render_delay_buffer.h",
        "mock/mock_render_delay_controller.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:audio_processing/agc2/rnn_vad/band_energies.dat",
        "//resources:audio_processing/agc2/rnn_vad/pitch_buf_24k.dat",
        "//resources:audio_processing/agc2/rnn_vad/pitch_lp_res.dat",
        "//resources:audio_processing/agc2/rnn_vad/pitch_search_int.dat",
        "//resources:audio_processing/agc2/rnn_vad/samples.pcm",
        "//resources:audio_processing/agc2/rnn_vad/vad_prob.dat",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio:aec3_config",
        "//modules/audio_processing",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing:audio_buffer",
        "//modules/audio_processing:audio_processing_unittests",
        "//modules/audio_processing:high_pass_filter",
        "//modules/audio_processing/aec3",
        "//modules/audio_processing/aec3:adaptive_fir_filter",
        "//modules/audio_processing/aec3:adaptive_fir_filter_erl",
        "//modules/audio_processing/aec3:aec3_common",
        "//modules/audio_processing/aec3:aec3_fft",
        "//modules/audio_processing/aec3:fft_data",
        "//modules/audio_processing/aec3:matched_filter",
        "//modules/audio_processing/aec3:render_buffer",
        "//modules/audio_processing/aec3:vector_math",
        "//modules/audio_processing/utility:cascaded_biquad_filter",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:random",
        "//rtc_base:safe_minmax",
        "//rtc_base:stringutils",
        "//rtc_base/system:arch",
        "//system_wrappers",
        "//system_wrappers:metrics",
        "//test:field_trial",
        "//test:test_support",
    ],
)
