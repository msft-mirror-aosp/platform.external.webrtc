# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "vad",
    srcs = [
        "gmm.cc",
        "pitch_based_vad.cc",
        "pitch_internal.cc",
        "pole_zero_filter.cc",
        "standalone_vad.cc",
        "vad_audio_proc.cc",
        "vad_circular_buffer.cc",
        "voice_activity_detector.cc",
    ],
    hdrs = [
        "common.h",
        "gmm.h",
        "noise_gmm_tables.h",
        "pitch_based_vad.h",
        "pitch_internal.h",
        "pole_zero_filter.h",
        "standalone_vad.h",
        "vad_audio_proc.h",
        "vad_audio_proc_internal.h",
        "vad_circular_buffer.h",
        "voice_activity_detector.h",
        "voice_gmm_tables.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//modules/audio_processing:__subpackages__",
        "//rtc_tools:__pkg__",
    ],
    deps = [
        "//audio/utility:audio_frame_operations",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//common_audio/third_party/ooura:fft_size_256",
        "//modules/audio_coding:isac_vad",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "vad_unittests",
    testonly = 1,
    srcs = [
        "gmm_unittest.cc",
        "pitch_based_vad_unittest.cc",
        "pitch_internal_unittest.cc",
        "pole_zero_filter_unittest.cc",
        "standalone_vad_unittest.cc",
        "vad_audio_proc_unittest.cc",
        "vad_circular_buffer_unittest.cc",
        "voice_activity_detector_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//common_audio",
        "//modules/audio_processing/vad",
        "//test:fileutils",
        "//test:test_support",
    ],
)
