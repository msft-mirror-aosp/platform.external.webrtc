# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select", "webrtc_proto_library")

cc_library(
    name = "api",
    hdrs = ["include/audio_processing.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/audio:audio_processing"],
)

cc_library(
    name = "audio_frame_proxies",
    srcs = ["include/audio_frame_proxies.cc"],
    hdrs = ["include/audio_frame_proxies.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/audio:audio_frame_api",
        "//api/audio:audio_processing",
        "//modules/audio_processing:audio_frame_view",
    ],
)

cc_library(
    name = "audio_buffer",
    srcs = [
        "audio_buffer.cc",
        "splitting_filter.cc",
        "three_band_filter_bank.cc",
    ],
    hdrs = [
        "audio_buffer.h",
        "splitting_filter.h",
        "three_band_filter_bank.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api/audio:audio_processing",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "high_pass_filter",
    srcs = ["high_pass_filter.cc"],
    hdrs = ["high_pass_filter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//modules/audio_processing:audio_buffer",
        "//modules/audio_processing/utility:cascaded_biquad_filter",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "aec_dump_interface",
    srcs = ["include/aec_dump.cc"],
    hdrs = ["include/aec_dump.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/types:optional",
        "//api/audio:audio_processing",
        "//modules/audio_processing:audio_frame_view",
    ],
)

cc_library(
    name = "gain_controller2",
    srcs = ["gain_controller2.cc"],
    hdrs = ["gain_controller2.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/audio:audio_processing",
        "//common_audio",
        "//modules/audio_processing:aec_dump_interface",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing:audio_buffer",
        "//modules/audio_processing:audio_frame_view",
        "//modules/audio_processing/agc2:adaptive_digital_gain_controller",
        "//modules/audio_processing/agc2:common",
        "//modules/audio_processing/agc2:cpu_features",
        "//modules/audio_processing/agc2:fixed_digital",
        "//modules/audio_processing/agc2:gain_applier",
        "//modules/audio_processing/agc2:input_volume_controller",
        "//modules/audio_processing/agc2:noise_level_estimator",
        "//modules/audio_processing/agc2:saturation_protector",
        "//modules/audio_processing/agc2:speech_level_estimator",
        "//modules/audio_processing/agc2:vad_wrapper",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//system_wrappers:field_trial",
    ],
)

cc_library(
    name = "audio_processing",
    srcs = [
        "audio_processing_builder_impl.cc",
        "audio_processing_impl.cc",
        "echo_control_mobile_impl.cc",
        "gain_control_impl.cc",
    ],
    hdrs = [
        "audio_processing_impl.h",
        "echo_control_mobile_impl.h",
        "gain_control_impl.h",
        "render_queue_item_verifier.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:function_view",
        "//api:make_ref_counted",
        "//api/audio:aec3_config",
        "//api/audio:audio_frame_api",
        "//api/audio:audio_processing",
        "//api/audio:audio_processing_statistics",
        "//api/audio:echo_control",
        "//api/task_queue",
        "//audio/utility:audio_frame_operations",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//common_audio:fir_filter",
        "//common_audio:fir_filter_factory",
        "//common_audio/third_party/ooura:fft_size_256",
        "//modules/audio_processing:aec_dump_interface",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing:audio_buffer",
        "//modules/audio_processing:audio_frame_proxies",
        "//modules/audio_processing:audio_frame_view",
        "//modules/audio_processing:gain_controller2",
        "//modules/audio_processing:high_pass_filter",
        "//modules/audio_processing:optionally_built_submodule_creators",
        "//modules/audio_processing:rms_level",
        "//modules/audio_processing/aec3",
        "//modules/audio_processing/aec_dump",
        "//modules/audio_processing/aec_dump:aec_dump_impl",
        "//modules/audio_processing/aecm:aecm_core",
        "//modules/audio_processing/agc",
        "//modules/audio_processing/agc:gain_control_interface",
        "//modules/audio_processing/agc:legacy_agc",
        "//modules/audio_processing/agc2:input_volume_stats_reporter",
        "//modules/audio_processing/capture_levels_adjuster",
        "//modules/audio_processing/ns",
        "//modules/audio_processing/transient:transient_suppressor_api",
        "//modules/audio_processing/vad",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:gtest_prod",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:safe_minmax",
        "//rtc_base:sanitizer",
        "//rtc_base:swap_queue",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:rtc_export",
        "//system_wrappers",
        "//system_wrappers:denormal_disabler",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "residual_echo_detector",
    srcs = [
        "echo_detector/circular_buffer.cc",
        "echo_detector/mean_variance_estimator.cc",
        "echo_detector/moving_max.cc",
        "echo_detector/normalized_covariance_estimator.cc",
        "residual_echo_detector.cc",
    ],
    hdrs = [
        "echo_detector/circular_buffer.h",
        "echo_detector/mean_variance_estimator.h",
        "echo_detector/moving_max.h",
        "echo_detector/normalized_covariance_estimator.h",
        "residual_echo_detector.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio:audio_processing",
        "//modules/audio_processing:apm_logging",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "optionally_built_submodule_creators",
    srcs = ["optionally_built_submodule_creators.cc"],
    hdrs = ["optionally_built_submodule_creators.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_processing/transient:transient_suppressor_api",
        "//modules/audio_processing/transient:transient_suppressor_impl",
    ],
)

cc_library(
    name = "rms_level",
    srcs = ["rms_level.cc"],
    hdrs = ["rms_level.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "audio_processing_statistics",
    hdrs = ["include/audio_processing_statistics.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/audio:audio_processing_statistics"],
)

cc_library(
    name = "audio_frame_view",
    hdrs = ["include/audio_frame_view.h"],
    visibility = ["//:__subpackages__"],
    deps = ["//api:array_view"],
)

webrtc_proto_library(
    name = "audioproc_debug_proto",
    srcs = ["debug.proto"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "apm_logging",
    srcs = ["logging/apm_data_dumper.cc"],
    hdrs = ["logging/apm_data_dumper.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//common_audio",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "mocks",
    testonly = 1,
    hdrs = ["include/mock_audio_processing.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/strings",
        "//api/audio:audio_processing",
        "//api/audio:audio_processing_statistics",
        "//api/task_queue",
        "//modules/audio_processing",
        "//modules/audio_processing:aec_dump_interface",
        "//modules/audio_processing:audio_buffer",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_processing_tests",
    testonly = 1,
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_processing:audioproc_test_utils",
        "//modules/audio_processing:audioproc_unittest_proto",
        "//modules/audio_processing/aec_dump:aec_dump_unittests",
        "//modules/audio_processing/test/conversational_speech",
        "//modules/audio_processing/test/py_quality_assessment",
        "//modules/audio_processing/transient:click_annotate",
        "//modules/audio_processing/transient:transient_suppression_test",
    ],
)

cc_library(
    name = "audio_processing_unittests",
    testonly = 1,
    srcs = [
        "audio_buffer_unittest.cc",
        "audio_frame_view_unittest.cc",
        "audio_processing_impl_locking_unittest.cc",
        "audio_processing_impl_unittest.cc",
        "audio_processing_unittest.cc",
        "echo_control_mobile_bit_exact_unittest.cc",
        "echo_control_mobile_unittest.cc",
        "echo_detector/circular_buffer_unittest.cc",
        "echo_detector/mean_variance_estimator_unittest.cc",
        "echo_detector/moving_max_unittest.cc",
        "echo_detector/normalized_covariance_estimator_unittest.cc",
        "gain_control_unittest.cc",
        "gain_controller2_unittest.cc",
        "high_pass_filter_unittest.cc",
        "residual_echo_detector_unittest.cc",
        "rms_level_unittest.cc",
        "splitting_filter_unittest.cc",
        "test/debug_dump_replayer.cc",
        "test/debug_dump_test.cc",
        "test/echo_canceller3_config_json_unittest.cc",
        "test/echo_canceller_test_tools.cc",
        "test/echo_canceller_test_tools_unittest.cc",
        "test/fake_recording_device_unittest.cc",
    ],
    hdrs = [
        "test/debug_dump_replayer.h",
        "test/echo_canceller_test_tools.h",
        "test/echo_control_mock.h",
        "test/test_utils.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:audio_processing/agc2/rnn_vad/band_energies.dat",
        "//resources:audio_processing/agc2/rnn_vad/pitch_buf_24k.dat",
        "//resources:audio_processing/agc2/rnn_vad/pitch_lp_res.dat",
        "//resources:audio_processing/agc2/rnn_vad/pitch_search_int.dat",
        "//resources:audio_processing/agc2/rnn_vad/samples.pcm",
        "//resources:audio_processing/agc2/rnn_vad/vad_prob.dat",
    ],
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_AUDIOPROC_DEBUG_DUMP",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_AUDIOPROC_FIXED_PROFILE",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_AUDIOPROC_FLOAT_PROFILE",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_AUDIOPROC_FLOAT_PROFILE",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/audio:aec3_config",
        "//api/audio:aec3_factory",
        "//api/audio:audio_frame_api",
        "//api/audio:audio_processing",
        "//api/audio:echo_control",
        "//api/audio:echo_detector_creator",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_processing",
        "//modules/audio_processing:aec3_config_json",
        "//modules/audio_processing:analog_mic_simulation",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing:audio_buffer",
        "//modules/audio_processing:audio_frame_view",
        "//modules/audio_processing:audioproc_debug_proto",
        "//modules/audio_processing:audioproc_protobuf_utils",
        "//modules/audio_processing:audioproc_test_utils",
        "//modules/audio_processing:audioproc_unittest_proto",
        "//modules/audio_processing:gain_controller2",
        "//modules/audio_processing:high_pass_filter",
        "//modules/audio_processing:mocks",
        "//modules/audio_processing:optionally_built_submodule_creators",
        "//modules/audio_processing:residual_echo_detector",
        "//modules/audio_processing:rms_level",
        "//modules/audio_processing:runtime_settings_protobuf_utils",
        "//modules/audio_processing/aec_dump",
        "//modules/audio_processing/aec_dump:aec_dump_unittests",
        "//modules/audio_processing/aec_dump:mock_aec_dump_unittests",
        "//modules/audio_processing/agc:agc_unittests",
        "//modules/audio_processing/agc2:adaptive_digital_gain_controller_unittest",
        "//modules/audio_processing/agc2:biquad_filter_unittests",
        "//modules/audio_processing/agc2:fixed_digital_unittests",
        "//modules/audio_processing/agc2:gain_applier_unittest",
        "//modules/audio_processing/agc2:input_volume_controller_unittests",
        "//modules/audio_processing/agc2:input_volume_stats_reporter_unittests",
        "//modules/audio_processing/agc2:noise_estimator_unittests",
        "//modules/audio_processing/agc2:saturation_protector_unittest",
        "//modules/audio_processing/agc2:speech_level_estimator_unittest",
        "//modules/audio_processing/agc2:test_utils",
        "//modules/audio_processing/agc2:vad_wrapper_unittests",
        "//modules/audio_processing/agc2/rnn_vad:unittests",
        "//modules/audio_processing/capture_levels_adjuster",
        "//modules/audio_processing/capture_levels_adjuster:capture_levels_adjuster_unittests",
        "//modules/audio_processing/test/conversational_speech:unittest",
        "//modules/audio_processing/transient:transient_suppression_unittests",
        "//modules/audio_processing/utility:legacy_delay_estimator_unittest",
        "//modules/audio_processing/utility:pffft_wrapper_unittest",
        "//modules/audio_processing/vad:vad_unittests",
        "//rtc_base:checks",
        "//rtc_base:gtest_prod",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:protobuf_utils",
        "//rtc_base:random",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:safe_minmax",
        "//rtc_base:stringutils",
        "//rtc_base:swap_queue",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:arch",
        "//rtc_base/system:file_wrapper",
        "//system_wrappers",
        "//system_wrappers:denormal_disabler",
        "//test:field_trial",
        "//test:fileutils",
        "//test:rtc_expect_death",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_processing_perf_tests",
    testonly = 1,
    srcs = ["audio_processing_performance_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:array_view",
        "//api/numerics",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metric",
        "//modules/audio_processing",
        "//modules/audio_processing:audioproc_test_utils",
        "//rtc_base:platform_thread",
        "//rtc_base:protobuf_utils",
        "//rtc_base:random",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//system_wrappers",
        "//test:test_support",
    ],
)

cc_library(
    name = "analog_mic_simulation",
    srcs = ["test/fake_recording_device.cc"],
    hdrs = ["test/fake_recording_device.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio:audio_frame_api",
        "//common_audio",
        "//modules/audio_processing/agc2:gain_map",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:safe_conversions",
        "//rtc_base:safe_minmax",
    ],
)

cc_library(
    name = "audioproc_f_impl",
    testonly = 1,
    srcs = [
        "test/aec_dump_based_simulator.cc",
        "test/api_call_statistics.cc",
        "test/audio_processing_simulator.cc",
        "test/audioproc_float_impl.cc",
        "test/wav_based_simulator.cc",
    ],
    hdrs = [
        "test/aec_dump_based_simulator.h",
        "test/api_call_statistics.h",
        "test/audio_processing_simulator.h",
        "test/audioproc_float_impl.h",
        "test/wav_based_simulator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api/audio:aec3_factory",
        "//api/audio:audio_processing",
        "//api/audio:echo_detector_creator",
        "//common_audio",
        "//modules/audio_processing",
        "//modules/audio_processing:aec3_config_json",
        "//modules/audio_processing:analog_mic_simulation",
        "//modules/audio_processing:apm_logging",
        "//modules/audio_processing:audioproc_debug_proto",
        "//modules/audio_processing:audioproc_protobuf_utils",
        "//modules/audio_processing:audioproc_test_utils",
        "//modules/audio_processing:runtime_settings_protobuf_utils",
        "//modules/audio_processing/aec_dump",
        "//modules/audio_processing/aec_dump:aec_dump_impl",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:protobuf_utils",
        "//rtc_base:rtc_json",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:timeutils",
        "//rtc_base/system:file_wrapper",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//test:test_support",
    ],
)

webrtc_proto_library(
    name = "audioproc_unittest_proto",
    srcs = ["test/unittest.proto"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "audioproc_protobuf_utils",
    srcs = ["test/protobuf_utils.cc"],
    hdrs = ["test/protobuf_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_processing:audioproc_debug_proto",
        "//rtc_base:checks",
        "//rtc_base:protobuf_utils",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "runtime_settings_protobuf_utils",
    testonly = 1,
    srcs = ["test/runtime_setting_util.cc"],
    hdrs = ["test/runtime_setting_util.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/audio:audio_processing",
        "//modules/audio_processing:audioproc_debug_proto",
        "//modules/audio_processing:audioproc_protobuf_utils",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "audioproc_test_utils",
    testonly = 1,
    srcs = [
        "test/audio_buffer_tools.cc",
        "test/audio_processing_builder_for_testing.cc",
        "test/bitexactness_tools.cc",
        "test/performance_timer.cc",
        "test/simulator_buffers.cc",
        "test/test_utils.cc",
    ],
    hdrs = [
        "test/audio_buffer_tools.h",
        "test/audio_processing_builder_for_testing.h",
        "test/bitexactness_tools.h",
        "test/performance_timer.h",
        "test/simulator_buffers.h",
        "test/test_utils.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_APM_DEBUG_DUMP=0",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:array_view",
        "//api/audio:audio_frame_api",
        "//api/audio:audio_processing",
        "//common_audio",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_processing",
        "//modules/audio_processing:audio_buffer",
        "//rtc_base:checks",
        "//rtc_base:random",
        "//rtc_base/system:arch",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_library(
    name = "aec3_config_json",
    testonly = 1,
    srcs = ["test/echo_canceller3_config_json.cc"],
    hdrs = ["test/echo_canceller3_config_json.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api/audio:aec3_config",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:rtc_json",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)
