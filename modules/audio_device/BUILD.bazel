# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "audio_device_default",
    hdrs = ["include/audio_device_default.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/audio:audio_device"],
)

cc_library(
    name = "audio_device",
    visibility = ["//visibility:public"],
    deps = [
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
    ],
)

cc_library(
    name = "audio_device_api",
    hdrs = [
        "include/audio_device.h",
        "include/audio_device_defines.h",
    ],
    visibility = ["//visibility:public"],
    deps = ["//api/audio:audio_device"],
)

cc_library(
    name = "audio_device_config",
    hdrs = ["audio_device_config.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "audio_device_buffer",
    srcs = [
        "audio_device_buffer.cc",
        "fine_audio_buffer.cc",
    ],
    hdrs = [
        "audio_device_buffer.h",
        "fine_audio_buffer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:sequence_checker",
        "//api/audio:audio_device",
        "//api/task_queue",
        "//common_audio:common_audio_c",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:safe_conversions",
        "//rtc_base:timestamp_aligner",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "audio_device_generic",
    srcs = ["audio_device_generic.cc"],
    hdrs = ["audio_device_generic.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wno-deprecated-declarations",
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/audio:audio_device",
        "//modules/audio_device:audio_device_buffer",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "audio_device_name",
    srcs = ["audio_device_name.cc"],
    hdrs = ["audio_device_name.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/strings"],
)

cc_library(
    name = "windows_core_audio_utility",
    srcs = platform_select(
        arm64 = [],
        linux = [],
        windows = ["win/core_audio_utility_win.cc"],
    ),
    hdrs = platform_select(
        arm64 = [],
        linux = [],
        windows = ["win/core_audio_utility_win.h"],
    ),
    copts = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "-Wctad-maybe-unsupported",
            "-fno-rtti",
        ],
    ),
    defines = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "RTC_ENABLE_VP9",
            "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
            "WEBRTC_ABSL_MUTEX",
            "WEBRTC_ENABLE_AVX2",
            "WEBRTC_ENABLE_PROTOBUF=1",
            "WEBRTC_HAVE_SCTP",
            "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
            "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
            "WEBRTC_STRICT_FIELD_TRIALS=0",
            "WEBRTC_WIN",
        ],
    ),
    features = platform_select(
        arm64 = [],
        linux = [],
        windows = ["gdi"],
    ),
    linkopts = platform_select(
        arm64 = [],
        linux = [],
        windows = ["oleaut32.lib"],
    ),
    visibility = ["//:__subpackages__"],
    deps = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "@com_google_absl//absl/strings",
            "//api/audio:audio_device",
            "//api/units:time_delta",
            "//modules/audio_device:audio_device_name",
            "//rtc_base:checks",
            "//rtc_base:logging",
            "//rtc_base:macromagic",
            "//rtc_base:platform_thread_types",
            "//rtc_base:stringutils",
            "//rtc_base/win:windows_version",
        ],
    ),
)

cc_library(
    name = "audio_device_module_from_input_and_output",
    srcs = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "include/audio_device_factory.cc",
            "win/audio_device_module_win.cc",
            "win/core_audio_base_win.cc",
            "win/core_audio_input_win.cc",
            "win/core_audio_output_win.cc",
        ],
    ),
    hdrs = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "include/audio_device_factory.h",
            "win/audio_device_module_win.h",
            "win/core_audio_base_win.h",
            "win/core_audio_input_win.h",
            "win/core_audio_output_win.h",
        ],
    ),
    copts = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "-Wctad-maybe-unsupported",
            "-fno-rtti",
        ],
    ),
    defines = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "RTC_ENABLE_VP9",
            "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
            "WEBRTC_ABSL_MUTEX",
            "WEBRTC_ENABLE_AVX2",
            "WEBRTC_ENABLE_PROTOBUF=1",
            "WEBRTC_HAVE_SCTP",
            "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
            "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
            "WEBRTC_STRICT_FIELD_TRIALS=0",
            "WEBRTC_WIN",
        ],
    ),
    features = platform_select(
        arm64 = [],
        linux = [],
        windows = ["gdi"],
    ),
    visibility = ["//visibility:public"],
    deps = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "@com_google_absl//absl/strings",
            "@com_google_absl//absl/types:optional",
            "//api:make_ref_counted",
            "//api:scoped_refptr",
            "//api:sequence_checker",
            "//api/audio:audio_device",
            "//api/task_queue",
            "//modules/audio_device:audio_device_buffer",
            "//modules/audio_device:windows_core_audio_utility",
            "//rtc_base:checks",
            "//rtc_base:logging",
            "//rtc_base:macromagic",
            "//rtc_base:platform_thread",
            "//rtc_base:safe_conversions",
            "//rtc_base:stringutils",
            "//rtc_base:timeutils",
            "//rtc_base/win:scoped_com_initializer",
            "//rtc_base/win:windows_version",
        ],
    ),
)

cc_library(
    name = "test_audio_device_module",
    srcs = [
        "include/test_audio_device.cc",
        "test_audio_device_impl.cc",
    ],
    hdrs = [
        "include/test_audio_device.h",
        "test_audio_device_impl.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/audio:audio_device",
        "//api/task_queue",
        "//api/units:time_delta",
        "//common_audio",
        "//modules/audio_device:audio_device_buffer",
        "//modules/audio_device:audio_device_default",
        "//modules/audio_device:audio_device_generic",
        "//modules/audio_device:audio_device_impl",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:random",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
    ],
)

cc_library(
    name = "audio_device_dummy",
    srcs = ["dummy/audio_device_dummy.cc"],
    hdrs = ["dummy/audio_device_dummy.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/audio:audio_device",
        "//modules/audio_device:audio_device_buffer",
        "//modules/audio_device:audio_device_generic",
    ],
)

cc_library(
    name = "file_audio_device",
    srcs = [
        "dummy/file_audio_device.cc",
        "dummy/file_audio_device_factory.cc",
    ],
    hdrs = [
        "dummy/file_audio_device.h",
        "dummy/file_audio_device_factory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_DUMMY_FILE_DEVICES",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//modules/audio_device:audio_device_generic",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:platform_thread",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:file_wrapper",
        "//system_wrappers",
    ],
)

cc_library(
    name = "audio_device_impl",
    srcs = [
        "audio_device_data_observer.cc",
        "audio_device_impl.cc",
    ] + platform_select(
        arm64 = [
            "mac/audio_device_mac.cc",
            "mac/audio_mixer_manager_mac.cc",
        ],
        linux = [],
        windows = ["win/audio_device_core_win.cc"],
    ),
    hdrs = [
        "audio_device_impl.h",
        "dummy/file_audio_device_factory.h",
        "include/audio_device_data_observer.h",
        "include/fake_audio_device.h",
    ] + platform_select(
        arm64 = [
            "mac/audio_device_mac.h",
            "mac/audio_mixer_manager_mac.h",
        ],
        linux = [],
        windows = ["win/audio_device_core_win.h"],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wno-vla",
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = [
            "-Wno-microsoft-goto",
            "-fno-rtti",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_DUMMY_FILE_DEVICES",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    features = platform_select(
        arm64 = [],
        linux = [],
        windows = ["gdi"],
    ),
    linkopts = platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "amstrmid.lib",
            "dmoguids.lib",
            "msdmo.lib",
            "oleaut32.lib",
            "wmcodecdspuuid.lib",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:refcountedbase",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/audio:audio_device",
        "//api/task_queue",
        "//api/units:time_delta",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//modules/audio_device:audio_device_buffer",
        "//modules/audio_device:audio_device_config",
        "//modules/audio_device:audio_device_default",
        "//modules/audio_device:audio_device_dummy",
        "//modules/audio_device:audio_device_generic",
        "//modules/audio_device:file_audio_device",
        "//modules/utility",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:random",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:arch",
        "//rtc_base/system:file_wrapper",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ] + platform_select(
        arm64 = [
            "//modules/audio_device:audio_device_impl_frameworks",
            "//modules/third_party/portaudio:mac_portaudio",
        ],
        linux = [],
        windows = [
            "//rtc_base:win32",
            "//rtc_base/win:scoped_com_initializer",
        ],
    ),
)

cc_library(
    name = "audio_device_impl_frameworks",
    visibility = ["//modules/audio_device:__pkg__"],
    deps = [
        "@apple_frameworks//:ApplicationServices",
        "@apple_frameworks//:AudioToolbox",
        "@apple_frameworks//:CoreAudio",
        "@apple_frameworks//:CoreGraphics",
    ],
)

cc_library(
    name = "mock_audio_device",
    testonly = 1,
    hdrs = [
        "include/mock_audio_device.h",
        "include/mock_audio_transport.h",
        "mock_audio_device_buffer.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:make_ref_counted",
        "//api/audio:audio_device",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_buffer",
        "//modules/audio_device:audio_device_impl",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_device_unittests",
    testonly = 1,
    srcs = [
        "audio_device_unittest.cc",
        "fine_audio_buffer_unittest.cc",
        "include/test_audio_device_unittest.cc",
        "test_audio_device_impl_test.cc",
    ] + platform_select(
        arm64 = [],
        linux = [],
        windows = ["win/core_audio_utility_win_unittest.cc"],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/audio:audio_device",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//common_audio",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_buffer",
        "//modules/audio_device:audio_device_generic",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_device:mock_audio_device",
        "//modules/audio_device:test_audio_device_module",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_support",
        "//test/time_controller",
    ] + platform_select(
        arm64 = [],
        linux = [],
        windows = [
            "//modules/audio_device:audio_device_module_from_input_and_output",
            "//modules/audio_device:windows_core_audio_utility",
            "//rtc_base/win:scoped_com_initializer",
            "//rtc_base/win:windows_version",
        ],
    ),
)
