# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select", "webrtc_proto_library")

cc_library(
    name = "audio_coding_module_typedefs",
    hdrs = ["include/audio_coding_module_typedefs.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "audio_coding",
    srcs = [
        "acm2/acm_receiver.cc",
        "acm2/acm_remixing.cc",
        "acm2/acm_resampler.cc",
        "acm2/audio_coding_module.cc",
        "acm2/call_statistics.cc",
    ],
    hdrs = [
        "acm2/acm_receiver.h",
        "acm2/acm_remixing.h",
        "acm2/acm_resampler.h",
        "acm2/call_statistics.h",
        "include/audio_coding_module.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:function_view",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/neteq:neteq_api",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//modules:module_api",
        "//modules:module_api_public",
        "//modules/audio_coding:audio_coding_module_typedefs",
        "//modules/audio_coding:default_neteq_factory",
        "//modules/audio_coding:neteq",
        "//rtc_base:audio_format_to_string",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:safe_conversions",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "legacy_encoded_audio_frame",
    srcs = ["codecs/legacy_encoded_audio_frame.cc"],
    hdrs = ["codecs/legacy_encoded_audio_frame.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//modules/audio_coding:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//rtc_base:buffer",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "webrtc_cng",
    srcs = ["codecs/cng/webrtc_cng.cc"],
    hdrs = ["codecs/cng/webrtc_cng.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//common_audio:common_audio_c",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:safe_conversions",
    ],
)

cc_library(
    name = "audio_encoder_cng",
    srcs = ["codecs/cng/audio_encoder_cng.cc"],
    hdrs = ["codecs/cng/audio_encoder_cng.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api/audio_codecs:audio_codecs_api",
        "//api/units:time_delta",
        "//common_audio",
        "//modules/audio_coding:webrtc_cng",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "red",
    srcs = ["codecs/red/audio_encoder_copy_red.cc"],
    hdrs = ["codecs/red/audio_encoder_copy_red.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:field_trials_view",
        "//api/audio_codecs:audio_codecs_api",
        "//api/units:time_delta",
        "//common_audio",
        "//rtc_base:buffer",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "g711",
    srcs = [
        "codecs/g711/audio_decoder_pcm.cc",
        "codecs/g711/audio_encoder_pcm.cc",
    ],
    hdrs = [
        "codecs/g711/audio_decoder_pcm.h",
        "codecs/g711/audio_encoder_pcm.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//api/units:time_delta",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:legacy_encoded_audio_frame",
        "//rtc_base:buffer",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "g711_c",
    srcs = ["codecs/g711/g711_interface.c"],
    hdrs = ["codecs/g711/g711_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//modules/third_party/g711:g711_3p"],
)

cc_library(
    name = "g722",
    srcs = [
        "codecs/g722/audio_decoder_g722.cc",
        "codecs/g722/audio_encoder_g722.cc",
    ],
    hdrs = [
        "codecs/g722/audio_decoder_g722.h",
        "codecs/g722/audio_encoder_g722.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs/g722:audio_encoder_g722_config",
        "//api/units:time_delta",
        "//modules/audio_coding:g722_c",
        "//modules/audio_coding:legacy_encoded_audio_frame",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:safe_conversions",
    ],
)

cc_library(
    name = "g722_c",
    srcs = ["codecs/g722/g722_interface.c"],
    hdrs = ["codecs/g722/g722_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//modules/third_party/g722:g722_3p"],
)

cc_library(
    name = "ilbc",
    srcs = [
        "codecs/ilbc/audio_decoder_ilbc.cc",
        "codecs/ilbc/audio_encoder_ilbc.cc",
    ],
    hdrs = [
        "codecs/ilbc/audio_decoder_ilbc.h",
        "codecs/ilbc/audio_encoder_ilbc.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs/ilbc:audio_encoder_ilbc_config",
        "//api/units:time_delta",
        "//common_audio",
        "//modules/audio_coding:ilbc_c",
        "//modules/audio_coding:legacy_encoded_audio_frame",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:safe_conversions",
    ],
)

cc_library(
    name = "ilbc_c",
    srcs = [
        "codecs/ilbc/abs_quant.c",
        "codecs/ilbc/abs_quant_loop.c",
        "codecs/ilbc/augmented_cb_corr.c",
        "codecs/ilbc/bw_expand.c",
        "codecs/ilbc/cb_construct.c",
        "codecs/ilbc/cb_mem_energy.c",
        "codecs/ilbc/cb_mem_energy_augmentation.c",
        "codecs/ilbc/cb_mem_energy_calc.c",
        "codecs/ilbc/cb_search.c",
        "codecs/ilbc/cb_search_core.c",
        "codecs/ilbc/cb_update_best_index.c",
        "codecs/ilbc/chebyshev.c",
        "codecs/ilbc/comp_corr.c",
        "codecs/ilbc/constants.c",
        "codecs/ilbc/create_augmented_vec.c",
        "codecs/ilbc/decode.c",
        "codecs/ilbc/decode_residual.c",
        "codecs/ilbc/decoder_interpolate_lsf.c",
        "codecs/ilbc/do_plc.c",
        "codecs/ilbc/encode.c",
        "codecs/ilbc/energy_inverse.c",
        "codecs/ilbc/enh_upsample.c",
        "codecs/ilbc/enhancer.c",
        "codecs/ilbc/enhancer_interface.c",
        "codecs/ilbc/filtered_cb_vecs.c",
        "codecs/ilbc/frame_classify.c",
        "codecs/ilbc/gain_dequant.c",
        "codecs/ilbc/gain_quant.c",
        "codecs/ilbc/get_cd_vec.c",
        "codecs/ilbc/get_lsp_poly.c",
        "codecs/ilbc/get_sync_seq.c",
        "codecs/ilbc/hp_input.c",
        "codecs/ilbc/hp_output.c",
        "codecs/ilbc/ilbc.c",
        "codecs/ilbc/index_conv_dec.c",
        "codecs/ilbc/index_conv_enc.c",
        "codecs/ilbc/init_decode.c",
        "codecs/ilbc/init_encode.c",
        "codecs/ilbc/interpolate.c",
        "codecs/ilbc/interpolate_samples.c",
        "codecs/ilbc/lpc_encode.c",
        "codecs/ilbc/lsf_check.c",
        "codecs/ilbc/lsf_interpolate_to_poly_dec.c",
        "codecs/ilbc/lsf_interpolate_to_poly_enc.c",
        "codecs/ilbc/lsf_to_lsp.c",
        "codecs/ilbc/lsf_to_poly.c",
        "codecs/ilbc/lsp_to_lsf.c",
        "codecs/ilbc/my_corr.c",
        "codecs/ilbc/nearest_neighbor.c",
        "codecs/ilbc/pack_bits.c",
        "codecs/ilbc/poly_to_lsf.c",
        "codecs/ilbc/poly_to_lsp.c",
        "codecs/ilbc/refiner.c",
        "codecs/ilbc/simple_interpolate_lsf.c",
        "codecs/ilbc/simple_lpc_analysis.c",
        "codecs/ilbc/simple_lsf_dequant.c",
        "codecs/ilbc/simple_lsf_quant.c",
        "codecs/ilbc/smooth.c",
        "codecs/ilbc/smooth_out_data.c",
        "codecs/ilbc/sort_sq.c",
        "codecs/ilbc/split_vq.c",
        "codecs/ilbc/state_construct.c",
        "codecs/ilbc/state_search.c",
        "codecs/ilbc/swap_bytes.c",
        "codecs/ilbc/unpack_bits.c",
        "codecs/ilbc/vq3.c",
        "codecs/ilbc/vq4.c",
        "codecs/ilbc/window32_w32.c",
        "codecs/ilbc/xcorr_coef.c",
    ],
    hdrs = [
        "codecs/ilbc/abs_quant.h",
        "codecs/ilbc/abs_quant_loop.h",
        "codecs/ilbc/augmented_cb_corr.h",
        "codecs/ilbc/bw_expand.h",
        "codecs/ilbc/cb_construct.h",
        "codecs/ilbc/cb_mem_energy.h",
        "codecs/ilbc/cb_mem_energy_augmentation.h",
        "codecs/ilbc/cb_mem_energy_calc.h",
        "codecs/ilbc/cb_search.h",
        "codecs/ilbc/cb_search_core.h",
        "codecs/ilbc/cb_update_best_index.h",
        "codecs/ilbc/chebyshev.h",
        "codecs/ilbc/comp_corr.h",
        "codecs/ilbc/constants.h",
        "codecs/ilbc/create_augmented_vec.h",
        "codecs/ilbc/decode.h",
        "codecs/ilbc/decode_residual.h",
        "codecs/ilbc/decoder_interpolate_lsf.h",
        "codecs/ilbc/defines.h",
        "codecs/ilbc/do_plc.h",
        "codecs/ilbc/encode.h",
        "codecs/ilbc/energy_inverse.h",
        "codecs/ilbc/enh_upsample.h",
        "codecs/ilbc/enhancer.h",
        "codecs/ilbc/enhancer_interface.h",
        "codecs/ilbc/filtered_cb_vecs.h",
        "codecs/ilbc/frame_classify.h",
        "codecs/ilbc/gain_dequant.h",
        "codecs/ilbc/gain_quant.h",
        "codecs/ilbc/get_cd_vec.h",
        "codecs/ilbc/get_lsp_poly.h",
        "codecs/ilbc/get_sync_seq.h",
        "codecs/ilbc/hp_input.h",
        "codecs/ilbc/hp_output.h",
        "codecs/ilbc/ilbc.h",
        "codecs/ilbc/index_conv_dec.h",
        "codecs/ilbc/index_conv_enc.h",
        "codecs/ilbc/init_decode.h",
        "codecs/ilbc/init_encode.h",
        "codecs/ilbc/interpolate.h",
        "codecs/ilbc/interpolate_samples.h",
        "codecs/ilbc/lpc_encode.h",
        "codecs/ilbc/lsf_check.h",
        "codecs/ilbc/lsf_interpolate_to_poly_dec.h",
        "codecs/ilbc/lsf_interpolate_to_poly_enc.h",
        "codecs/ilbc/lsf_to_lsp.h",
        "codecs/ilbc/lsf_to_poly.h",
        "codecs/ilbc/lsp_to_lsf.h",
        "codecs/ilbc/my_corr.h",
        "codecs/ilbc/nearest_neighbor.h",
        "codecs/ilbc/pack_bits.h",
        "codecs/ilbc/poly_to_lsf.h",
        "codecs/ilbc/poly_to_lsp.h",
        "codecs/ilbc/refiner.h",
        "codecs/ilbc/simple_interpolate_lsf.h",
        "codecs/ilbc/simple_lpc_analysis.h",
        "codecs/ilbc/simple_lsf_dequant.h",
        "codecs/ilbc/simple_lsf_quant.h",
        "codecs/ilbc/smooth.h",
        "codecs/ilbc/smooth_out_data.h",
        "codecs/ilbc/sort_sq.h",
        "codecs/ilbc/split_vq.h",
        "codecs/ilbc/state_construct.h",
        "codecs/ilbc/state_search.h",
        "codecs/ilbc/swap_bytes.h",
        "codecs/ilbc/unpack_bits.h",
        "codecs/ilbc/vq3.h",
        "codecs/ilbc/vq4.h",
        "codecs/ilbc/window32_w32.h",
        "codecs/ilbc/xcorr_coef.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "//api/audio_codecs:audio_codecs_api",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//rtc_base:checks",
        "//rtc_base:sanitizer",
        "//rtc_base/system:arch",
    ],
)

cc_library(
    name = "isac_vad",
    srcs = [
        "codecs/isac/main/source/filter_functions.c",
        "codecs/isac/main/source/isac_vad.c",
        "codecs/isac/main/source/pitch_estimator.c",
        "codecs/isac/main/source/pitch_filter.c",
    ],
    hdrs = [
        "codecs/isac/main/source/filter_functions.h",
        "codecs/isac/main/source/isac_vad.h",
        "codecs/isac/main/source/os_specific_inline.h",
        "codecs/isac/main/source/pitch_estimator.h",
        "codecs/isac/main/source/pitch_filter.h",
        "codecs/isac/main/source/settings.h",
        "codecs/isac/main/source/structs.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//modules/audio_coding:__pkg__",
        "//modules/audio_processing/vad:__pkg__",
    ],
    deps = [
        "//modules/third_party/fft",
        "//modules/audio_coding:isac_bwinfo",
        "//rtc_base:compile_assert_c",
        "//rtc_base/system:arch",
        "//rtc_base/system:ignore_warnings",
    ],
)

cc_library(
    name = "isac_bwinfo",
    hdrs = ["codecs/isac/bandwidth_info.h"],
    visibility = ["//modules/audio_coding:__pkg__"],
)

cc_library(
    name = "pcm16b",
    srcs = [
        "codecs/pcm16b/audio_decoder_pcm16b.cc",
        "codecs/pcm16b/audio_encoder_pcm16b.cc",
        "codecs/pcm16b/pcm16b_common.cc",
    ],
    hdrs = [
        "codecs/pcm16b/audio_decoder_pcm16b.h",
        "codecs/pcm16b/audio_encoder_pcm16b.h",
        "codecs/pcm16b/pcm16b_common.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:legacy_encoded_audio_frame",
        "//modules/audio_coding:pcm16b_c",
        "//rtc_base:buffer",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "pcm16b_c",
    srcs = ["codecs/pcm16b/pcm16b.c"],
    hdrs = ["codecs/pcm16b/pcm16b.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "audio_coding_opus_common",
    srcs = ["codecs/opus/audio_coder_opus_common.cc"],
    hdrs = ["codecs/opus/audio_coder_opus_common.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//modules/audio_coding:__pkg__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "webrtc_opus",
    srcs = [
        "codecs/opus/audio_decoder_opus.cc",
        "codecs/opus/audio_encoder_opus.cc",
    ],
    hdrs = [
        "codecs/opus/audio_decoder_opus.h",
        "codecs/opus/audio_encoder_opus.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        #"//api/audio_codecs/opus:audio_encoder_opus_config",
        "//common_audio",
        # "//modules/audio_coding:audio_coding_opus_common",
        "//modules/audio_coding:audio_network_adaptor",
        "//modules/audio_coding:audio_network_adaptor_config",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:protobuf_utils",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:safe_minmax",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//system_wrappers:field_trial",
    ],
)

cc_library(
    name = "webrtc_multiopus",
    srcs = [
        "codecs/opus/audio_decoder_multi_channel_opus_impl.cc",
        "codecs/opus/audio_encoder_multi_channel_opus_impl.cc",
    ],
    hdrs = [
        "codecs/opus/audio_decoder_multi_channel_opus_impl.h",
        "codecs/opus/audio_encoder_multi_channel_opus_impl.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api/audio_codecs:audio_codecs_api",
        #"//api/audio_codecs/opus:audio_decoder_opus_config",
        #"//api/audio_codecs/opus:audio_encoder_opus_config",
        "//api/units:time_delta",
        # "//modules/audio_coding:audio_coding_opus_common",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:safe_minmax",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "webrtc_opus_wrapper",
    srcs = ["codecs/opus/opus_interface.cc"],
    hdrs = [
        "codecs/opus/opus_inst.h",
        "codecs/opus/opus_interface.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//rtc_base:checks",
        "//rtc_base:ignore_wundef",
        "//system_wrappers:field_trial",
    ],
)

webrtc_proto_library(
    name = "ana_debug_dump_proto",
    srcs = ["audio_network_adaptor/debug_dump.proto"],
    visibility = ["//:__subpackages__"],
    deps = ["//modules/audio_coding:ana_config_proto_lib"],
)

webrtc_proto_library(
    name = "ana_config_proto",
    srcs = ["audio_network_adaptor/config.proto"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "audio_network_adaptor_config",
    srcs = ["audio_network_adaptor/audio_network_adaptor_config.cc"],
    hdrs = ["audio_network_adaptor/include/audio_network_adaptor_config.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/types:optional"],
)

cc_library(
    name = "audio_network_adaptor",
    srcs = [
        "audio_network_adaptor/audio_network_adaptor_impl.cc",
        "audio_network_adaptor/bitrate_controller.cc",
        "audio_network_adaptor/channel_controller.cc",
        "audio_network_adaptor/controller.cc",
        "audio_network_adaptor/controller_manager.cc",
        "audio_network_adaptor/debug_dump_writer.cc",
        "audio_network_adaptor/dtx_controller.cc",
        "audio_network_adaptor/event_log_writer.cc",
        "audio_network_adaptor/fec_controller_plr_based.cc",
        "audio_network_adaptor/frame_length_controller.cc",
        "audio_network_adaptor/frame_length_controller_v2.cc",
    ],
    hdrs = [
        "audio_network_adaptor/audio_network_adaptor_impl.h",
        "audio_network_adaptor/bitrate_controller.h",
        "audio_network_adaptor/channel_controller.h",
        "audio_network_adaptor/controller.h",
        "audio_network_adaptor/controller_manager.h",
        "audio_network_adaptor/debug_dump_writer.h",
        "audio_network_adaptor/dtx_controller.h",
        "audio_network_adaptor/event_log_writer.h",
        "audio_network_adaptor/fec_controller_plr_based.h",
        "audio_network_adaptor/frame_length_controller.h",
        "audio_network_adaptor/frame_length_controller_v2.h",
        "audio_network_adaptor/include/audio_network_adaptor.h",
        "audio_network_adaptor/util/threshold_curve.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "GOOGLE_PROTOBUF_NO_RTTI",
        "GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api/audio_codecs:audio_codecs_api",
        "//api/rtc_event_log",
        "//common_audio",
        "//logging:rtc_event_audio",
        "//modules/audio_coding:ana_config_proto",
        "//modules/audio_coding:ana_debug_dump_proto",
        "//modules/audio_coding:audio_network_adaptor_config",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:protobuf_utils",
        "//rtc_base:safe_conversions",
        "//rtc_base:timeutils",
        "//rtc_base/system:file_wrapper",
        "//system_wrappers",
        "//system_wrappers:field_trial",
    ],
)

cc_library(
    name = "neteq",
    srcs = [
        "neteq/accelerate.cc",
        "neteq/audio_multi_vector.cc",
        "neteq/audio_vector.cc",
        "neteq/background_noise.cc",
        "neteq/buffer_level_filter.cc",
        "neteq/comfort_noise.cc",
        "neteq/cross_correlation.cc",
        "neteq/decision_logic.cc",
        "neteq/decoder_database.cc",
        "neteq/delay_manager.cc",
        "neteq/dsp_helper.cc",
        "neteq/dtmf_buffer.cc",
        "neteq/dtmf_tone_generator.cc",
        "neteq/expand.cc",
        "neteq/expand_uma_logger.cc",
        "neteq/histogram.cc",
        "neteq/merge.cc",
        "neteq/nack_tracker.cc",
        "neteq/neteq_impl.cc",
        "neteq/normal.cc",
        "neteq/packet.cc",
        "neteq/packet_arrival_history.cc",
        "neteq/packet_buffer.cc",
        "neteq/preemptive_expand.cc",
        "neteq/random_vector.cc",
        "neteq/red_payload_splitter.cc",
        "neteq/reorder_optimizer.cc",
        "neteq/statistics_calculator.cc",
        "neteq/sync_buffer.cc",
        "neteq/time_stretch.cc",
        "neteq/timestamp_scaler.cc",
        "neteq/underrun_optimizer.cc",
    ],
    hdrs = [
        "neteq/accelerate.h",
        "neteq/audio_multi_vector.h",
        "neteq/audio_vector.h",
        "neteq/background_noise.h",
        "neteq/buffer_level_filter.h",
        "neteq/comfort_noise.h",
        "neteq/cross_correlation.h",
        "neteq/decision_logic.h",
        "neteq/decoder_database.h",
        "neteq/delay_manager.h",
        "neteq/dsp_helper.h",
        "neteq/dtmf_buffer.h",
        "neteq/dtmf_tone_generator.h",
        "neteq/expand.h",
        "neteq/expand_uma_logger.h",
        "neteq/histogram.h",
        "neteq/merge.h",
        "neteq/nack_tracker.h",
        "neteq/neteq_impl.h",
        "neteq/normal.h",
        "neteq/packet.h",
        "neteq/packet_arrival_history.h",
        "neteq/packet_buffer.h",
        "neteq/preemptive_expand.h",
        "neteq/random_vector.h",
        "neteq/red_payload_splitter.h",
        "neteq/reorder_optimizer.h",
        "neteq/statistics_calculator.h",
        "neteq/sync_buffer.h",
        "neteq/time_stretch.h",
        "neteq/timestamp_scaler.h",
        "neteq/underrun_optimizer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:rtp_headers",
        "//api:rtp_packet_info",
        "//api:scoped_refptr",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/neteq:neteq_api",
        "//api/neteq:neteq_controller_api",
        "//api/neteq:tick_timer",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//modules:module_api_public",
        "//modules/audio_coding:audio_coding_module_typedefs",
        "//modules/audio_coding:webrtc_cng",
        "//rtc_base:audio_format_to_string",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:gtest_prod",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:safe_minmax",
        "//rtc_base:sanitizer",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "default_neteq_factory",
    srcs = ["neteq/default_neteq_factory.cc"],
    hdrs = ["neteq/default_neteq_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:scoped_refptr",
        "//api/audio_codecs:audio_codecs_api",
        "//api/neteq:default_neteq_controller_factory",
        "//api/neteq:neteq_api",
        "//modules/audio_coding:neteq",
        "//system_wrappers",
    ],
)

cc_library(
    name = "neteq_tools_minimal",
    srcs = [
        "neteq/tools/audio_sink.cc",
        "neteq/tools/encode_neteq_input.cc",
        "neteq/tools/neteq_input.cc",
        "neteq/tools/neteq_test.cc",
        "neteq/tools/packet.cc",
        "neteq/tools/packet_source.cc",
    ],
    hdrs = [
        "neteq/tools/audio_sink.h",
        "neteq/tools/encode_neteq_input.h",
        "neteq/tools/neteq_input.h",
        "neteq/tools/neteq_test.h",
        "neteq/tools/packet.h",
        "neteq/tools/packet_source.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:neteq_simulator_api",
        "//api:rtp_headers",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/neteq:custom_neteq_factory",
        "//api/neteq:default_neteq_controller_factory",
        "//api/neteq:neteq_api",
        "//modules/audio_coding:default_neteq_factory",
        "//modules/audio_coding:neteq",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//system_wrappers",
    ],
)

cc_library(
    name = "neteq_test_tools",
    testonly = 1,
    srcs = [
        "neteq/tools/audio_loop.cc",
        "neteq/tools/constant_pcm_packet_source.cc",
        "neteq/tools/initial_packet_inserter_neteq_input.cc",
        "neteq/tools/neteq_rtp_dump_input.cc",
        "neteq/tools/rtp_file_source.cc",
        "neteq/tools/rtp_generator.cc",
    ],
    hdrs = [
        "neteq/tools/audio_checksum.h",
        "neteq/tools/audio_loop.h",
        "neteq/tools/constant_pcm_packet_source.h",
        "neteq/tools/initial_packet_inserter_neteq_input.h",
        "neteq/tools/neteq_rtp_dump_input.h",
        "neteq/tools/output_audio_file.h",
        "neteq/tools/output_wav_file.h",
        "neteq/tools/rtp_file_source.h",
        "neteq/tools/rtp_generator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:rtp_headers",
        "//common_audio",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:digest",
        "//rtc_base:stringutils",
        "//rtc_base/system:arch",
        "//test:rtp_test_utils",
    ],
)

cc_library(
    name = "neteq_tools",
    srcs = [
        "neteq/tools/fake_decode_from_file.cc",
        "neteq/tools/neteq_delay_analyzer.cc",
        "neteq/tools/neteq_event_log_input.cc",
        "neteq/tools/neteq_replacement_input.cc",
        "neteq/tools/neteq_stats_getter.cc",
        "neteq/tools/neteq_stats_plotter.cc",
    ],
    hdrs = [
        "neteq/tools/fake_decode_from_file.h",
        "neteq/tools/neteq_delay_analyzer.h",
        "neteq/tools/neteq_event_log_input.h",
        "neteq/tools/neteq_replacement_input.h",
        "neteq/tools/neteq_stats_getter.h",
        "neteq/tools/neteq_stats_plotter.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/audio_codecs:audio_codecs_api",
        "//logging:rtc_event_log_parser",
        "//logging:rtc_event_log_proto",
        "//modules:module_api_public",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
    ],
)

cc_library(
    name = "neteq_input_audio_tools",
    srcs = [
        "neteq/tools/input_audio_file.cc",
        "neteq/tools/resample_input_audio_file.cc",
    ],
    hdrs = [
        "neteq/tools/input_audio_file.h",
        "neteq/tools/resample_input_audio_file.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//common_audio",
        "//rtc_base:checks",
    ],
)

webrtc_proto_library(
    name = "neteq_unittest_proto",
    srcs = ["neteq/neteq_unittest.proto"],
    visibility = ["//modules/audio_coding:__pkg__"],
)

cc_library(
    name = "audio_coding_modules_tests_shared",
    testonly = 1,
    srcs = [
        "neteq/test/neteq_decoding_test.cc",
        "neteq/test/result_sink.cc",
        "test/PCMFile.cc",
        "test/TestStereo.cc",
        "test/opus_test.cc",
    ],
    hdrs = [
        "neteq/test/neteq_decoding_test.h",
        "neteq/test/result_sink.h",
        "test/PCMFile.h",
        "test/TestStereo.h",
        "test/opus_test.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NETEQ_UNITTEST_BITEXACT",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:rtp_headers",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/neteq:neteq_api",
        "//modules:module_api",
        "//modules/audio_coding",
        "//modules/audio_coding:audio_coding_module_typedefs",
        "//modules/audio_coding:default_neteq_factory",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/audio_coding:neteq_unittest_proto",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:checks",
        "//rtc_base:digest",
        "//rtc_base:stringutils",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_library(
    name = "mocks",
    testonly = 1,
    hdrs = [
        "audio_network_adaptor/mock/mock_audio_network_adaptor.h",
        "audio_network_adaptor/mock/mock_controller.h",
        "audio_network_adaptor/mock/mock_controller_manager.h",
        "audio_network_adaptor/mock/mock_debug_dump_writer.h",
    ],
    visibility = ["//modules/audio_coding:__pkg__"],
    deps = [
        "//modules/audio_coding:audio_network_adaptor",
        "//modules/audio_coding:audio_network_adaptor_config",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_coding_tests",
    testonly = 1,
    data = [
        "//resources:audio_coding/music_stereo_48kHz.pcm",
        "//resources:audio_coding/speech_mono_16kHz.pcm",
        "//resources:audio_coding/speech_mono_32_48kHz.pcm",
        "//resources:audio_coding/testfile32kHz.pcm",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_coding:acm_receive_test",
        "//modules/audio_coding:acm_send_test",
        "//modules/audio_coding:audio_codec_speed_tests",
        "//modules/audio_coding:audio_decoder_unittests",
        "//modules/audio_coding:g711_test",
        "//modules/audio_coding:g722_test",
        "//modules/audio_coding:ilbc_test",
        "//modules/audio_coding:neteq_ilbc_quality_test",
        "//modules/audio_coding:neteq_opus_quality_test",
        "//modules/audio_coding:neteq_pcm16b_quality_test",
        "//modules/audio_coding:neteq_pcmu_quality_test",
        "//modules/audio_coding:neteq_rtpplay",
        "//modules/audio_coding:neteq_speed_test",
        "//modules/audio_coding:rtp_analyze",
        "//modules/audio_coding:rtp_encode",
        "//modules/audio_coding:rtp_jitter",
        "//modules/audio_coding:rtpcat",
        "//modules/audio_coding:webrtc_opus_fec_test",
    ],
)

cc_library(
    name = "audio_coding_modules_tests",
    testonly = 1,
    srcs = [
        "test/Channel.cc",
        "test/EncodeDecodeTest.cc",
        "test/PacketLossTest.cc",
        "test/RTPFile.cc",
        "test/TestAllCodecs.cc",
        "test/TestRedFec.cc",
        "test/TestVADDTX.cc",
        "test/Tester.cc",
        "test/target_delay_unittest.cc",
    ],
    hdrs = [
        "test/Channel.h",
        "test/EncodeDecodeTest.h",
        "test/PacketLossTest.h",
        "test/RTPFile.h",
        "test/TestAllCodecs.h",
        "test/TestRedFec.h",
        "test/TestVADDTX.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:rtp_headers",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/audio_codecs/L16:audio_decoder_L16",
        "//api/audio_codecs/L16:audio_encoder_L16",
        "//api/audio_codecs/g711:audio_decoder_g711",
        "//api/audio_codecs/g711:audio_encoder_g711",
        "//api/audio_codecs/g722:audio_decoder_g722",
        "//api/audio_codecs/g722:audio_encoder_g722",
        "//api/audio_codecs/ilbc:audio_decoder_ilbc",
        "//api/audio_codecs/ilbc:audio_encoder_ilbc",
        #"//api/audio_codecs/opus:audio_decoder_opus",
        #"//api/audio_codecs/opus:audio_encoder_opus",
        "//common_audio",
        "//modules:module_api",
        "//modules/audio_coding",
        "//modules/audio_coding:audio_coding_module_typedefs",
        "//modules/audio_coding:audio_coding_modules_tests_shared",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//test:fileutils",
        "//test:scoped_key_value_config",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_coding_perf_tests",
    testonly = 1,
    srcs = [
        "codecs/opus/opus_complexity_unittest.cc",
        "neteq/test/neteq_performance_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        #"//api/audio_codecs/opus:audio_encoder_opus",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metric",
        "//modules/audio_coding:neteq_test_support",
        "//modules/audio_coding:neteq_test_tools",
        "//rtc_base:macromagic",
        "//rtc_base:timeutils",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_flags",
        "//test:test_support",
    ],
)

cc_library(
    name = "acm_receive_test",
    testonly = 1,
    srcs = ["acm2/acm_receive_test.cc"],
    hdrs = ["acm2/acm_receive_test.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "//api:scoped_refptr",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//common_audio",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:g722",
        "//modules/audio_coding:g722_c",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//system_wrappers",
        "//test:test_support",
    ],
)

cc_library(
    name = "acm_send_test",
    testonly = 1,
    srcs = ["acm2/acm_send_test.cc"],
    hdrs = ["acm2/acm_send_test.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//common_audio",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:g722",
        "//modules/audio_coding:g722_c",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
        "//system_wrappers",
        "//test:test_support",
    ],
)

cc_test(
    name = "audio_decoder_unittests",
    testonly = 1,
    srcs = ["neteq/audio_decoder_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = ["//resources:audio_coding/testfile32kHz.pcm"],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//api/audio_codecs:audio_codecs_api",
        #"//api/audio_codecs/opus:audio_encoder_opus",
        "//common_audio",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:g722",
        "//modules/audio_coding:g722_c",
        "//modules/audio_coding:ilbc",
        "//modules/audio_coding:ilbc_c",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base/system:arch",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_main",
        "//test:test_support",
    ],
)

cc_library(
    name = "neteq_test_factory",
    testonly = 1,
    srcs = ["neteq/tools/neteq_test_factory.cc"],
    hdrs = ["neteq/tools/neteq_test_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/neteq:neteq_api",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//test:audio_test_common",
        "//test:field_trial",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_binary(
    name = "neteq_rtpplay",
    testonly = 1,
    srcs = ["neteq/tools/neteq_rtpplay.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//modules/audio_coding:neteq_test_factory",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//rtc_base:stringutils",
        "//system_wrappers:field_trial",
        "//test:field_trial",
    ],
)

cc_test(
    name = "audio_codec_speed_tests",
    testonly = 1,
    srcs = [
        "codecs/opus/opus_speed_test.cc",
        "codecs/tools/audio_codec_speed_test.cc",
        "codecs/tools/audio_codec_speed_test.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:audio_coding/music_stereo_48kHz.pcm",
        "//resources:audio_coding/speech_mono_16kHz.pcm",
        "//resources:audio_coding/speech_mono_32_48kHz.pcm",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//modules/audio_processing",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//test:fileutils",
        "//test:test_main",
        "//test:test_support",
    ],
)

cc_library(
    name = "neteq_test_support",
    testonly = 1,
    srcs = ["neteq/tools/neteq_performance_test.cc"],
    hdrs = ["neteq/tools/neteq_performance_test.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//modules/audio_coding:__pkg__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/neteq:neteq_api",
        "//modules/audio_coding:default_neteq_factory",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//rtc_base:checks",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_library(
    name = "neteq_quality_test_support",
    testonly = 1,
    srcs = ["neteq/tools/neteq_quality_test.cc"],
    hdrs = ["neteq/tools/neteq_quality_test.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//modules/audio_coding:__pkg__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/neteq:neteq_api",
        "//modules/audio_coding:default_neteq_factory",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
        "//system_wrappers",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_binary(
    name = "rtp_encode",
    testonly = 1,
    srcs = ["neteq/tools/rtp_encode.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/memory",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs/L16:audio_encoder_L16",
        "//api/audio_codecs/g711:audio_encoder_g711",
        "//api/audio_codecs/g722:audio_encoder_g722",
        "//api/audio_codecs/ilbc:audio_encoder_ilbc",
        #"//api/audio_codecs/opus:audio_encoder_opus",
        "//common_audio",
        "//modules/audio_coding",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:g722",
        "//modules/audio_coding:g722_c",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:safe_conversions",
        "//system_wrappers",
    ],
)

cc_binary(
    name = "rtp_jitter",
    testonly = 1,
    srcs = ["neteq/tools/rtp_jitter.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//common_audio",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:g722",
        "//modules/audio_coding:g722_c",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:buffer",
        "//system_wrappers",
    ],
)

cc_binary(
    name = "rtpcat",
    testonly = 1,
    srcs = ["neteq/tools/rtpcat.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//rtc_base:checks",
        "//test:rtp_test_utils",
    ],
)

cc_binary(
    name = "rtp_analyze",
    testonly = 1,
    srcs = ["neteq/tools/rtp_analyze.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_googletest//:gtest",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
    ],
)

cc_binary(
    name = "neteq_opus_quality_test",
    testonly = 1,
    srcs = ["neteq/test/neteq_opus_quality_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_googletest//:gtest",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_quality_test_support",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//test:test_main",
    ],
)

cc_binary(
    name = "neteq_speed_test",
    testonly = 1,
    srcs = ["neteq/test/neteq_speed_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_test_support",
        "//rtc_base:checks",
        "//test:test_support",
    ],
)

cc_binary(
    name = "neteq_ilbc_quality_test",
    testonly = 1,
    srcs = ["neteq/test/neteq_ilbc_quality_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_googletest//:gtest",
        "//logging:rtc_event_log_proto",
        "//modules/audio_coding:ilbc",
        "//modules/audio_coding:ilbc_c",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_quality_test_support",
        "//modules/audio_coding:neteq_tools",
        "//rtc_base:checks",
        "//rtc_base:safe_conversions",
        "//test:fileutils",
        "//test:test_main",
    ],
)

cc_binary(
    name = "neteq_pcmu_quality_test",
    testonly = 1,
    srcs = ["neteq/test/neteq_pcmu_quality_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_googletest//:gtest",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_quality_test_support",
        "//rtc_base:checks",
        "//rtc_base:safe_conversions",
        "//test:fileutils",
        "//test:test_main",
    ],
)

cc_binary(
    name = "neteq_pcm16b_quality_test",
    testonly = 1,
    srcs = ["neteq/test/neteq_pcm16b_quality_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_googletest//:gtest",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_quality_test_support",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//rtc_base:checks",
        "//rtc_base:safe_conversions",
        "//test:fileutils",
        "//test:test_main",
    ],
)

cc_binary(
    name = "g711_test",
    testonly = 1,
    srcs = ["codecs/g711/test/testG711.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
    ],
)

cc_binary(
    name = "g722_test",
    testonly = 1,
    srcs = ["codecs/g722/test/testG722.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_coding:g722",
        "//modules/audio_coding:g722_c",
    ],
)

cc_binary(
    name = "ilbc_test",
    testonly = 1,
    srcs = ["codecs/ilbc/test/iLBC_test.c"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-Wstrict-prototypes",
            "-fno-rtti",
        ],
        linux = ["-Wstrict-prototypes"],
        windows = [
            "-fno-rtti",
            "-x",
            "c",
        ],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_coding:ilbc",
        "//modules/audio_coding:ilbc_c",
    ],
)

cc_binary(
    name = "webrtc_opus_fec_test",
    testonly = 1,
    srcs = ["codecs/opus/opus_fec_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//common_audio",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//rtc_base:macromagic",
        "//test:fileutils",
        "//test:test_main",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_coding_unittests",
    testonly = 1,
    srcs = [
        "acm2/acm_receiver_unittest.cc",
        "acm2/acm_remixing_unittest.cc",
        "acm2/audio_coding_module_unittest.cc",
        "acm2/call_statistics_unittest.cc",
        "audio_network_adaptor/audio_network_adaptor_impl_unittest.cc",
        "audio_network_adaptor/bitrate_controller_unittest.cc",
        "audio_network_adaptor/channel_controller_unittest.cc",
        "audio_network_adaptor/controller_manager_unittest.cc",
        "audio_network_adaptor/dtx_controller_unittest.cc",
        "audio_network_adaptor/event_log_writer_unittest.cc",
        "audio_network_adaptor/fec_controller_plr_based_unittest.cc",
        "audio_network_adaptor/frame_length_controller_unittest.cc",
        "audio_network_adaptor/frame_length_controller_v2_unittest.cc",
        "audio_network_adaptor/util/threshold_curve_unittest.cc",
        "codecs/builtin_audio_decoder_factory_unittest.cc",
        "codecs/builtin_audio_encoder_factory_unittest.cc",
        "codecs/cng/audio_encoder_cng_unittest.cc",
        "codecs/cng/cng_unittest.cc",
        "codecs/ilbc/ilbc_unittest.cc",
        "codecs/legacy_encoded_audio_frame_unittest.cc",
        "codecs/opus/audio_decoder_multi_channel_opus_unittest.cc",
        "codecs/opus/audio_encoder_multi_channel_opus_unittest.cc",
        "codecs/opus/audio_encoder_opus_unittest.cc",
        "codecs/opus/opus_bandwidth_unittest.cc",
        "codecs/opus/opus_unittest.cc",
        "codecs/red/audio_encoder_copy_red_unittest.cc",
        "neteq/audio_multi_vector_unittest.cc",
        "neteq/audio_vector_unittest.cc",
        "neteq/background_noise_unittest.cc",
        "neteq/buffer_level_filter_unittest.cc",
        "neteq/comfort_noise_unittest.cc",
        "neteq/decision_logic_unittest.cc",
        "neteq/decoder_database_unittest.cc",
        "neteq/delay_manager_unittest.cc",
        "neteq/dsp_helper_unittest.cc",
        "neteq/dtmf_buffer_unittest.cc",
        "neteq/dtmf_tone_generator_unittest.cc",
        "neteq/expand_unittest.cc",
        "neteq/histogram_unittest.cc",
        "neteq/merge_unittest.cc",
        "neteq/nack_tracker_unittest.cc",
        "neteq/neteq_decoder_plc_unittest.cc",
        "neteq/neteq_impl_unittest.cc",
        "neteq/neteq_network_stats_unittest.cc",
        "neteq/neteq_stereo_unittest.cc",
        "neteq/neteq_unittest.cc",
        "neteq/normal_unittest.cc",
        "neteq/packet_arrival_history_unittest.cc",
        "neteq/packet_buffer_unittest.cc",
        "neteq/random_vector_unittest.cc",
        "neteq/red_payload_splitter_unittest.cc",
        "neteq/reorder_optimizer_unittest.cc",
        "neteq/statistics_calculator_unittest.cc",
        "neteq/sync_buffer_unittest.cc",
        "neteq/time_stretch_unittest.cc",
        "neteq/timestamp_scaler_unittest.cc",
        "neteq/tools/input_audio_file_unittest.cc",
        "neteq/tools/packet_unittest.cc",
        "neteq/underrun_optimizer_unittest.cc",
    ],
    hdrs = [
        "neteq/mock/mock_buffer_level_filter.h",
        "neteq/mock/mock_decoder_database.h",
        "neteq/mock/mock_delay_manager.h",
        "neteq/mock/mock_dtmf_buffer.h",
        "neteq/mock/mock_dtmf_tone_generator.h",
        "neteq/mock/mock_expand.h",
        "neteq/mock/mock_histogram.h",
        "neteq/mock/mock_neteq_controller.h",
        "neteq/mock/mock_packet_arrival_history.h",
        "neteq/mock/mock_packet_buffer.h",
        "neteq/mock/mock_red_payload_splitter.h",
        "neteq/mock/mock_statistics_calculator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_CODEC_OPUS",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NETEQ_UNITTEST_BITEXACT",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:array_view",
        "//api/audio:audio_frame_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        #"//api/audio_codecs/opus:audio_decoder_multiopus",
        #"//api/audio_codecs/opus:audio_decoder_opus",
        #"//api/audio_codecs/opus:audio_encoder_multiopus",
        #"//api/audio_codecs/opus:audio_encoder_opus",
        "//api/neteq:default_neteq_controller_factory",
        "//api/neteq:neteq_api",
        "//api/neteq:neteq_controller_api",
        "//api/neteq:tick_timer",
        "//api/neteq:tick_timer_unittest",
        "//api/rtc_event_log",
        "//common_audio",
        "//common_audio:common_audio_c",
        "//common_audio:mock_common_audio",
        "//logging:mocks",
        "//logging:rtc_event_audio",
        "//logging:rtc_event_log_proto",
        "//modules:module_api",
        "//modules:module_api_public",
        "//modules/audio_coding",
        "//modules/audio_coding:acm_receive_test",
        "//modules/audio_coding:acm_send_test",
        "//modules/audio_coding:ana_config_proto",
        "//modules/audio_coding:audio_coding_module_typedefs",
        "//modules/audio_coding:audio_coding_modules_tests_shared",
        # "//modules/audio_coding:audio_coding_opus_common",
        "//modules/audio_coding:audio_encoder_cng",
        "//modules/audio_coding:audio_network_adaptor",
        "//modules/audio_coding:audio_network_adaptor_config",
        "//modules/audio_coding:default_neteq_factory",
        "//modules/audio_coding:g711",
        "//modules/audio_coding:g711_c",
        "//modules/audio_coding:ilbc",
        "//modules/audio_coding:ilbc_c",
        "//modules/audio_coding:legacy_encoded_audio_frame",
        "//modules/audio_coding:mocks",
        "//modules/audio_coding:neteq",
        "//modules/audio_coding:neteq_input_audio_tools",
        "//modules/audio_coding:neteq_test_support",
        "//modules/audio_coding:neteq_test_tools",
        "//modules/audio_coding:neteq_tools",
        "//modules/audio_coding:neteq_tools_minimal",
        "//modules/audio_coding:neteq_unittest_proto",
        "//modules/audio_coding:pcm16b",
        "//modules/audio_coding:pcm16b_c",
        "//modules/audio_coding:red",
        "//modules/audio_coding:webrtc_cng",
        "//modules/audio_coding:webrtc_opus",
        "//modules/audio_coding:webrtc_opus_wrapper",
        "//modules/audio_coding/codecs/opus/test",
        "//modules/audio_coding/codecs/opus/test:test_unittest",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:digest",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:refcount",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:sanitizer",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:arch",
        "//system_wrappers",
        "//test:audio_codec_mocks",
        "//test:audio_test_common",
        "//test:field_trial",
        "//test:fileutils",
        "//test:rtc_expect_death",
        "//test:rtp_test_utils",
        "//test:scoped_key_value_config",
        "//test:test_common",
        "//test:test_support",
    ],
)

cc_library(
    name = "audio_decoder_interface",
    hdrs = ["codecs/audio_decoder.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/audio_codecs:audio_codecs_api"],
)

cc_library(
    name = "audio_encoder_interface",
    hdrs = ["codecs/audio_encoder.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/audio_codecs:audio_codecs_api"],
)
