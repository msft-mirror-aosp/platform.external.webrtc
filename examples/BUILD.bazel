# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "examples",
    testonly = 1,
    visibility = ["//:__subpackages__"],
    deps = [
        "//examples:stun_prober",
    ] + platform_select(
        arm64 = ["//examples:AppRTCMobile"],
        linux = [
            "//examples:peerconnection_client",
            "//examples:peerconnection_server",
            "//examples:stunserver",
            "//examples:turnserver",
        ],
        windows = [
            "//examples:peerconnection_client",
            "//examples:peerconnection_server",
            "//examples:stunserver",
            "//examples:turnserver",
        ],
    ),
)

cc_library(
    name = "read_auth_file",
    testonly = 1,
    srcs = ["turnserver/read_auth_file.cc"],
    hdrs = ["turnserver/read_auth_file.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:array_view",
        "//rtc_base:stringutils",
    ],
)

cc_test(
    name = "examples_unittests",
    testonly = 1,
    srcs = ["turnserver/read_auth_file_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//examples:read_auth_file",
        "//test:test_main",
        "//test:test_support",
    ],
)

objc_library(
    name = "apprtc_common",
    testonly = 1,
    srcs = ["objc/AppRTCMobile/common/ARDUtilities.m"],
    hdrs = ["objc/AppRTCMobile/common/ARDUtilities.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-Wimplicit-retain-self",
        "-Wmissing-field-initializers",
        "-Wstrict-overflow",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    includes = [
        "../sdk/objc",
        "../sdk/objc/base",
        "objc/AppRTCMobile/common",
    ],
    visibility = ["//:__subpackages__"],
    deps = ["//sdk:base_objc"],
)

objc_library(
    name = "apprtc_signaling",
    testonly = 1,
    srcs = [
        "objc/AppRTCMobile/ARDAppClient.m",
        "objc/AppRTCMobile/ARDAppEngineClient.m",
        "objc/AppRTCMobile/ARDCaptureController.m",
        "objc/AppRTCMobile/ARDExternalSampleCapturer.m",
        "objc/AppRTCMobile/ARDJoinResponse.m",
        "objc/AppRTCMobile/ARDMessageResponse.m",
        "objc/AppRTCMobile/ARDSettingsModel.m",
        "objc/AppRTCMobile/ARDSettingsStore.m",
        "objc/AppRTCMobile/ARDSignalingMessage.m",
        "objc/AppRTCMobile/ARDStatsBuilder.m",
        "objc/AppRTCMobile/ARDTURNClient.m",
        "objc/AppRTCMobile/ARDWebSocketChannel.m",
        "objc/AppRTCMobile/RTCIceCandidate+JSON.m",
        "objc/AppRTCMobile/RTCIceServer+JSON.m",
        "objc/AppRTCMobile/RTCSessionDescription+JSON.m",
    ],
    hdrs = [
        "objc/AppRTCMobile/ARDAppClient.h",
        "objc/AppRTCMobile/ARDAppClient+Internal.h",
        "objc/AppRTCMobile/ARDAppEngineClient.h",
        "objc/AppRTCMobile/ARDCaptureController.h",
        "objc/AppRTCMobile/ARDExternalSampleCapturer.h",
        "objc/AppRTCMobile/ARDJoinResponse.h",
        "objc/AppRTCMobile/ARDJoinResponse+Internal.h",
        "objc/AppRTCMobile/ARDMessageResponse.h",
        "objc/AppRTCMobile/ARDMessageResponse+Internal.h",
        "objc/AppRTCMobile/ARDRoomServerClient.h",
        "objc/AppRTCMobile/ARDSettingsModel.h",
        "objc/AppRTCMobile/ARDSettingsModel+Private.h",
        "objc/AppRTCMobile/ARDSettingsStore.h",
        "objc/AppRTCMobile/ARDSignalingChannel.h",
        "objc/AppRTCMobile/ARDSignalingMessage.h",
        "objc/AppRTCMobile/ARDStatsBuilder.h",
        "objc/AppRTCMobile/ARDTURNClient.h",
        "objc/AppRTCMobile/ARDTURNClient+Internal.h",
        "objc/AppRTCMobile/ARDWebSocketChannel.h",
        "objc/AppRTCMobile/RTCIceCandidate+JSON.h",
        "objc/AppRTCMobile/RTCIceServer+JSON.h",
        "objc/AppRTCMobile/RTCSessionDescription+JSON.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
        "-Wimplicit-retain-self",
        "-Wmissing-field-initializers",
        "-Wstrict-overflow",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    includes = [
        "../sdk/objc",
        "../sdk/objc/base",
        "objc/AppRTCMobile",
        "objc/AppRTCMobile/common",
        "objc/AppRTCMobile/third_party/SocketRocket",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "@apple_frameworks//:CoreMedia",
        "@apple_frameworks//:QuartzCore",
        "//examples:apprtc_common",
        "//examples:socketrocket",
        "//sdk:base_objc",
        "//sdk:default_codec_factory_objc",
        "//sdk:file_logger_objc",
        "//sdk:helpers_objc",
        "//sdk:mediaconstraints_objc",
        "//sdk:peerconnectionfactory_base_objc",
        "//sdk:videocapture_objc",
        "//sdk:videoframebuffer_objc",
        "//sdk:videosource_objc",
    ],
)

objc_library(
    name = "socketrocket",
    testonly = 1,
    srcs = ["objc/AppRTCMobile/third_party/SocketRocket/SRWebSocket.m"],
    hdrs = ["objc/AppRTCMobile/third_party/SocketRocket/SRWebSocket.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-Wno-nonnull",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    includes = ["objc/AppRTCMobile/third_party/SocketRocket"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@apple_frameworks//:CFNetwork",
        "@apple_frameworks//:Security",
    ],
)

cc_binary(
    name = "peerconnection_server",
    testonly = 1,
    srcs = [
        "peerconnection/server/data_socket.cc",
        "peerconnection/server/data_socket.h",
        "peerconnection/server/main.cc",
        "peerconnection/server/peer_channel.cc",
        "peerconnection/server/peer_channel.h",
        "peerconnection/server/utils.cc",
        "peerconnection/server/utils.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
        "//system_wrappers:field_trial",
        "//test:field_trial",
    ],
)

cc_binary(
    name = "turnserver",
    testonly = 1,
    srcs = ["turnserver/turnserver_main.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//examples:read_auth_file",
        "//p2p:basic_packet_socket_factory",
        "//p2p:p2p_server_utils",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//pc:rtc_pc",
        "//rtc_base:async_udp_socket",
        "//rtc_base:ip_address",
        "//rtc_base:socket_address",
        "//rtc_base:socket_server",
        "//rtc_base:threading",
    ],
)

cc_binary(
    name = "stunserver",
    testonly = 1,
    srcs = ["stunserver/stunserver_main.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:p2p_server_utils",
        "//p2p:rtc_p2p",
        "//pc:rtc_pc",
        "//rtc_base:async_udp_socket",
        "//rtc_base:socket_address",
        "//rtc_base:socket_server",
        "//rtc_base:threading",
    ],
)

cc_binary(
    name = "stun_prober",
    testonly = 1,
    srcs = ["stunprober/main.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "//p2p:basic_packet_socket_factory",
        "//p2p:libstunprober",
        "//p2p:rtc_p2p",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:network",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//test:scoped_key_value_config",
    ],
)
