# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "p2p",
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:libstunprober",
        "//p2p:rtc_p2p",
    ],
)

cc_library(
    name = "rtc_p2p",
    hdrs = [
        "base/active_ice_controller_factory_interface.h",
        "base/active_ice_controller_interface.h",
        "base/basic_ice_controller.h",
        "base/basic_packet_socket_factory.h",
        "base/candidate_pair_interface.h",
        "base/connection.h",
        "base/connection_info.h",
        "base/default_ice_transport_factory.h",
        "base/dtls_transport.h",
        "base/dtls_transport_internal.h",
        "base/ice_agent_interface.h",
        "base/ice_controller_interface.h",
        "base/ice_credentials_iterator.h",
        "base/ice_switch_reason.h",
        "base/ice_transport_internal.h",
        "base/p2p_constants.h",
        "base/p2p_transport_channel.h",
        "base/p2p_transport_channel_ice_field_trials.h",
        "base/packet_transport_internal.h",
        "base/port.h",
        "base/port_allocator.h",
        "base/port_interface.h",
        "base/pseudo_tcp.h",
        "base/stun_dictionary.h",
        "base/stun_port.h",
        "base/tcp_port.h",
        "base/transport_description.h",
        "base/transport_info.h",
        "base/turn_port.h",
        "client/basic_port_allocator.h",
        "client/turn_port_factory.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:async_dns_resolver",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:field_trials_view",
        "//api:ice_transport_interface",
        "//api:make_ref_counted",
        "//api:packet_socket_factory",
        "//api:rtc_error",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:turn_customizer",
        "//api/crypto:options",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:enums",
        "//api/transport:field_trial_based_config",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//logging:ice_log",
        "//p2p:active_ice_controller_factory_interface",
        "//p2p:async_stun_tcp_socket",
        "//p2p:basic_async_resolver_factory",
        "//p2p:basic_ice_controller",
        "//p2p:basic_packet_socket_factory",
        "//p2p:candidate_pair_interface",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:dtls_transport",
        "//p2p:dtls_transport_internal",
        "//p2p:ice_agent_interface",
        "//p2p:ice_controller_factory_interface",
        "//p2p:ice_controller_interface",
        "//p2p:ice_credentials_iterator",
        "//p2p:ice_switch_reason",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel",
        "//p2p:p2p_transport_channel_ice_field_trials",
        "//p2p:packet_transport_internal",
        "//p2p:port_interface",
        "//p2p:pseudo_tcp",
        "//p2p:regathering_controller",
        "//p2p:relay_port_factory_interface",
        "//p2p:stun_dictionary",
        "//p2p:stun_request",
        "//p2p:tcp_port",
        "//p2p:transport_description",
        "//p2p:udp_port",
        "//p2p:wrapping_active_ice_controller",
        "//rtc_base:async_dns_resolver",
        "//rtc_base:async_packet_socket",
        "//rtc_base:async_tcp_socket",
        "//rtc_base:async_udp_socket",
        "//rtc_base:buffer",
        "//rtc_base:buffer_queue",
        "//rtc_base:byte_buffer",
        "//rtc_base:byte_order",
        "//rtc_base:callback_list",
        "//rtc_base:checks",
        "//rtc_base:crc32",
        "//rtc_base:dscp",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mdns_responder_interface",
        "//rtc_base:net_helper",
        "//rtc_base:net_helpers",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:network_route",
        "//rtc_base:rate_tracker",
        "//rtc_base:refcount",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_minmax",
        "//rtc_base:socket",
        "//rtc_base:socket_adapters",
        "//rtc_base:socket_address",
        "//rtc_base:socket_factory",
        "//rtc_base:socket_server",
        "//rtc_base:ssl",
        "//rtc_base:stream",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base:weak_ptr",
        "//rtc_base/containers:flat_map",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/memory:always_valid_pointer",
        "//rtc_base/network:received_packet",
        "//rtc_base/network:sent_packet",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/base64",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "active_ice_controller_factory_interface",
    hdrs = ["base/active_ice_controller_factory_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:active_ice_controller_interface",
        "//p2p:ice_agent_interface",
        "//p2p:ice_controller_factory_interface",
    ],
)

cc_library(
    name = "active_ice_controller_interface",
    hdrs = ["base/active_ice_controller_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//p2p:connection",
        "//p2p:ice_switch_reason",
        "//p2p:ice_transport_internal",
        "//p2p:transport_description",
    ],
)

cc_library(
    name = "basic_async_resolver_factory",
    srcs = ["base/basic_async_resolver_factory.cc"],
    hdrs = ["base/basic_async_resolver_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "//api:async_dns_resolver",
        "//rtc_base:async_dns_resolver",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "async_stun_tcp_socket",
    srcs = ["base/async_stun_tcp_socket.cc"],
    hdrs = ["base/async_stun_tcp_socket.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api/transport:stun_types",
        "//api/units:timestamp",
        "//rtc_base:async_packet_socket",
        "//rtc_base:async_tcp_socket",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:socket",
        "//rtc_base:socket_address",
        "//rtc_base:timeutils",
        "//rtc_base/network:received_packet",
        "//rtc_base/network:sent_packet",
    ],
)

cc_library(
    name = "basic_ice_controller",
    srcs = ["base/basic_ice_controller.cc"],
    hdrs = ["base/basic_ice_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:ice_controller_factory_interface",
        "//p2p:ice_controller_interface",
    ],
)

cc_library(
    name = "basic_packet_socket_factory",
    srcs = ["base/basic_packet_socket_factory.cc"],
    hdrs = ["base/basic_packet_socket_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "//api:async_dns_resolver",
        "//api:packet_socket_factory",
        "//p2p:async_stun_tcp_socket",
        "//rtc_base:async_dns_resolver",
        "//rtc_base:async_packet_socket",
        "//rtc_base:async_tcp_socket",
        "//rtc_base:async_udp_socket",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:socket",
        "//rtc_base:socket_adapters",
        "//rtc_base:socket_address",
        "//rtc_base:socket_factory",
        "//rtc_base:ssl",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "basic_port_allocator",
    srcs = ["client/basic_port_allocator.cc"],
    hdrs = ["client/basic_port_allocator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings:string_view",
        "//api:field_trials_view",
        "//api:turn_customizer",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:field_trial_based_config",
        "//api/units:time_delta",
        "//p2p:basic_packet_socket_factory",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:relay_port_factory_interface",
        "//p2p:rtc_p2p",
        "//p2p:stun_port",
        "//p2p:tcp_port",
        "//p2p:turn_port",
        "//p2p:turn_port_factory",
        "//p2p:udp_port",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/memory:always_valid_pointer",
        "//rtc_base/network:received_packet",
        "//rtc_base/system:rtc_export",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "candidate_pair_interface",
    hdrs = ["base/candidate_pair_interface.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "connection",
    srcs = ["base/connection.cc"],
    hdrs = ["base/connection.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:candidate",
        "//api:field_trials_view",
        "//api:packet_socket_factory",
        "//api:rtc_error",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/transport:enums",
        "//api/transport:field_trial_based_config",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//logging:ice_log",
        "//p2p:candidate_pair_interface",
        "//p2p:connection_info",
        "//p2p:ice_credentials_iterator",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel_ice_field_trials",
        "//p2p:port_interface",
        "//p2p:stun_request",
        "//p2p:transport_description",
        "//rtc_base:async_packet_socket",
        "//rtc_base:byte_buffer",
        "//rtc_base:callback_list",
        "//rtc_base:checks",
        "//rtc_base:crc32",
        "//rtc_base:dscp",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mdns_responder_interface",
        "//rtc_base:net_helper",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:rate_tracker",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_minmax",
        "//rtc_base:socket",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base:weak_ptr",
        "//rtc_base/memory:always_valid_pointer",
        "//rtc_base/network:received_packet",
        "//rtc_base/network:sent_packet",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/base64",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "connection_info",
    srcs = ["base/connection_info.cc"],
    hdrs = ["base/connection_info.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:candidate",
        "//api/units:timestamp",
    ],
)

cc_library(
    name = "default_ice_transport_factory",
    srcs = ["base/default_ice_transport_factory.cc"],
    hdrs = ["base/default_ice_transport_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:ice_transport_interface",
        "//api:make_ref_counted",
        "//p2p:basic_ice_controller",
        "//p2p:ice_controller_factory_interface",
        "//p2p:p2p_transport_channel",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "dtls_transport",
    srcs = ["base/dtls_transport.cc"],
    hdrs = ["base/dtls_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings:string_view",
        "//api:array_view",
        "//api:dtls_transport_interface",
        "//api:sequence_checker",
        "//api/crypto:options",
        "//api/rtc_event_log",
        "//logging:ice_log",
        "//p2p:dtls_transport_internal",
        "//p2p:ice_transport_internal",
        "//p2p:packet_transport_internal",
        "//rtc_base:buffer",
        "//rtc_base:buffer_queue",
        "//rtc_base:checks",
        "//rtc_base:dscp",
        "//rtc_base:logging",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stream",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/network:received_packet",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "dtls_transport_factory",
    hdrs = ["base/dtls_transport_factory.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:dtls_transport_internal",
        "//p2p:ice_transport_internal",
    ],
)

cc_library(
    name = "dtls_transport_internal",
    srcs = ["base/dtls_transport_internal.cc"],
    hdrs = ["base/dtls_transport_internal.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings:string_view",
        "//api:dtls_transport_interface",
        "//api:scoped_refptr",
        "//api/crypto:options",
        "//p2p:ice_transport_internal",
        "//p2p:packet_transport_internal",
        "//rtc_base:callback_list",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "ice_agent_interface",
    hdrs = ["base/ice_agent_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//p2p:connection",
        "//p2p:ice_switch_reason",
    ],
)

cc_library(
    name = "ice_controller_interface",
    srcs = ["base/ice_controller_interface.cc"],
    hdrs = ["base/ice_controller_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//p2p:connection",
        "//p2p:ice_switch_reason",
        "//p2p:ice_transport_internal",
        "//rtc_base:checks",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "ice_controller_factory_interface",
    hdrs = ["base/ice_controller_factory_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:ice_controller_interface",
        "//p2p:ice_transport_internal",
    ],
)

cc_library(
    name = "ice_credentials_iterator",
    srcs = ["base/ice_credentials_iterator.cc"],
    hdrs = ["base/ice_credentials_iterator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:p2p_constants",
        "//p2p:transport_description",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "ice_switch_reason",
    srcs = ["base/ice_switch_reason.cc"],
    hdrs = ["base/ice_switch_reason.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//rtc_base/system:rtc_export"],
)

cc_library(
    name = "ice_transport_internal",
    srcs = ["base/ice_transport_internal.cc"],
    hdrs = ["base/ice_transport_internal.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:candidate",
        "//api:rtc_error",
        "//api/transport:enums",
        "//p2p:connection",
        "//p2p:p2p_constants",
        "//p2p:packet_transport_internal",
        "//p2p:port",
        "//p2p:stun_dictionary",
        "//p2p:transport_description",
        "//rtc_base:network_constants",
        "//rtc_base:timeutils",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "p2p_constants",
    srcs = ["base/p2p_constants.cc"],
    hdrs = ["base/p2p_constants.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//rtc_base/system:rtc_export"],
)

cc_library(
    name = "p2p_transport_channel",
    srcs = ["base/p2p_transport_channel.cc"],
    hdrs = ["base/p2p_transport_channel.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:async_dns_resolver",
        "//api:candidate",
        "//api:field_trials_view",
        "//api:ice_transport_interface",
        "//api:rtc_error",
        "//api:sequence_checker",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:enums",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//logging:ice_log",
        "//p2p:active_ice_controller_factory_interface",
        "//p2p:basic_ice_controller",
        "//p2p:candidate_pair_interface",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:ice_agent_interface",
        "//p2p:ice_controller_factory_interface",
        "//p2p:ice_controller_interface",
        "//p2p:ice_switch_reason",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel_ice_field_trials",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:regathering_controller",
        "//p2p:stun_dictionary",
        "//p2p:transport_description",
        "//p2p:wrapping_active_ice_controller",
        "//rtc_base:async_packet_socket",
        "//rtc_base:checks",
        "//rtc_base:dscp",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:net_helper",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:network_route",
        "//rtc_base:socket",
        "//rtc_base:socket_address",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/network:sent_packet",
        "//rtc_base/system:rtc_export",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "p2p_transport_channel_ice_field_trials",
    hdrs = ["base/p2p_transport_channel_ice_field_trials.h"],
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/types:optional"],
)

cc_library(
    name = "packet_transport_internal",
    srcs = ["base/packet_transport_internal.cc"],
    hdrs = ["base/packet_transport_internal.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api:sequence_checker",
        "//p2p:connection",
        "//p2p:port",
        "//rtc_base:async_packet_socket",
        "//rtc_base:callback_list",
        "//rtc_base:network_route",
        "//rtc_base:socket",
        "//rtc_base/network:received_packet",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "port",
    srcs = ["base/port.cc"],
    hdrs = ["base/port.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:candidate",
        "//api:field_trials_view",
        "//api:packet_socket_factory",
        "//api:rtc_error",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/transport:field_trial_based_config",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//logging:ice_log",
        "//p2p:candidate_pair_interface",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:p2p_constants",
        "//p2p:port_interface",
        "//p2p:stun_request",
        "//p2p:transport_description",
        "//rtc_base:async_packet_socket",
        "//rtc_base:byte_buffer",
        "//rtc_base:callback_list",
        "//rtc_base:checks",
        "//rtc_base:dscp",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mdns_responder_interface",
        "//rtc_base:net_helper",
        "//rtc_base:network",
        "//rtc_base:rate_tracker",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base:weak_ptr",
        "//rtc_base/memory:always_valid_pointer",
        "//rtc_base/network:received_packet",
        "//rtc_base/network:sent_packet",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "port_allocator",
    srcs = ["base/port_allocator.cc"],
    hdrs = ["base/port_allocator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:candidate",
        "//api:sequence_checker",
        "//api/transport:enums",
        "//p2p:connection",
        "//p2p:ice_credentials_iterator",
        "//p2p:port",
        "//p2p:port_interface",
        "//p2p:transport_description",
        "//rtc_base:checks",
        "//rtc_base:network",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "port_interface",
    srcs = ["base/port_interface.cc"],
    hdrs = ["base/port_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:candidate",
        "//api:field_trials_view",
        "//api:packet_socket_factory",
        "//api/task_queue",
        "//p2p:transport_description",
        "//rtc_base:async_packet_socket",
        "//rtc_base:callback_list",
        "//rtc_base:socket_address",
    ],
)

cc_library(
    name = "pseudo_tcp",
    srcs = ["base/pseudo_tcp.cc"],
    hdrs = ["base/pseudo_tcp.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//rtc_base:byte_buffer",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:safe_minmax",
        "//rtc_base:socket",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "regathering_controller",
    srcs = ["base/regathering_controller.cc"],
    hdrs = ["base/regathering_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//p2p:connection",
        "//p2p:ice_transport_internal",
        "//p2p:port_allocator",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "stun_dictionary",
    srcs = ["base/stun_dictionary.cc"],
    hdrs = ["base/stun_dictionary.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:rtc_error",
        "//api/transport:stun_types",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "stun_port",
    srcs = ["base/stun_port.cc"],
    hdrs = ["base/stun_port.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings:string_view",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:stun_types",
        "//p2p:connection",
        "//p2p:p2p_constants",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:stun_request",
        "//rtc_base:async_packet_socket",
        "//rtc_base:checks",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/network:received_packet",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "stun_request",
    srcs = ["base/stun_request.cc"],
    hdrs = ["base/stun_request.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
    ],
)

cc_library(
    name = "tcp_port",
    srcs = ["base/tcp_port.cc"],
    hdrs = ["base/tcp_port.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings:string_view",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//p2p:connection",
        "//p2p:p2p_constants",
        "//p2p:port",
        "//rtc_base:async_packet_socket",
        "//rtc_base:checks",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:net_helper",
        "//rtc_base:rate_tracker",
        "//rtc_base:threading",
        "//rtc_base/containers:flat_map",
        "//rtc_base/network:received_packet",
    ],
)

cc_library(
    name = "transport_description",
    srcs = ["base/transport_description.cc"],
    hdrs = ["base/transport_description.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:rtc_error",
        "//p2p:p2p_constants",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "transport_description_factory",
    srcs = ["base/transport_description_factory.cc"],
    hdrs = ["base/transport_description_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:field_trials_view",
        "//p2p:ice_credentials_iterator",
        "//p2p:transport_description",
        "//rtc_base:logging",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "transport_info",
    hdrs = ["base/transport_info.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:candidate",
        "//p2p:p2p_constants",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "udp_port",
    hdrs = ["base/udp_port.h"],
    visibility = ["//:__subpackages__"],
    deps = ["//p2p:stun_port"],
)

cc_library(
    name = "turn_port",
    srcs = ["base/turn_port.cc"],
    hdrs = ["base/turn_port.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:async_dns_resolver",
        "//api:turn_customizer",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:stun_types",
        "//p2p:connection",
        "//p2p:p2p_constants",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:relay_port_factory_interface",
        "//rtc_base:async_packet_socket",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:net_helpers",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/network:received_packet",
    ],
)

cc_library(
    name = "turn_port_factory",
    srcs = ["client/turn_port_factory.cc"],
    hdrs = ["client/turn_port_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:relay_port_factory_interface",
        "//p2p:rtc_p2p",
        "//p2p:turn_port",
        "//rtc_base:async_packet_socket",
    ],
)

cc_library(
    name = "relay_port_factory_interface",
    hdrs = ["client/relay_port_factory_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//p2p:port_interface",
        "//rtc_base:refcount",
    ],
)

cc_library(
    name = "wrapping_active_ice_controller",
    srcs = ["base/wrapping_active_ice_controller.cc"],
    hdrs = ["base/wrapping_active_ice_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:sequence_checker",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//p2p:active_ice_controller_interface",
        "//p2p:basic_ice_controller",
        "//p2p:connection",
        "//p2p:ice_agent_interface",
        "//p2p:ice_controller_factory_interface",
        "//p2p:ice_controller_interface",
        "//p2p:ice_switch_reason",
        "//p2p:ice_transport_internal",
        "//p2p:transport_description",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
    ],
)

cc_library(
    name = "fake_ice_transport",
    testonly = 1,
    hdrs = ["base/fake_ice_transport.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//p2p:ice_transport_internal",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:timeutils",
        "//rtc_base/network:received_packet",
    ],
)

cc_library(
    name = "fake_port_allocator",
    testonly = 1,
    hdrs = ["base/fake_port_allocator.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//p2p:basic_packet_socket_factory",
        "//p2p:connection",
        "//p2p:port_allocator",
        "//p2p:udp_port",
        "//rtc_base:net_helpers",
        "//rtc_base:net_test_helpers",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base/memory:always_valid_pointer",
    ],
)

cc_library(
    name = "p2p_test_utils",
    testonly = 1,
    srcs = ["base/test_stun_server.cc"],
    hdrs = [
        "base/fake_dtls_transport.h",
        "base/fake_packet_transport.h",
        "base/mock_active_ice_controller.h",
        "base/mock_dns_resolving_packet_socket_factory.h",
        "base/mock_ice_agent.h",
        "base/mock_ice_controller.h",
        "base/mock_ice_transport.h",
        "base/test_stun_server.h",
        "base/test_turn_customizer.h",
        "base/test_turn_server.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:mock_async_dns_resolver",
        "//api:packet_socket_factory",
        "//api:rtp_sender_interface",
        "//api:sequence_checker",
        "//api:turn_customizer",
        "//api/crypto:options",
        "//api/transport:stun_types",
        "//p2p:active_ice_controller_factory_interface",
        "//p2p:active_ice_controller_interface",
        "//p2p:basic_packet_socket_factory",
        "//p2p:connection",
        "//p2p:dtls_transport_internal",
        "//p2p:fake_ice_transport",
        "//p2p:fake_port_allocator",
        "//p2p:ice_agent_interface",
        "//p2p:ice_controller_factory_interface",
        "//p2p:ice_controller_interface",
        "//p2p:ice_switch_reason",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_server_utils",
        "//p2p:packet_transport_internal",
        "//p2p:transport_description",
        "//rtc_base:async_udp_socket",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:gunit_helpers",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket",
        "//rtc_base:socket_address",
        "//rtc_base:socket_server",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/network:received_packet",
        "//rtc_base/third_party/sigslot",
        "//test:test_support",
    ],
)

cc_library(
    name = "rtc_p2p_unittests",
    testonly = 1,
    srcs = [
        "base/async_stun_tcp_socket_unittest.cc",
        "base/dtls_transport_unittest.cc",
        "base/ice_credentials_iterator_unittest.cc",
        "base/p2p_transport_channel_unittest.cc",
        "base/packet_transport_internal_unittest.cc",
        "base/port_allocator_unittest.cc",
        "base/port_unittest.cc",
        "base/pseudo_tcp_unittest.cc",
        "base/regathering_controller_unittest.cc",
        "base/stun_dictionary_unittest.cc",
        "base/stun_port_unittest.cc",
        "base/stun_request_unittest.cc",
        "base/stun_server_unittest.cc",
        "base/tcp_port_unittest.cc",
        "base/transport_description_factory_unittest.cc",
        "base/transport_description_unittest.cc",
        "base/turn_port_unittest.cc",
        "base/turn_server_unittest.cc",
        "base/wrapping_active_ice_controller_unittest.cc",
        "client/basic_port_allocator_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:array_view",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:mock_async_dns_resolver",
        "//api:packet_socket_factory",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//p2p:active_ice_controller_factory_interface",
        "//p2p:active_ice_controller_interface",
        "//p2p:async_stun_tcp_socket",
        "//p2p:basic_ice_controller",
        "//p2p:basic_packet_socket_factory",
        "//p2p:basic_port_allocator",
        "//p2p:connection",
        "//p2p:dtls_transport",
        "//p2p:fake_ice_transport",
        "//p2p:fake_port_allocator",
        "//p2p:ice_credentials_iterator",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_server_utils",
        "//p2p:p2p_test_utils",
        "//p2p:p2p_transport_channel",
        "//p2p:packet_transport_internal",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:pseudo_tcp",
        "//p2p:regathering_controller",
        "//p2p:relay_port_factory_interface",
        "//p2p:rtc_p2p",
        "//p2p:stun_dictionary",
        "//p2p:stun_port",
        "//p2p:stun_request",
        "//p2p:tcp_port",
        "//p2p:transport_description",
        "//p2p:transport_description_factory",
        "//p2p:turn_port",
        "//p2p:wrapping_active_ice_controller",
        "//rtc_base:async_packet_socket",
        "//rtc_base:buffer",
        "//rtc_base:byte_buffer",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:digest",
        "//rtc_base:dscp",
        "//rtc_base:gunit_helpers",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mdns_responder_interface",
        "//rtc_base:net_helper",
        "//rtc_base:net_helpers",
        "//rtc_base:net_test_helpers",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket",
        "//rtc_base:socket_adapters",
        "//rtc_base:socket_address",
        "//rtc_base:socket_address_pair",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:testclient",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/network:received_packet",
        "//rtc_base/network:sent_packet",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers:metrics",
        "//test:rtc_expect_death",
        "//test:scoped_key_value_config",
        "//test:test_support",
    ],
)

cc_library(
    name = "p2p_server_utils",
    testonly = 1,
    srcs = [
        "base/stun_server.cc",
        "base/turn_server.cc",
    ],
    hdrs = [
        "base/stun_server.h",
        "base/turn_server.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "//api:array_view",
        "//api:packet_socket_factory",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//p2p:async_stun_tcp_socket",
        "//p2p:port_interface",
        "//rtc_base:async_packet_socket",
        "//rtc_base:async_udp_socket",
        "//rtc_base:byte_buffer",
        "//rtc_base:checks",
        "//rtc_base:digest",
        "//rtc_base:logging",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket_adapters",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base/network:received_packet",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "libstunprober",
    srcs = ["stunprober/stun_prober.cc"],
    hdrs = ["stunprober/stun_prober.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:async_dns_resolver",
        "//api:packet_socket_factory",
        "//api:sequence_checker",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:stun_types",
        "//api/units:time_delta",
        "//rtc_base:async_packet_socket",
        "//rtc_base:byte_buffer",
        "//rtc_base:checks",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:network",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/network:received_packet",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "libstunprober_unittests",
    testonly = 1,
    srcs = ["stunprober/stun_prober_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//p2p:basic_packet_socket_factory",
        "//p2p:libstunprober",
        "//p2p:p2p_test_utils",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:ip_address",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:ssl",
        "//test:test_support",
    ],
)
