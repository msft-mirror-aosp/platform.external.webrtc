# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "emulated_network",
    testonly = 1,
    srcs = [
        "cross_traffic.cc",
        "emulated_network_manager.cc",
        "emulated_turn_server.cc",
        "fake_network_socket_server.cc",
        "network_emulation.cc",
        "network_emulation_manager.cc",
        "traffic_route.cc",
    ],
    hdrs = [
        "cross_traffic.h",
        "emulated_network_manager.h",
        "emulated_turn_server.h",
        "fake_network_socket_server.h",
        "network_emulation.h",
        "network_emulation_manager.h",
        "traffic_route.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//api:__pkg__",
        "//api/test/network_emulation:__pkg__",
        "//test/network:__pkg__",
        "//test/peer_scenario:__pkg__",
        "//test/scenario:__pkg__",
    ],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:field_trials_view",
        "//api:network_emulation_manager_api",
        "//api:packet_socket_factory",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:simulated_network_api",
        "//api:time_controller",
        "//api/numerics",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/test/network_emulation",
        "//api/transport:stun_types",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//p2p:basic_packet_socket_factory",
        "//p2p:p2p_server_utils",
        "//p2p:rtc_p2p",
        "//rtc_base:async_packet_socket",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:random",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_minmax",
        "//rtc_base:socket",
        "//rtc_base:socket_address",
        "//rtc_base:socket_server",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base/memory:always_valid_pointer",
        "//rtc_base/network:received_packet",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//test:scoped_key_value_config",
        "//test/network:simulated_network",
        "//test/scenario:column_printer",
        "//test/time_controller",
    ],
)

cc_library(
    name = "network_emulation_pc_unittest",
    testonly = 1,
    srcs = ["network_emulation_pc_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:enable_media_with_defaults",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:simulated_network_api",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/task_queue:default_task_queue_factory",
        "//api/transport:field_trial_based_config",
        "//media:rtc_audio_video",
        "//modules/audio_device:test_audio_device_module",
        "//p2p:basic_packet_socket_factory",
        "//p2p:basic_port_allocator",
        "//p2p:rtc_p2p",
        "//pc:pc_test_utils",
        "//pc:peerconnection_wrapper",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:rtc_event",
        "//rtc_base:task_queue_for_test",
        "//test:test_support",
        "//test/network:emulated_network",
        "//test/network:simulated_network",
    ],
)

cc_library(
    name = "cross_traffic_unittest",
    testonly = 1,
    srcs = ["cross_traffic_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/types:optional",
        "//api:network_emulation_manager_api",
        "//api:simulated_network_api",
        "//api/units:data_rate",
        "//rtc_base:logging",
        "//rtc_base:network_constants",
        "//rtc_base:rtc_event",
        "//test:test_support",
        "//test/network:emulated_network",
        "//test/network:simulated_network",
        "//test/time_controller",
    ],
)

cc_library(
    name = "network_emulation_unittest",
    testonly = 1,
    srcs = ["network_emulation_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:create_time_controller",
        "//api:simulated_network_api",
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:rtc_event",
        "//rtc_base:task_queue_for_test",
        "//rtc_base/synchronization:mutex",
        "//test:test_support",
        "//test/network:emulated_network",
        "//test/network:simulated_network",
    ],
)

cc_library(
    name = "feedback_generator",
    testonly = 1,
    srcs = ["feedback_generator.cc"],
    hdrs = ["feedback_generator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "//api/transport:network_control",
        "//api/transport:test_feedback_generator_interface",
        "//rtc_base:checks",
        "//test/network:emulated_network",
        "//test/network:simulated_network",
        "//test/time_controller",
    ],
)

cc_library(
    name = "feedback_generator_unittest",
    testonly = 1,
    srcs = ["feedback_generator_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/transport:test_feedback_generator",
        "//test:test_support",
    ],
)

cc_library(
    name = "network_emulation_unittests",
    testonly = 1,
    visibility = ["//:__subpackages__"],
    deps = [
        "//test/network:cross_traffic_unittest",
        "//test/network:feedback_generator_unittest",
        "//test/network:network_emulation_pc_unittest",
        "//test/network:network_emulation_unittest",
        "//test/network:simulated_network_unittest",
    ],
)

cc_library(
    name = "simulated_network",
    srcs = ["simulated_network.cc"],
    hdrs = ["simulated_network.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:sequence_checker",
        "//api:simulated_network_api",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:random",
        "//rtc_base/synchronization:mutex",
    ],
)

cc_library(
    name = "simulated_network_unittest",
    testonly = 1,
    srcs = ["simulated_network_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_googletest//:gtest",
        "//api:simulated_network_api",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//test:test_support",
        "//test/network:simulated_network",
    ],
)
