# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "column_printer",
    testonly = 1,
    srcs = ["column_printer.cc"],
    hdrs = ["column_printer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//rtc_base:macromagic",
        "//rtc_base:stringutils",
        "//test/logging:log_writer",
    ],
)

cc_library(
    name = "scenario",
    testonly = 1,
    srcs = [
        "audio_stream.cc",
        "call_client.cc",
        "hardware_codecs.cc",
        "network_node.cc",
        "performance_stats.cc",
        "scenario.cc",
        "scenario_config.cc",
        "stats_collection.cc",
        "video_frame_matcher.cc",
        "video_stream.cc",
    ],
    hdrs = [
        "audio_stream.h",
        "call_client.h",
        "hardware_codecs.h",
        "network_node.h",
        "performance_stats.h",
        "scenario.h",
        "scenario_config.h",
        "stats_collection.h",
        "video_frame_matcher.h",
        "video_stream.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:difficult_photo_1850_1110.yuv",
        "//resources:photo_1850_1110.yuv",
        "//resources:presentation_1850_1110.yuv",
        "//resources:web_screenshot_1850_1110.yuv",
    ],
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:create_frame_generator",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:frame_generator_api",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_event_log_output_file",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:sequence_checker",
        "//api:time_controller",
        "//api:transport_api",
        "//api/audio:audio_device",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/rtc_event_log",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/task_queue",
        "//api/test/video:function_video_factory",
        "//api/transport:network_control",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//audio",
        "//call",
        "//call:call_interfaces",
        "//call:rtp_sender",
        "//call:video_stream_api",
        "//common_video",
        "//media:media_constants",
        "//media:rtc_audio_video",
        "//media:rtc_internal_video_codecs",
        "//modules/audio_coding:ana_config_proto",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_device:mock_audio_device",
        "//modules/audio_device:test_audio_device_module",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/audio_processing",
        "//modules/congestion_controller/goog_cc:test_goog_cc_printer",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:mock_rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:net_helper",
        "//rtc_base:refcount",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:rtc_stats_counters",
        "//rtc_base:safe_minmax",
        "//rtc_base:socket_address",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//test:fake_video_codecs",
        "//test:fileutils",
        "//test:frame_generator_capturer",
        "//test:test_common",
        "//test:test_support",
        "//test:test_video_capturer",
        "//test:video_test_common",
        "//test:video_test_constants",
        "//test/logging:log_writer",
        "//test/network:emulated_network",
        "//test/network:simulated_network",
        "//test/scenario:column_printer",
        "//test/time_controller",
        "//video/config:streams_config",
    ] + platform_select(
        arm64 = ["//modules/video_coding:objc_codec_factory_helper"],
        linux = [],
        windows = [],
    ),
)

cc_library(
    name = "scenario_unittests",
    testonly = 1,
    srcs = [
        "performance_stats_unittest.cc",
        "probing_test.cc",
        "scenario_unittest.cc",
        "stats_collection_unittest.cc",
        "video_stream_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:difficult_photo_1850_1110.yuv",
        "//resources:foreman_cif.yuv",
        "//resources:photo_1850_1110.yuv",
        "//resources:presentation_1850_1110.yuv",
        "//resources:web_screenshot_1850_1110.yuv",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_googletest//:gtest",
        "//api/test/network_emulation",
        "//api/test/network_emulation:create_cross_traffic",
        "//logging:mocks",
        "//rtc_base:checks",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:test_support",
        "//test/logging:log_writer",
        "//test/scenario",
    ],
)
