# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

load("//:build_defs.bzl", "platform_select")

package(features = [
    "-parse_headers",
])

licenses(["notice"])

cc_library(
    name = "test",
    testonly = 1,
    data = [
        "//resources:difficult_photo_1850_1110.yuv",
        "//resources:foreman_cif.yuv",
        "//resources:foreman_cif_short.yuv",
        "//resources:pc_quality_smoke_test_alice_source.wav",
        "//resources:pc_quality_smoke_test_bob_source.wav",
        "//resources:photo_1850_1110.yuv",
        "//resources:presentation_1850_1110.yuv",
        "//resources:video_coding/frame-ethernet-ii.pcap",
        "//resources:video_coding/frame-loopback.pcap",
        "//resources:video_coding/pltype103.rtp",
        "//resources:video_coding/pltype103_header_only.rtp",
        "//resources:video_coding/ssrcs-2.pcap",
        "//resources:video_coding/ssrcs-3.pcap",
        "//resources:web_screenshot_1850_1110.yuv",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//test:copy_to_file_audio_capturer",
        "//test:rtp_test_utils",
        "//test:test_common",
        "//test:test_main",
        "//test:test_renderer",
        "//test:test_renderer_generic",
        "//test:test_support",
        "//test:test_support_unittests",
        "//test:test_video_capturer",
        "//test:video_test_common",
        "//test/pc/e2e",
    ] + platform_select(
        arm64 = ["//test:test_renderer_objc"],
        linux = [],
        windows = [],
    ),
)

cc_library(
    name = "frame_generator_impl",
    testonly = 1,
    srcs = [
        "frame_generator.cc",
        "testsupport/ivf_video_frame_generator.cc",
    ],
    hdrs = [
        "frame_generator.h",
        "testsupport/ivf_video_frame_generator.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//api:__pkg__",
        "//test:__pkg__",
    ],
    deps = [
        "//api:frame_generator_api",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/environment",
        "//api/video:encoded_image",
        "//api/video:video_frame",
        "//api/video:video_frame_i010",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//common_video",
        "//media:media_constants",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//modules/video_coding/codecs/av1:dav1d_decoder",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:logging",
        "//rtc_base:random",
        "//rtc_base:rtc_event",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:file_wrapper",
        "//system_wrappers",
        "//test:frame_utils",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "y4m_frame_generator",
    testonly = 1,
    srcs = ["testsupport/y4m_frame_generator.cc"],
    hdrs = ["testsupport/y4m_frame_generator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:frame_generator_api",
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//rtc_base:checks",
        "//test:video_test_support",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "frame_utils",
    testonly = 1,
    srcs = ["frame_utils.cc"],
    hdrs = ["frame_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:scoped_refptr",
        "//api/video:video_frame",
    ],
)

cc_library(
    name = "test_video_capturer",
    testonly = 1,
    srcs = ["test_video_capturer.cc"],
    hdrs = ["test_video_capturer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//media:video_adapter",
        "//media:video_broadcaster",
        "//rtc_base/synchronization:mutex",
    ],
)

cc_library(
    name = "create_frame_generator_capturer",
    testonly = 1,
    srcs = ["create_frame_generator_capturer.cc"],
    hdrs = ["create_frame_generator_capturer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:create_frame_generator",
        "//api:frame_generator_api",
        "//api/task_queue",
        "//api/units:time_delta",
        "//rtc_base:checks",
        "//system_wrappers",
        "//test:fileutils",
        "//test:frame_generator_capturer",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "frame_generator_capturer",
    testonly = 1,
    srcs = ["frame_generator_capturer.cc"],
    hdrs = ["frame_generator_capturer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:frame_generator_api",
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//test:test_video_capturer",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "video_test_common",
    testonly = 1,
    srcs = [
        "fake_texture_frame.cc",
        "frame_forwarder.cc",
        "mappable_native_buffer.cc",
    ],
    hdrs = [
        "fake_texture_frame.h",
        "fake_videorenderer.h",
        "frame_forwarder.h",
        "mappable_native_buffer.h",
        "video_codec_settings.h",
        "video_decoder_proxy_factory.h",
        "video_encoder_nullable_proxy_factory.h",
        "video_encoder_proxy_factory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:create_frame_generator",
        "//api:frame_generator_api",
        "//api:scoped_refptr",
        "//api/environment",
        "//api/task_queue",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//common_video",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:logging",
        "//rtc_base:refcount",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//test:create_frame_generator_capturer",
        "//test:fileutils",
        "//test:frame_utils",
        "//test:scoped_key_value_config",
        "//test:test_video_capturer",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "audio_test_common",
    testonly = 1,
    hdrs = [
        "audio_decoder_proxy_factory.h",
        "function_audio_decoder_factory.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//api/audio_codecs:audio_codecs_api",
        "//rtc_base:checks",
        "@com_google_absl//absl/memory",
    ],
)

objc_library(
    name = "video_test_mac",
    testonly = 1,
    srcs = ["mac_capturer.mm"],
    hdrs = ["mac_capturer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-Wimplicit-retain-self",
        "-Wmissing-field-initializers",
        "-Wstrict-overflow",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    includes = [
        "../sdk/objc",
        "../sdk/objc/base",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//modules/video_capture:video_capture_module",
        "//rtc_base:logging",
        "//rtc_base:threading",
        "//sdk:base_objc",
        "//sdk:native_api",
        "//sdk:native_video",
        "//sdk:videocapture_objc",
        "//test:test_video_capturer",
        "//test:video_test_common",
    ],
)

cc_library(
    name = "platform_video_capturer",
    testonly = 1,
    srcs = [
        "platform_video_capturer.cc",
    ] + platform_select(
        arm64 = [],
        linux = ["vcm_capturer.cc"],
        windows = ["vcm_capturer.cc"],
    ),
    hdrs = [
        "platform_video_capturer.h",
    ] + platform_select(
        arm64 = [],
        linux = ["vcm_capturer.h"],
        windows = ["vcm_capturer.h"],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/video_capture:video_capture_module",
        "//test:test_video_capturer",
        "//test:video_test_common",
        "@com_google_absl//absl/memory",
    ] + platform_select(
        arm64 = ["//test:video_test_mac"],
        linux = [
            "//api:scoped_refptr",
            "//rtc_base:checks",
            "//rtc_base:logging",
            "//test:scoped_key_value_config",
        ],
        windows = [
            "//api:scoped_refptr",
            "//rtc_base:checks",
            "//rtc_base:logging",
            "//test:scoped_key_value_config",
        ],
    ),
)

cc_library(
    name = "rtp_test_utils",
    testonly = 1,
    srcs = [
        "rtcp_packet_parser.cc",
        "rtp_file_reader.cc",
        "rtp_file_writer.cc",
    ],
    hdrs = [
        "rtcp_packet_parser.h",
        "rtp_file_reader.h",
        "rtp_file_writer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api:rtp_parameters",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:arch",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "field_trial",
    testonly = 1,
    srcs = ["field_trial.cc"],
    hdrs = ["field_trial.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//rtc_base:checks",
        "//system_wrappers:field_trial",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "explicit_key_value_config",
    srcs = ["explicit_key_value_config.cc"],
    hdrs = ["explicit_key_value_config.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:field_trials_registry",
        "//rtc_base:checks",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "scoped_key_value_config",
    testonly = 1,
    srcs = ["scoped_key_value_config.cc"],
    hdrs = ["scoped_key_value_config.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:field_trials_registry",
        "//rtc_base:checks",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "perf_test",
    testonly = 1,
    srcs = [
        "testsupport/perf_test.cc",
        "testsupport/perf_test_histogram_writer.cc",
    ],
    hdrs = [
        "testsupport/perf_test.h",
        "testsupport/perf_test_histogram_writer.h",
        "testsupport/perf_test_result_writer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api/numerics",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:logging",
        "//rtc_base:rtc_numerics",
        "//rtc_base:stringutils",
        "//rtc_base/synchronization:mutex",
        "//test:fileutils",
        "//third_party/catapult/tracing:histogram",
        "//third_party/catapult/tracing:reserved_infos",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "test_support",
    testonly = 1,
    hdrs = [
        "gmock.h",
        "gtest.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//rtc_base:ignore_wundef",
        "@com_google_googletest//:gtest",
    ],
)

cc_library(
    name = "fixed_fps_video_frame_writer_adapter",
    testonly = 1,
    srcs = ["testsupport/fixed_fps_video_frame_writer_adapter.cc"],
    hdrs = ["testsupport/fixed_fps_video_frame_writer_adapter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/test/video:video_frame_writer",
        "//api/units:time_delta",
        "//api/video:video_frame",
        "//rtc_base:checks",
        "//system_wrappers",
        "//test:video_test_support",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "video_test_support",
    testonly = 1,
    srcs = [
        "testsupport/jpeg_frame_writer.cc",
        "testsupport/video_frame_writer.cc",
        "testsupport/y4m_frame_reader.cc",
        "testsupport/y4m_frame_writer.cc",
        "testsupport/yuv_frame_reader.cc",
        "testsupport/yuv_frame_writer.cc",
    ],
    hdrs = [
        "testsupport/frame_reader.h",
        "testsupport/frame_writer.h",
        "testsupport/mock/mock_frame_reader.h",
        "testsupport/video_frame_writer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/test/video:video_frame_writer",
        "//api/video:encoded_image",
        "//api/video:resolution",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//common_video",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:logging",
        "//rtc_base:rtc_event",
        "//rtc_base:stringutils",
        "//rtc_base/system:file_wrapper",
        "//test:fileutils",
        "//test:frame_utils",
        "//test:test_support",
        "//test:video_test_common",
        "@com_google_absl//absl/types:optional",
        "@libjpeg_turbo//:jpeg",
    ],
)

cc_library(
    name = "resources_dir_flag",
    testonly = 1,
    srcs = ["testsupport/resources_dir_flag.cc"],
    hdrs = ["testsupport/resources_dir_flag.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = ["@com_google_absl//absl/flags:flag"],
)

cc_library(
    name = "test_main_lib",
    testonly = 1,
    srcs = ["test_main_lib.cc"],
    hdrs = ["test_main_lib.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/test/metrics:chrome_perf_dashboard_metrics_exporter",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metrics_exporter",
        "//api/test/metrics:metrics_set_proto_file_exporter",
        "//api/test/metrics:print_result_proxy_metrics_exporter",
        "//api/test/metrics:stdout_metrics_exporter",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
        "//test:field_trial",
        "//test:perf_test",
        "//test:resources_dir_flag",
        "//test:test_flags",
        "//test:test_support",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@perfetto//:libperfetto_c",
    ] + platform_select(
        arm64 = [],
        linux = [],
        windows = ["//rtc_base:win32_socket_init"],
    ),
)

cc_library(
    name = "test_main",
    testonly = 1,
    srcs = ["test_main.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//test:test_main_lib",
        "//test:test_support",
        "@com_google_absl//absl/debugging:failure_signal_handler",
        "@com_google_absl//absl/debugging:symbolize",
        "@com_google_absl//absl/flags:parse",
    ],
)

cc_library(
    name = "test_support_test_artifacts",
    testonly = 1,
    srcs = ["testsupport/test_artifacts.cc"],
    hdrs = ["testsupport/test_artifacts.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//rtc_base:logging",
        "//rtc_base/system:file_wrapper",
        "//test:fileutils",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
    ],
)

cc_library(
    name = "fixed_fps_video_frame_writer_adapter_test",
    testonly = 1,
    srcs = ["testsupport/fixed_fps_video_frame_writer_adapter_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:video_frame",
        "//rtc_base/synchronization:mutex",
        "//test:fixed_fps_video_frame_writer_adapter",
        "//test:test_support",
        "//test:video_test_support",
        "//test/time_controller",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_test(
    name = "test_support_unittests",
    srcs = [
        "call_config_utils_unittest.cc",
        "direct_transport_unittest.cc",
        "fake_vp8_encoder_unittest.cc",
        "frame_generator_capturer_unittest.cc",
        "frame_generator_unittest.cc",
        "rtp_file_reader_unittest.cc",
        "rtp_file_writer_unittest.cc",
        "run_loop_unittest.cc",
        "testsupport/ivf_video_frame_generator_unittest.cc",
        # "testsupport/perf_test_histogram_writer_unittest.cc",
        "testsupport/perf_test_unittest.cc",
        "testsupport/test_artifacts_unittest.cc",
        "testsupport/video_frame_writer_unittest.cc",
        "testsupport/y4m_frame_generator_test.cc",
        "testsupport/y4m_frame_reader_unittest.cc",
        "testsupport/y4m_frame_writer_unittest.cc",
        "testsupport/yuv_frame_reader_unittest.cc",
        "testsupport/yuv_frame_writer_unittest.cc",
        "video_codec_tester_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:difficult_photo_1850_1110.yuv",
        "//resources:foreman_cif.yuv",
        "//resources:foreman_cif_short.yuv",
        "//resources:pc_quality_smoke_test_alice_source.wav",
        "//resources:pc_quality_smoke_test_bob_source.wav",
        "//resources:photo_1850_1110.yuv",
        "//resources:presentation_1850_1110.yuv",
        "//resources:video_coding/frame-ethernet-ii.pcap",
        "//resources:video_coding/frame-loopback.pcap",
        "//resources:video_coding/pltype103.rtp",
        "//resources:video_coding/pltype103_header_only.rtp",
        "//resources:video_coding/ssrcs-2.pcap",
        "//resources:video_coding/ssrcs-3.pcap",
        "//resources:web_screenshot_1850_1110.yuv",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api:create_frame_generator",
        "//api:create_simulcast_test_fixture_api",
        "//api:frame_generator_api",
        "//api:mock_video_codec_factory",
        "//api:mock_video_decoder",
        "//api:mock_video_encoder",
        "//api:scoped_refptr",
        "//api:simulcast_test_fixture_api",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/task_queue",
        "//api/task_queue:task_queue_test",
        "//api/test/video:function_video_factory",
        "//api/test/video:video_frame_writer",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:frequency",
        "//api/units:time_delta",
        "//api/video:encoded_image",
        "//api/video:video_frame",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//call:fake_network",
        "//call:video_stream_api",
        "//common_video",
        "//media:codec",
        "//media:media_constants",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_capture:video_capture_internal_impl",
        "//modules/video_coding:simulcast_test_fixture_impl",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base:criticalsection",
        "//rtc_base:rtc_event",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:file_wrapper",
        "//test:call_config_utils",
        "//test:copy_to_file_audio_capturer_unittest",
        "//test:create_frame_generator_capturer",
        "//test:direct_transport",
        "//test:fake_video_codecs",
        "//test:fileutils",
        "//test:fixed_fps_video_frame_writer_adapter_test",
        "//test:frame_generator_capturer",
        "//test:frame_generator_impl",
        "//test:perf_test",
        "//test:rtc_expect_death",
        "//test:rtp_test_utils",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_main",
        "//test:test_support",
        "//test:test_support_test_artifacts",
        "//test:video_codec_tester",
        "//test:video_test_common",
        "//test:video_test_support",
        "//test:y4m_frame_generator",
        "//test/jitter:jitter_unittests",
        "//test/pc/e2e:e2e_unittests",
        "//test/pc/e2e/analyzer/video:video_analyzer_unittests",
        "//test/pc/e2e/analyzer/video/dvqa:dvqa_unittests",
        "//test/peer_scenario/tests",
        "//test/scenario:scenario_unittests",
        "//test/time_controller",
        "//test/time_controller:time_controller_unittests",
        "//third_party/catapult/tracing:histogram",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@libyuv",
    ],
)

objc_library(
    name = "fileutils_mac_objc",
    srcs = ["testsupport/mac_file_utils.mm"],
    hdrs = ["testsupport/mac_file_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//test:__pkg__"],
    deps = ["//rtc_base:checks"],
)

cc_library(
    name = "fileutils",
    testonly = 1,
    srcs = ["testsupport/file_utils.cc"],
    hdrs = ["testsupport/file_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//test:fileutils_override_api",
        "//test:fileutils_override_impl",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ] + platform_select(
        arm64 = ["//test:fileutils_mac_objc"],
        linux = [],
        windows = ["//rtc_base:win32"],
    ),
)

cc_library(
    name = "fileutils_override_api",
    testonly = 1,
    hdrs = ["testsupport/file_utils_override.h"],
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/strings"],
)

cc_library(
    name = "fileutils_override_impl",
    testonly = 1,
    srcs = ["testsupport/file_utils_override.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//test:__pkg__"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:stringutils",
        "//test:fileutils_override_api",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ] + platform_select(
        arm64 = ["//test:fileutils_mac_objc"],
        linux = [],
        windows = ["//rtc_base:win32"],
    ),
)

cc_library(
    name = "run_test",
    testonly = 1,
    visibility = ["//:__subpackages__"],
    deps = platform_select(
        arm64 = ["//test:run_test_objc"],
        linux = ["//test:run_test_generic"],
        windows = ["//test:run_test_generic"],
    ),
)

cc_library(
    name = "run_test_interface",
    hdrs = ["run_test.h"],
    visibility = ["//:__subpackages__"],
)

objc_library(
    name = "run_test_objc",
    testonly = 1,
    srcs = ["mac/run_test.mm"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//:__subpackages__"],
    deps = ["//test:run_test_interface"],
)

cc_library(
    name = "run_test_generic",
    testonly = 1,
    srcs = ["run_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//:__subpackages__",
        "//test:__pkg__",
    ],
    deps = ["//test:run_test_interface"],
)

cc_library(
    name = "fileutils_unittests",
    testonly = 1,
    srcs = ["testsupport/file_utils_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//test:__pkg__"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base:ssl",
        "//test:fileutils",
        "//test:test_support",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "direct_transport",
    testonly = 1,
    srcs = ["direct_transport.cc"],
    hdrs = ["direct_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:rtp_parameters",
        "//api:sequence_checker",
        "//api:simulated_network_api",
        "//api:transport_api",
        "//api/task_queue",
        "//api/units:time_delta",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:simulated_packet_receiver",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "@com_google_absl//absl/memory",
    ],
)

cc_library(
    name = "fake_video_codecs",
    srcs = [
        "configurable_frame_size_encoder.cc",
        "fake_decoder.cc",
        "fake_encoder.cc",
        "fake_vp8_decoder.cc",
        "fake_vp8_encoder.cc",
    ],
    hdrs = [
        "configurable_frame_size_encoder.h",
        "fake_decoder.h",
        "fake_encoder.h",
        "fake_vp8_decoder.h",
        "fake_vp8_encoder.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:fec_controller_api",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/environment",
        "//api/task_queue",
        "//api/video:encoded_image",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:vp8_temporal_layers_factory",
        "//modules/video_coding:codec_globals_headers",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:macromagic",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "null_transport",
    testonly = 1,
    srcs = ["null_transport.cc"],
    hdrs = ["null_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//api:transport_api"],
)

cc_library(
    name = "encoder_settings",
    testonly = 1,
    srcs = ["encoder_settings.cc"],
    hdrs = ["encoder_settings.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:scoped_refptr",
        "//api/video_codecs:video_codecs_api",
        "//call:rtp_interfaces",
        "//call:video_stream_api",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "rtc_expect_death",
    testonly = 1,
    hdrs = ["testsupport/rtc_expect_death.h"],
    visibility = ["//:__subpackages__"],
    deps = ["//test:test_support"],
)

cc_library(
    name = "run_loop",
    testonly = 1,
    srcs = ["run_loop.cc"],
    hdrs = ["run_loop.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/task_queue",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "@com_google_absl//absl/functional:any_invocable",
    ],
)

cc_library(
    name = "video_test_constants",
    testonly = 1,
    hdrs = ["video_test_constants.h"],
    visibility = ["//:__subpackages__"],
    deps = ["//api/units:time_delta"],
)

cc_library(
    name = "mock_transport",
    testonly = 1,
    srcs = ["mock_transport.cc"],
    hdrs = ["mock_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:transport_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "test_renderer",
    testonly = 1,
    visibility = ["//:__subpackages__"],
    deps = [
        "//test:test_renderer_generic",
    ] + platform_select(
        arm64 = ["//test:test_renderer_objc"],
        linux = [],
        windows = [],
    ),
)

objc_library(
    name = "test_renderer_objc",
    testonly = 1,
    srcs = ["mac/video_renderer_mac.mm"],
    hdrs = ["mac/video_renderer_mac.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "GL_SILENCE_DEPRECATION",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//test:test_renderer_generic",
        "@apple_frameworks//:Cocoa",
        "@apple_frameworks//:CoreVideo",
        "@apple_frameworks//:OpenGL",
    ],
)

cc_library(
    name = "test_renderer_generic",
    testonly = 1,
    srcs = [
        "video_renderer.cc",
    ] + platform_select(
        arm64 = ["gl/gl_renderer.cc"],
        linux = [
            "gl/gl_renderer.cc",
            "linux/glx_renderer.cc",
            "linux/video_renderer_linux.cc",
        ],
        windows = ["win/d3d_renderer.cc"],
    ),
    hdrs = [
        "video_renderer.h",
    ] + platform_select(
        arm64 = ["gl/gl_renderer.h"],
        linux = [
            "gl/gl_renderer.h",
            "linux/glx_renderer.h",
        ],
        windows = ["win/d3d_renderer.h"],
    ),
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "GL_SILENCE_DEPRECATION",
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/video:video_frame",
        "//common_video",
        "//rtc_base:checks",
    ] + platform_select(
        arm64 = [],
        linux = [
            "@GL//:GLX_headers",
            "@GL//:OpenGL_headers",
            "@Xorg//:Xorg_static",
            "@Xorg//:libX11_static",
            "@Xorg//:libXcomposite_static",
            "@Xorg//:libXdamage_static",
            "@Xorg//:libXfixes_static",
            "@Xorg//:libXrandr_static",
            "@Xorg//:libXtst_static",
            "@mesa//:GL",
        ],
        windows = ["//api:scoped_refptr"],
    ),
)

cc_library(
    name = "audio_codec_mocks",
    testonly = 1,
    srcs = [
        "mock_audio_decoder.cc",
        "mock_audio_encoder.cc",
    ],
    hdrs = [
        "mock_audio_decoder.h",
        "mock_audio_decoder_factory.h",
        "mock_audio_encoder.h",
        "mock_audio_encoder_factory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//test:test_support",
    ],
)

cc_library(
    name = "copy_to_file_audio_capturer",
    testonly = 1,
    srcs = ["testsupport/copy_to_file_audio_capturer.cc"],
    hdrs = ["testsupport/copy_to_file_audio_capturer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//common_audio",
        "//modules/audio_device:test_audio_device_module",
        "//rtc_base:buffer",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "copy_to_file_audio_capturer_unittest",
    testonly = 1,
    srcs = ["testsupport/copy_to_file_audio_capturer_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//modules/audio_device:test_audio_device_module",
        "//test:copy_to_file_audio_capturer",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_library(
    name = "test_flags",
    testonly = 1,
    srcs = ["test_flags.cc"],
    hdrs = ["test_flags.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/flags:flag"],
)

cc_library(
    name = "test_common",
    testonly = 1,
    srcs = [
        "call_test.cc",
        "drifting_clock.cc",
        "layer_filtering_transport.cc",
    ],
    hdrs = [
        "call_test.h",
        "drifting_clock.h",
        "layer_filtering_transport.h",
        "rtp_rtcp_observer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api:create_frame_generator",
        "//api:frame_generator_api",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:simulated_network_api",
        "//api:transport_api",
        "//api/audio:audio_device",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/test/video:function_video_factory",
        "//api/transport:field_trial_based_config",
        "//api/units:time_delta",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//call",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:simulated_packet_receiver",
        "//call:video_stream_api",
        "//modules/audio_device:test_audio_device_module",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/rtp_rtcp:rtp_video_header",
        "//modules/video_capture:video_capture_internal_impl",
        "//modules/video_coding:codec_globals_headers",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:rtc_event",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//test:direct_transport",
        "//test:encoder_settings",
        "//test:fake_video_codecs",
        "//test:fileutils",
        "//test:frame_generator_capturer",
        "//test:mock_transport",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_flags",
        "//test:test_support",
        "//test:test_video_capturer",
        "//test:video_test_common",
        "//test:video_test_constants",
        "//test/network:simulated_network",
        "//video/config:encoder_config",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "call_config_utils",
    testonly = 1,
    srcs = ["call_config_utils.cc"],
    hdrs = ["call_config_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//call:video_stream_api",
        "//rtc_base:rtc_json",
    ],
)

cc_library(
    name = "fake_encoded_frame",
    testonly = 1,
    srcs = ["fake_encoded_frame.cc"],
    hdrs = ["fake_encoded_frame.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:rtp_packet_info",
        "//api/video:encoded_frame",
        "//api/video:encoded_image",
        "//api/video:video_frame_type",
        "//api/video:video_rtp_headers",
        "//test:test_support",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "video_codec_tester",
    testonly = 1,
    srcs = ["video_codec_tester.cc"],
    hdrs = ["video_codec_tester.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api/environment",
        "//api/numerics",
        "//api/test/metrics:metric",
        "//api/test/metrics:metrics_logger",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:frequency",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:encoded_image",
        "//api/video:resolution",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//media:media_constants",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp9_helpers",
        "//modules/video_coding/codecs/av1:av1_svc_config",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:rtc_event",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//test:fileutils",
        "//test:scoped_key_value_config",
        "//test:video_test_support",
        "//video/config:streams_config",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@libyuv",
    ],
)
