# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "video_stream_encoder_interface",
    hdrs = [
        "video_stream_encoder_interface.h",
        "video_stream_encoder_observer.h",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:fec_controller_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/adaptation:resource_adaptation_api",
        "//api/units:data_rate",
        "//api/video:video_adaptation",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_layers_allocation",
        "//api/video_codecs:video_codecs_api",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "video",
    srcs = [
        "buffered_frame_decryptor.cc",
        "call_stats2.cc",
        "encoder_rtcp_feedback.cc",
        "quality_limitation_reason_tracker.cc",
        "receive_statistics_proxy.cc",
        "report_block_stats.cc",
        "rtp_streams_synchronizer2.cc",
        "rtp_video_stream_receiver2.cc",
        "send_delay_stats.cc",
        "send_statistics_proxy.cc",
        "stats_counter.cc",
        "stream_synchronization.cc",
        "transport_adapter.cc",
        "video_quality_observer2.cc",
        "video_receive_stream2.cc",
        "video_send_stream_impl.cc",
        "video_stream_decoder2.cc",
    ],
    hdrs = [
        "buffered_frame_decryptor.h",
        "call_stats2.h",
        "encoder_rtcp_feedback.h",
        "quality_limitation_reason_tracker.h",
        "receive_statistics_proxy.h",
        "report_block_stats.h",
        "rtp_streams_synchronizer2.h",
        "rtp_video_stream_receiver2.h",
        "send_delay_stats.h",
        "send_statistics_proxy.h",
        "stats_counter.h",
        "stream_synchronization.h",
        "transport_adapter.h",
        "video_quality_observer2.h",
        "video_receive_stream2.h",
        "video_send_stream_impl.h",
        "video_stream_decoder2.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:bitrate_allocation",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:frame_transformer_interface",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:transport_api",
        "//api/adaptation:resource_adaptation_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:options",
        "//api/environment",
        "//api/metronome",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:data_rate",
        "//api/units:frequency",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_frame_type",
        "//api/video:video_layers_allocation",
        "//api/video:video_rtp_headers",
        "//api/video:video_stream_encoder",
        "//api/video_codecs:video_codecs_api",
        "//call:bitrate_allocator",
        "//call:call_interfaces",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//call:rtp_sender",
        "//call:video_stream_api",
        "//common_video",
        "//media:media_constants",
        "//media:rtc_media_base",
        "//media:rtc_sdp_video_format_utils",
        "//modules:module_api",
        "//modules:module_api_public",
        "//modules/pacing",
        "//modules/remote_bitrate_estimator",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/rtp_rtcp:rtp_video_header",
        "//modules/video_coding",
        "//modules/video_coding:h264_sprop_parameter_sets",
        "//modules/video_coding:h26x_packet_buffer",
        "//modules/video_coding:nack_requester",
        "//modules/video_coding:packet_buffer",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_vp9_helpers",
        "//modules/video_coding/timing:timing_module",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:histogram_percentile_counter",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mod_ops",
        "//rtc_base:moving_max_counter",
        "//rtc_base:platform_thread",
        "//rtc_base:rate_statistics",
        "//rtc_base:rate_tracker",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:sample_counter",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:alr_experiment",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/experiments:keyframe_interval_settings_experiment",
        "//rtc_base/experiments:min_video_bitrate_experiment",
        "//rtc_base/experiments:normalize_simulcast_size_experiment",
        "//rtc_base/experiments:rate_control_settings",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
        "//video:frame_cadence_adapter",
        "//video:frame_dumping_decoder",
        "//video:task_queue_frame_decode_scheduler",
        "//video:unique_timestamp_counter",
        "//video:video_stream_buffer_controller",
        "//video:video_stream_encoder_impl",
        "//video:video_stream_encoder_interface",
        "//video/adaptation:video_adaptation",
        "//video/config:encoder_config",
        "//video/render:incoming_video_stream",
    ],
)

cc_library(
    name = "frame_dumping_decoder",
    srcs = ["frame_dumping_decoder.cc"],
    hdrs = ["frame_dumping_decoder.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/video:encoded_frame",
        "//api/video:encoded_image",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base/system:file_wrapper",
    ],
)

cc_library(
    name = "frame_dumping_encoder",
    srcs = ["frame_dumping_encoder.cc"],
    hdrs = ["frame_dumping_encoder.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:field_trials_view",
        "//api:sequence_checker",
        "//api/video:encoded_frame",
        "//api/video:encoded_image",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/system:file_wrapper",
    ],
)

cc_library(
    name = "frame_cadence_adapter",
    srcs = ["frame_cadence_adapter.cc"],
    hdrs = ["frame_cadence_adapter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/cleanup",
        "//api:field_trials_view",
        "//api:sequence_checker",
        "//api/metronome",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:video_frame",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:rate_statistics",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:unused",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "video_stream_buffer_controller",
    srcs = ["video_stream_buffer_controller.cc"],
    hdrs = ["video_stream_buffer_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/types:optional",
        "//api:field_trials_view",
        "//api:sequence_checker",
        "//api/metronome",
        "//api/task_queue",
        "//api/units:data_size",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:encoded_frame",
        "//api/video:frame_buffer",
        "//api/video:video_rtp_headers",
        "//modules/video_coding",
        "//modules/video_coding:frame_helpers",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding/timing:inter_frame_delay_variation_calculator",
        "//modules/video_coding/timing:jitter_estimator",
        "//modules/video_coding/timing:timing_module",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//video:decode_synchronizer",
        "//video:frame_decode_scheduler",
        "//video:frame_decode_timing",
        "//video:task_queue_frame_decode_scheduler",
        "//video:video_receive_stream_timeout_tracker",
    ],
)

cc_library(
    name = "frame_decode_scheduler",
    hdrs = ["frame_decode_scheduler.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api/units:timestamp",
        "//video:frame_decode_timing",
    ],
)

cc_library(
    name = "task_queue_frame_decode_scheduler",
    srcs = ["task_queue_frame_decode_scheduler.cc"],
    hdrs = ["task_queue_frame_decode_scheduler.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:timestamp",
        "//rtc_base:checks",
        "//system_wrappers",
        "//video:frame_decode_scheduler",
        "//video:frame_decode_timing",
    ],
)

cc_library(
    name = "frame_decode_timing",
    srcs = ["frame_decode_timing.cc"],
    hdrs = ["frame_decode_timing.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//modules/video_coding/timing:timing_module",
        "//rtc_base:logging",
        "//system_wrappers",
    ],
)

cc_library(
    name = "video_receive_stream_timeout_tracker",
    srcs = ["video_receive_stream_timeout_tracker.cc"],
    hdrs = ["video_receive_stream_timeout_tracker.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//rtc_base:logging",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
    ],
)

cc_library(
    name = "decode_synchronizer",
    srcs = ["decode_synchronizer.cc"],
    hdrs = ["decode_synchronizer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:sequence_checker",
        "//api/metronome",
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//video:frame_decode_scheduler",
        "//video:frame_decode_timing",
    ],
)

cc_library(
    name = "video_stream_encoder_impl",
    srcs = [
        "alignment_adjuster.cc",
        "encoder_bitrate_adjuster.cc",
        "encoder_overshoot_detector.cc",
        "frame_encode_metadata_writer.cc",
        "video_source_sink_controller.cc",
        "video_stream_encoder.cc",
    ],
    hdrs = [
        "alignment_adjuster.h",
        "encoder_bitrate_adjuster.h",
        "encoder_overshoot_detector.h",
        "frame_encode_metadata_writer.h",
        "video_source_sink_controller.h",
        "video_stream_encoder.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/types:optional",
        "//api:field_trials_view",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:sequence_checker",
        "//api/adaptation:resource_adaptation_api",
        "//api/environment",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:data_rate",
        "//api/video:encoded_image",
        "//api/video:render_resolution",
        "//api/video:video_adaptation",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_layers_allocation",
        "//api/video:video_rtp_headers",
        "//api/video:video_stream_encoder",
        "//api/video_codecs:video_codecs_api",
        "//call/adaptation:resource_adaptation",
        "//common_video",
        "//media:media_channel",
        "//modules:module_api_public",
        "//modules/video_coding",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_vp9_helpers",
        "//modules/video_coding/svc:scalability_mode_util",
        "//modules/video_coding/svc:scalability_structures",
        "//modules/video_coding/svc:svc_rate_allocator",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:race_checker",
        "//rtc_base:rate_statistics",
        "//rtc_base:refcount",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:balanced_degradation_settings",
        "//rtc_base/experiments:encoder_info_settings",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/experiments:quality_scaler_settings",
        "//rtc_base/experiments:quality_scaling_experiment",
        "//rtc_base/experiments:rate_control_settings",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//system_wrappers:metrics",
        "//video:frame_cadence_adapter",
        "//video:frame_dumping_encoder",
        "//video:video_stream_encoder_interface",
        "//video/adaptation:video_adaptation",
        "//video/config:encoder_config",
        "//video/config:streams_config",
    ],
)

cc_library(
    name = "unique_timestamp_counter",
    srcs = ["unique_timestamp_counter.cc"],
    hdrs = ["unique_timestamp_counter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "video_mocks",
    testonly = 1,
    hdrs = ["test/mock_video_stream_encoder.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/video:video_stream_encoder",
        "//test:test_support",
        "//video:video_stream_encoder_interface",
    ],
)

cc_library(
    name = "video_quality_test",
    testonly = 1,
    srcs = [
        "video_analyzer.cc",
        "video_quality_test.cc",
    ],
    hdrs = [
        "video_analyzer.h",
        "video_quality_test.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//api:__pkg__",
        "//video:__pkg__",
    ],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "//api:create_frame_generator",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:frame_generator_api",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_event_log_output_file",
        "//api:rtp_sender_interface",
        "//api:test_dependency_factory",
        "//api:video_quality_test_fixture_api",
        "//api/audio:audio_device",
        "//api/environment",
        "//api/numerics",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metric",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//call:fake_network",
        "//common_video",
        "//media:media_constants",
        "//media:rtc_audio_video",
        "//media:rtc_internal_video_codecs",
        "//media:rtc_simulcast_encoder_adapter",
        "//modules/audio_device:audio_device_module_from_input_and_output",
        "//modules/audio_device:windows_core_audio_utility",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//test:fake_video_codecs",
        "//test:fileutils",
        "//test:platform_video_capturer",
        "//test:rtp_test_utils",
        "//test:test_common",
        "//test:test_flags",
        "//test:test_renderer",
        "//test:test_renderer_generic",
        "//test:test_support",
        "//test:test_support_test_artifacts",
        "//test:video_test_common",
        "//test:video_test_constants",
        "//test:video_test_support",
        "//test/network:simulated_network",
        "//video:frame_dumping_decoder",
        "//video/config:streams_config",
    ] + platform_select(
        arm64 = [
            "//test:test_renderer_objc",
            "//test:video_test_mac",
        ],
        linux = [],
        windows = ["//rtc_base/win:scoped_com_initializer"],
    ),
)

cc_library(
    name = "video_full_stack_tests",
    testonly = 1,
    srcs = ["full_stack_tests.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:simulated_network_api",
        "//api:test_dependency_factory",
        "//api:video_quality_test_fixture_api",
        "//api/units:data_rate",
        "//api/video_codecs:video_codecs_api",
        "//modules/pacing",
        "//modules/video_coding:webrtc_vp9",
        "//rtc_base/experiments:alr_experiment",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:fileutils",
        "//test:test_common",
        "//test:test_support",
        "//video:video_quality_test",
        "//video/config:encoder_config",
    ],
    alwayslink = 1,
)

cc_library(
    name = "video_pc_full_stack_tests",
    testonly = 1,
    srcs = ["pc_full_stack_tests.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:create_network_emulation_manager",
        "//api:create_peer_connection_quality_test_frame_generator",
        "//api:create_peerconnection_quality_test_fixture",
        "//api:frame_generator_api",
        "//api:media_stream_interface",
        "//api:network_emulation_manager_api",
        "//api:peer_connection_quality_test_fixture_api",
        "//api:simulated_network_api",
        "//api:time_controller",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/pclf:media_configuration",
        "//api/test/pclf:media_quality_test_params",
        "//api/test/pclf:peer_configurer",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:webrtc_vp9",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:fileutils",
        "//test:test_support",
        "//test/network:simulated_network",
        "//test/pc/e2e:network_quality_metrics_reporter",
    ],
)

cc_library(
    name = "video_loopback_lib",
    testonly = 1,
    srcs = ["video_loopback.cc"],
    hdrs = ["video_loopback.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:simulated_network_api",
        "//api:video_quality_test_fixture_api",
        "//api/transport:bitrate_settings",
        "//api/units:data_rate",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:run_test",
        "//test:run_test_interface",
        "//test:test_common",
        "//test:test_flags",
        "//test:test_renderer",
        "//test:test_renderer_generic",
        "//test:test_support",
        "//video:video_quality_test",
    ] + platform_select(
        arm64 = [
            "//test:run_test_objc",
            "//test:test_renderer_objc",
        ],
        linux = ["//test:run_test_generic"],
        windows = ["//test:run_test_generic"],
    ),
)

cc_binary(
    name = "video_loopback",
    testonly = 1,
    srcs = ["video_loopback_main.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_ENABLE_VP9",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        linux = [
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = ["WEBRTC_WIN"],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//video:video_loopback_lib"],
)

cc_binary(
    name = "screenshare_loopback",
    testonly = 1,
    srcs = ["screenshare_loopback.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:simulated_network_api",
        "//api:video_quality_test_fixture_api",
        "//api/transport:bitrate_settings",
        "//api/units:data_rate",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:run_test",
        "//test:run_test_interface",
        "//test:test_common",
        "//test:test_flags",
        "//test:test_renderer",
        "//test:test_renderer_generic",
        "//test:test_support",
        "//video:video_quality_test",
    ] + platform_select(
        arm64 = [
            "//test:run_test_objc",
            "//test:test_renderer_objc",
        ],
        linux = ["//test:run_test_generic"],
        windows = ["//test:run_test_generic"],
    ),
)

cc_binary(
    name = "sv_loopback",
    testonly = 1,
    srcs = ["sv_loopback.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:simulated_network_api",
        "//api:video_quality_test_fixture_api",
        "//api/transport:bitrate_settings",
        "//api/units:data_rate",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:run_test",
        "//test:run_test_interface",
        "//test:test_common",
        "//test:test_flags",
        "//test:test_renderer",
        "//test:test_renderer_generic",
        "//test:test_support",
        "//video:video_quality_test",
    ] + platform_select(
        arm64 = [
            "//test:run_test_objc",
            "//test:test_renderer_objc",
        ],
        linux = ["//test:run_test_generic"],
        windows = ["//test:run_test_generic"],
    ),
)

cc_library(
    name = "video_tests",
    testonly = 1,
    srcs = [
        "alignment_adjuster_unittest.cc",
        "buffered_frame_decryptor_unittest.cc",
        "call_stats2_unittest.cc",
        "cpu_scaling_tests.cc",
        "decode_synchronizer_unittest.cc",
        "encoder_bitrate_adjuster_unittest.cc",
        "encoder_overshoot_detector_unittest.cc",
        "encoder_rtcp_feedback_unittest.cc",
        "end_to_end_tests/bandwidth_tests.cc",
        "end_to_end_tests/call_operation_tests.cc",
        "end_to_end_tests/codec_tests.cc",
        "end_to_end_tests/config_tests.cc",
        "end_to_end_tests/extended_reports_tests.cc",
        "end_to_end_tests/fec_tests.cc",
        "end_to_end_tests/frame_encryption_tests.cc",
        "end_to_end_tests/histogram_tests.cc",
        "end_to_end_tests/multi_codec_receive_tests.cc",
        "end_to_end_tests/multi_stream_tester.cc",
        "end_to_end_tests/multi_stream_tests.cc",
        "end_to_end_tests/network_state_tests.cc",
        "end_to_end_tests/resolution_bitrate_limits_tests.cc",
        "end_to_end_tests/retransmission_tests.cc",
        "end_to_end_tests/rtp_rtcp_tests.cc",
        "end_to_end_tests/ssrc_tests.cc",
        "end_to_end_tests/stats_tests.cc",
        "end_to_end_tests/transport_feedback_tests.cc",
        "frame_cadence_adapter_unittest.cc",
        "frame_decode_timing_unittest.cc",
        "frame_encode_metadata_writer_unittest.cc",
        "picture_id_tests.cc",
        "quality_limitation_reason_tracker_unittest.cc",
        "quality_scaling_tests.cc",
        "receive_statistics_proxy_unittest.cc",
        "report_block_stats_unittest.cc",
        "rtp_video_stream_receiver2_unittest.cc",
        "send_delay_stats_unittest.cc",
        "send_statistics_proxy_unittest.cc",
        "stats_counter_unittest.cc",
        "stream_synchronization_unittest.cc",
        "task_queue_frame_decode_scheduler_unittest.cc",
        "unique_timestamp_counter_unittest.cc",
        "video_receive_stream2_unittest.cc",
        "video_receive_stream_timeout_tracker_unittest.cc",
        "video_send_stream_impl_unittest.cc",
        "video_send_stream_tests.cc",
        "video_source_sink_controller_unittest.cc",
        "video_stream_buffer_controller_unittest.cc",
        "video_stream_encoder_unittest.cc",
    ],
    hdrs = ["end_to_end_tests/multi_stream_tester.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api:array_view",
        "//api:bitrate_allocation",
        "//api:create_frame_generator",
        "//api:dtmf_sender_interface",
        "//api:fake_frame_decryptor",
        "//api:fake_frame_encryptor",
        "//api:field_trials_view",
        "//api:frame_generator_api",
        "//api:libjingle_peerconnection_api",
        "//api:mock_fec_controller_override",
        "//api:mock_frame_decryptor",
        "//api:mock_frame_transformer",
        "//api:mock_video_codec_factory",
        "//api:mock_video_decoder",
        "//api:mock_video_encoder",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:simulated_network_api",
        "//api:time_controller",
        "//api:transport_api",
        "//api/adaptation:resource_adaptation_api",
        "//api/crypto:options",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/metronome/test:fake_metronome",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metric",
        "//api/test/video:function_video_factory",
        "//api/units:data_rate",
        "//api/units:frequency",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:encoded_image",
        "//api/video:recordable_encoded_frame",
        "//api/video:resolution",
        "//api/video:video_adaptation",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_frame",
        "//api/video:video_frame_type",
        "//api/video:video_layers_allocation",
        "//api/video:video_rtp_headers",
        "//api/video/test:video_frame_matchers",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:vp8_temporal_layers_factory",
        "//call:bitrate_allocator",
        "//call:call_interfaces",
        "//call:fake_network",
        "//call:mock_bitrate_allocator",
        "//call:mock_rtp_interfaces",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//call:rtp_sender",
        "//call:simulated_packet_receiver",
        "//call:video_stream_api",
        "//call/adaptation:resource_adaptation",
        "//call/adaptation:resource_adaptation_test_utilities",
        "//common_video",
        "//common_video/test:utilities",
        "//media:codec",
        "//media:media_constants",
        "//media:rtc_audio_video",
        "//media:rtc_internal_video_codecs",
        "//media:rtc_media",
        "//media:rtc_media_base",
        "//media:rtc_media_tests_utils",
        "//media:rtc_simulcast_encoder_adapter",
        "//media:video_adapter",
        "//modules:module_api_public",
        "//modules/pacing",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:mock_rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/utility",
        "//modules/video_coding",
        "//modules/video_coding:codec_globals_headers",
        "//modules/video_coding:encoded_frame",
        "//modules/video_coding:h26x_packet_buffer",
        "//modules/video_coding:packet_buffer",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//modules/video_coding:webrtc_vp9_helpers",
        # "//modules/video_coding/codecs/av1:libaom_av1_encoder",
        "//modules/video_coding/svc:scalability_mode_util",
        "//modules/video_coding/svc:scalability_structures",
        "//modules/video_coding/svc:scalable_video_controller",
        "//modules/video_coding/timing:timing_module",
        "//rtc_base:byte_buffer",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:platform_thread",
        "//rtc_base:rate_limiter",
        "//rtc_base:rate_statistics",
        "//rtc_base:refcount",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base:unique_id_generator",
        "//rtc_base/containers:flat_map",
        "//rtc_base/experiments:alr_experiment",
        "//rtc_base/experiments:encoder_info_settings",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers",
        "//system_wrappers:field_trial",
        "//system_wrappers:metrics",
        "//test:direct_transport",
        "//test:encoder_settings",
        "//test:fake_encoded_frame",
        "//test:fake_video_codecs",
        "//test:field_trial",
        "//test:fileutils",
        "//test:frame_generator_capturer",
        "//test:frame_utils",
        "//test:mock_transport",
        "//test:null_transport",
        "//test:rtp_test_utils",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_common",
        "//test:test_support",
        "//test:video_test_common",
        "//test:video_test_constants",
        "//test/network:simulated_network",
        "//test/time_controller",
        "//video",
        "//video:decode_synchronizer",
        "//video:frame_cadence_adapter",
        "//video:frame_decode_scheduler",
        "//video:frame_decode_timing",
        "//video:task_queue_frame_decode_scheduler",
        "//video:unique_timestamp_counter",
        "//video:video_mocks",
        "//video:video_receive_stream_timeout_tracker",
        "//video:video_stream_buffer_controller",
        "//video:video_stream_encoder_impl",
        "//video:video_stream_encoder_interface",
        "//video/adaptation:video_adaptation",
        "//video/config:encoder_config",
        "//video/config:streams_config",
        "//video/config:video_config_tests",
    ],
)
