# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "video_adaptation",
    srcs = [
        "balanced_constraint.cc",
        "bandwidth_quality_scaler_resource.cc",
        "bitrate_constraint.cc",
        "encode_usage_resource.cc",
        "overuse_frame_detector.cc",
        "pixel_limit_resource.cc",
        "quality_scaler_resource.cc",
        "video_stream_encoder_resource.cc",
        "video_stream_encoder_resource_manager.cc",
    ],
    hdrs = [
        "balanced_constraint.h",
        "bandwidth_quality_scaler_resource.h",
        "bitrate_constraint.h",
        "encode_usage_resource.h",
        "overuse_frame_detector.h",
        "pixel_limit_resource.h",
        "quality_scaler_resource.h",
        "video_stream_encoder_resource.h",
        "video_stream_encoder_resource_manager.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/types:optional",
        "//api:field_trials_view",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/adaptation:resource_adaptation_api",
        "//api/environment",
        "//api/task_queue",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//api/video:video_adaptation",
        "//api/video:video_frame",
        "//api/video:video_stream_encoder",
        "//api/video_codecs:video_codecs_api",
        "//call/adaptation:resource_adaptation",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:refcount",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:balanced_degradation_settings",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/experiments:quality_scaler_settings",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers",
        "//video:video_stream_encoder_interface",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "video_adaptation_tests",
    testonly = 1,
    srcs = [
        "bitrate_constraint_unittest.cc",
        "overuse_frame_detector_unittest.cc",
        "pixel_limit_resource_unittest.cc",
        "quality_scaler_resource_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api:field_trials_view",
        "//api:scoped_refptr",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:video_adaptation",
        "//api/video:video_frame",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//call/adaptation:resource_adaptation",
        "//call/adaptation:resource_adaptation_test_utilities",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:random",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_numerics",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//test:rtc_expect_death",
        "//test:test_support",
        "//test/time_controller",
        "//video/adaptation:video_adaptation",
    ],
)
