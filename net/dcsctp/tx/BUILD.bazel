# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "send_queue",
    hdrs = ["send_queue.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:timestamp",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
    ],
)

cc_library(
    name = "rr_send_queue",
    srcs = ["rr_send_queue.cc"],
    hdrs = ["rr_send_queue.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/tx:send_queue",
        "//net/dcsctp/tx:stream_scheduler",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//rtc_base/containers:flat_map",
    ],
)

cc_library(
    name = "stream_scheduler",
    srcs = ["stream_scheduler.cc"],
    hdrs = ["stream_scheduler.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/tx:send_queue",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//rtc_base:strong_alias",
        "//rtc_base/containers:flat_set",
    ],
)

cc_library(
    name = "retransmission_error_counter",
    srcs = ["retransmission_error_counter.cc"],
    hdrs = ["retransmission_error_counter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//net/dcsctp/public:types",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "retransmission_timeout",
    srcs = ["retransmission_timeout.cc"],
    hdrs = ["retransmission_timeout.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/units:time_delta",
        "//net/dcsctp/public:types",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "outstanding_data",
    srcs = ["outstanding_data.cc"],
    hdrs = ["outstanding_data.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/common:sequence_numbers",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/timer",
        "//net/dcsctp/tx:retransmission_timeout",
        "//net/dcsctp/tx:send_queue",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//rtc_base/containers:flat_set",
    ],
)

cc_library(
    name = "retransmission_queue",
    srcs = ["retransmission_queue.cc"],
    hdrs = ["retransmission_queue.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:math",
        "//net/dcsctp/common:sequence_numbers",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/timer",
        "//net/dcsctp/tx:outstanding_data",
        "//net/dcsctp/tx:retransmission_timeout",
        "//net/dcsctp/tx:send_queue",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "mock_send_queue",
    testonly = 1,
    hdrs = ["mock_send_queue.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:timestamp",
        "//net/dcsctp/tx:send_queue",
        "//test:test_support",
    ],
)

cc_library(
    name = "dcsctp_tx_unittests",
    testonly = 1,
    srcs = [
        "outstanding_data_test.cc",
        "retransmission_error_counter_test.cc",
        "retransmission_queue_test.cc",
        "retransmission_timeout_test.cc",
        "rr_send_queue_test.cc",
        "stream_scheduler_test.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/task_queue",
        "//net/dcsctp/common:handover_testing",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/common:sequence_numbers",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/socket:mock_callbacks",
        "//net/dcsctp/testing:data_generator",
        "//net/dcsctp/testing:testing_macros",
        "//net/dcsctp/timer",
        "//net/dcsctp/tx:mock_send_queue",
        "//net/dcsctp/tx:outstanding_data",
        "//net/dcsctp/tx:retransmission_error_counter",
        "//net/dcsctp/tx:retransmission_queue",
        "//net/dcsctp/tx:retransmission_timeout",
        "//net/dcsctp/tx:rr_send_queue",
        "//net/dcsctp/tx:send_queue",
        "//net/dcsctp/tx:stream_scheduler",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//test:test_support",
    ],
)
