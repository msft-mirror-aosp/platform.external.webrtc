# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "context",
    hdrs = ["context.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api/units:time_delta",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
    ],
)

cc_library(
    name = "heartbeat_handler",
    srcs = ["heartbeat_handler.cc"],
    hdrs = ["heartbeat_handler.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:time_delta",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/socket:context",
        "//net/dcsctp/timer",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "stream_reset_handler",
    srcs = ["stream_reset_handler.cc"],
    hdrs = ["stream_reset_handler.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:time_delta",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/packet:tlv_trait",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/rx:data_tracker",
        "//net/dcsctp/rx:reassembly_queue",
        "//net/dcsctp/socket:context",
        "//net/dcsctp/timer",
        "//net/dcsctp/tx:retransmission_queue",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//rtc_base/containers:flat_set",
    ],
)

cc_library(
    name = "packet_sender",
    srcs = ["packet_sender.cc"],
    hdrs = ["packet_sender.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/timer",
    ],
)

cc_library(
    name = "transmission_control_block",
    srcs = ["transmission_control_block.cc"],
    hdrs = [
        "capabilities.h",
        "transmission_control_block.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/task_queue",
        "//api/units:time_delta",
        "//net/dcsctp/common:sequence_numbers",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/rx:data_tracker",
        "//net/dcsctp/rx:reassembly_queue",
        "//net/dcsctp/socket:context",
        "//net/dcsctp/socket:heartbeat_handler",
        "//net/dcsctp/socket:packet_sender",
        "//net/dcsctp/socket:stream_reset_handler",
        "//net/dcsctp/timer",
        "//net/dcsctp/tx:retransmission_error_counter",
        "//net/dcsctp/tx:retransmission_queue",
        "//net/dcsctp/tx:retransmission_timeout",
        "//net/dcsctp/tx:send_queue",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "dcsctp_socket",
    srcs = [
        "callback_deferrer.cc",
        "dcsctp_socket.cc",
        "state_cookie.cc",
    ],
    hdrs = [
        "callback_deferrer.h",
        "dcsctp_socket.h",
        "state_cookie.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:refcountedbase",
        "//api:scoped_refptr",
        "//api/task_queue",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:chunk_validators",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/packet:error_cause",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/packet:tlv_trait",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/rx:data_tracker",
        "//net/dcsctp/rx:reassembly_queue",
        "//net/dcsctp/socket:context",
        "//net/dcsctp/socket:heartbeat_handler",
        "//net/dcsctp/socket:packet_sender",
        "//net/dcsctp/socket:stream_reset_handler",
        "//net/dcsctp/socket:transmission_control_block",
        "//net/dcsctp/timer",
        "//net/dcsctp/tx:retransmission_error_counter",
        "//net/dcsctp/tx:retransmission_queue",
        "//net/dcsctp/tx:retransmission_timeout",
        "//net/dcsctp/tx:rr_send_queue",
        "//net/dcsctp/tx:send_queue",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "mock_callbacks",
    testonly = 1,
    hdrs = ["mock_dcsctp_socket_callbacks.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/task_queue",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/timer",
        "//rtc_base:logging",
        "//rtc_base:random",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_context",
    testonly = 1,
    hdrs = ["mock_context.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/socket:context",
        "//net/dcsctp/socket:mock_callbacks",
        "//test:test_support",
    ],
)

cc_library(
    name = "dcsctp_socket_unittests",
    testonly = 1,
    srcs = [
        "dcsctp_socket_network_test.cc",
        "dcsctp_socket_test.cc",
        "heartbeat_handler_test.cc",
        "packet_sender_test.cc",
        "state_cookie_test.cc",
        "stream_reset_handler_test.cc",
        "transmission_control_block_test.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:create_network_emulation_manager",
        "//api:network_emulation_manager_api",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//net/dcsctp/common:handover_testing",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:error_cause",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/packet:tlv_trait",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/public:utils",
        "//net/dcsctp/rx:data_tracker",
        "//net/dcsctp/rx:reassembly_queue",
        "//net/dcsctp/socket:dcsctp_socket",
        "//net/dcsctp/socket:heartbeat_handler",
        "//net/dcsctp/socket:mock_callbacks",
        "//net/dcsctp/socket:mock_context",
        "//net/dcsctp/socket:packet_sender",
        "//net/dcsctp/socket:stream_reset_handler",
        "//net/dcsctp/socket:transmission_control_block",
        "//net/dcsctp/testing:data_generator",
        "//net/dcsctp/testing:testing_macros",
        "//net/dcsctp/timer",
        "//net/dcsctp/timer:task_queue_timeout",
        "//net/dcsctp/tx:mock_send_queue",
        "//net/dcsctp/tx:retransmission_queue",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket_address",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//test:test_support",
    ],
)
