# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "packet",
    visibility = ["//:__subpackages__"],
    deps = ["//net/dcsctp/packet:bounded_io"],
)

cc_library(
    name = "bounded_io",
    hdrs = [
        "bounded_byte_reader.h",
        "bounded_byte_writer.h",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "tlv_trait",
    srcs = ["tlv_trait.cc"],
    hdrs = ["tlv_trait.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/packet:bounded_io",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "data",
    hdrs = ["data.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/public:types",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "crc32c",
    srcs = ["crc32c.cc"],
    hdrs = ["crc32c.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        # "@crc32c//:crc32c",
        "@com_google_absl//absl/crc:crc32c",
        "//api:array_view",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "parameter",
    srcs = [
        "parameter/add_incoming_streams_request_parameter.cc",
        "parameter/add_outgoing_streams_request_parameter.cc",
        "parameter/forward_tsn_supported_parameter.cc",
        "parameter/heartbeat_info_parameter.cc",
        "parameter/incoming_ssn_reset_request_parameter.cc",
        "parameter/outgoing_ssn_reset_request_parameter.cc",
        "parameter/parameter.cc",
        "parameter/reconfiguration_response_parameter.cc",
        "parameter/ssn_tsn_reset_request_parameter.cc",
        "parameter/state_cookie_parameter.cc",
        "parameter/supported_extensions_parameter.cc",
        "parameter/zero_checksum_acceptable_chunk_parameter.cc",
    ],
    hdrs = [
        "parameter/add_incoming_streams_request_parameter.h",
        "parameter/add_outgoing_streams_request_parameter.h",
        "parameter/forward_tsn_supported_parameter.h",
        "parameter/heartbeat_info_parameter.h",
        "parameter/incoming_ssn_reset_request_parameter.h",
        "parameter/outgoing_ssn_reset_request_parameter.h",
        "parameter/parameter.h",
        "parameter/reconfiguration_response_parameter.h",
        "parameter/ssn_tsn_reset_request_parameter.h",
        "parameter/state_cookie_parameter.h",
        "parameter/supported_extensions_parameter.h",
        "parameter/zero_checksum_acceptable_chunk_parameter.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/packet:tlv_trait",
        "//net/dcsctp/public:types",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "error_cause",
    srcs = [
        "error_cause/cookie_received_while_shutting_down_cause.cc",
        "error_cause/error_cause.cc",
        "error_cause/invalid_mandatory_parameter_cause.cc",
        "error_cause/invalid_stream_identifier_cause.cc",
        "error_cause/missing_mandatory_parameter_cause.cc",
        "error_cause/no_user_data_cause.cc",
        "error_cause/out_of_resource_error_cause.cc",
        "error_cause/protocol_violation_cause.cc",
        "error_cause/restart_of_an_association_with_new_address_cause.cc",
        "error_cause/stale_cookie_error_cause.cc",
        "error_cause/unrecognized_chunk_type_cause.cc",
        "error_cause/unrecognized_parameter_cause.cc",
        "error_cause/unresolvable_address_cause.cc",
        "error_cause/user_initiated_abort_cause.cc",
    ],
    hdrs = [
        "error_cause/cookie_received_while_shutting_down_cause.h",
        "error_cause/error_cause.h",
        "error_cause/invalid_mandatory_parameter_cause.h",
        "error_cause/invalid_stream_identifier_cause.h",
        "error_cause/missing_mandatory_parameter_cause.h",
        "error_cause/no_user_data_cause.h",
        "error_cause/out_of_resource_error_cause.h",
        "error_cause/protocol_violation_cause.h",
        "error_cause/restart_of_an_association_with_new_address_cause.h",
        "error_cause/stale_cookie_error_cause.h",
        "error_cause/unrecognized_chunk_type_cause.h",
        "error_cause/unrecognized_parameter_cause.h",
        "error_cause/unresolvable_address_cause.h",
        "error_cause/user_initiated_abort_cause.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:tlv_trait",
        "//net/dcsctp/public:types",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "chunk",
    srcs = [
        "chunk/abort_chunk.cc",
        "chunk/chunk.cc",
        "chunk/cookie_ack_chunk.cc",
        "chunk/cookie_echo_chunk.cc",
        "chunk/data_chunk.cc",
        "chunk/error_chunk.cc",
        "chunk/forward_tsn_chunk.cc",
        "chunk/heartbeat_ack_chunk.cc",
        "chunk/heartbeat_request_chunk.cc",
        "chunk/idata_chunk.cc",
        "chunk/iforward_tsn_chunk.cc",
        "chunk/init_ack_chunk.cc",
        "chunk/init_chunk.cc",
        "chunk/reconfig_chunk.cc",
        "chunk/sack_chunk.cc",
        "chunk/shutdown_ack_chunk.cc",
        "chunk/shutdown_chunk.cc",
        "chunk/shutdown_complete_chunk.cc",
    ],
    hdrs = [
        "chunk/abort_chunk.h",
        "chunk/chunk.h",
        "chunk/cookie_ack_chunk.h",
        "chunk/cookie_echo_chunk.h",
        "chunk/data_chunk.h",
        "chunk/data_common.h",
        "chunk/error_chunk.h",
        "chunk/forward_tsn_chunk.h",
        "chunk/forward_tsn_common.h",
        "chunk/heartbeat_ack_chunk.h",
        "chunk/heartbeat_request_chunk.h",
        "chunk/idata_chunk.h",
        "chunk/iforward_tsn_chunk.h",
        "chunk/init_ack_chunk.h",
        "chunk/init_chunk.h",
        "chunk/reconfig_chunk.h",
        "chunk/sack_chunk.h",
        "chunk/shutdown_ack_chunk.h",
        "chunk/shutdown_chunk.h",
        "chunk/shutdown_complete_chunk.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:math",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:data",
        "//net/dcsctp/packet:error_cause",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:tlv_trait",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "chunk_validators",
    srcs = ["chunk_validators.cc"],
    hdrs = ["chunk_validators.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//net/dcsctp/packet:chunk",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "sctp_packet",
    srcs = ["sctp_packet.cc"],
    hdrs = ["sctp_packet.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:crc32c",
        "//net/dcsctp/public:types",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "dcsctp_packet_unittests",
    testonly = 1,
    srcs = [
        "bounded_byte_reader_test.cc",
        "bounded_byte_writer_test.cc",
        "chunk/abort_chunk_test.cc",
        "chunk/cookie_ack_chunk_test.cc",
        "chunk/cookie_echo_chunk_test.cc",
        "chunk/data_chunk_test.cc",
        "chunk/error_chunk_test.cc",
        "chunk/forward_tsn_chunk_test.cc",
        "chunk/heartbeat_ack_chunk_test.cc",
        "chunk/heartbeat_request_chunk_test.cc",
        "chunk/idata_chunk_test.cc",
        "chunk/iforward_tsn_chunk_test.cc",
        "chunk/init_ack_chunk_test.cc",
        "chunk/init_chunk_test.cc",
        "chunk/reconfig_chunk_test.cc",
        "chunk/sack_chunk_test.cc",
        "chunk/shutdown_ack_chunk_test.cc",
        "chunk/shutdown_chunk_test.cc",
        "chunk/shutdown_complete_chunk_test.cc",
        "chunk_validators_test.cc",
        "crc32c_test.cc",
        "error_cause/cookie_received_while_shutting_down_cause_test.cc",
        "error_cause/invalid_mandatory_parameter_cause_test.cc",
        "error_cause/invalid_stream_identifier_cause_test.cc",
        "error_cause/missing_mandatory_parameter_cause_test.cc",
        "error_cause/no_user_data_cause_test.cc",
        "error_cause/out_of_resource_error_cause_test.cc",
        "error_cause/protocol_violation_cause_test.cc",
        "error_cause/restart_of_an_association_with_new_address_cause_test.cc",
        "error_cause/stale_cookie_error_cause_test.cc",
        "error_cause/unrecognized_chunk_type_cause_test.cc",
        "error_cause/unrecognized_parameter_cause_test.cc",
        "error_cause/unresolvable_address_cause_test.cc",
        "error_cause/user_initiated_abort_cause_test.cc",
        "parameter/add_incoming_streams_request_parameter_test.cc",
        "parameter/add_outgoing_streams_request_parameter_test.cc",
        "parameter/forward_tsn_supported_parameter_test.cc",
        "parameter/incoming_ssn_reset_request_parameter_test.cc",
        "parameter/outgoing_ssn_reset_request_parameter_test.cc",
        "parameter/parameter_test.cc",
        "parameter/reconfiguration_response_parameter_test.cc",
        "parameter/ssn_tsn_reset_request_parameter_test.cc",
        "parameter/state_cookie_parameter_test.cc",
        "parameter/supported_extensions_parameter_test.cc",
        "parameter/zero_checksum_acceptable_chunk_parameter_test.cc",
        "sctp_packet_test.cc",
        "tlv_trait_test.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//net/dcsctp/common:internal_types",
        "//net/dcsctp/common:math",
        "//net/dcsctp/packet:bounded_io",
        "//net/dcsctp/packet:chunk",
        "//net/dcsctp/packet:chunk_validators",
        "//net/dcsctp/packet:crc32c",
        "//net/dcsctp/packet:error_cause",
        "//net/dcsctp/packet:parameter",
        "//net/dcsctp/packet:sctp_packet",
        "//net/dcsctp/packet:tlv_trait",
        "//net/dcsctp/public:types",
        "//net/dcsctp/testing:testing_macros",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//test:test_support",
    ],
)
