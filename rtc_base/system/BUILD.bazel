# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "arch",
    hdrs = ["arch.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "asm_defines",
    hdrs = ["asm_defines.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "file_wrapper",
    srcs = ["file_wrapper.cc"],
    hdrs = ["file_wrapper.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//rtc_base:checks",
        "//rtc_base:criticalsection",
        "//rtc_base:safe_conversions",
    ],
)

cc_library(
    name = "file_wrapper_unittests",
    testonly = 1,
    srcs = ["file_wrapper_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base/system:file_wrapper",
        "//test:fileutils",
        "//test:test_support",
    ],
)

cc_library(
    name = "ignore_warnings",
    hdrs = ["ignore_warnings.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "inline",
    hdrs = ["inline.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "unused",
    hdrs = ["unused.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "assume",
    hdrs = ["assume.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "rtc_export",
    hdrs = [
        "rtc_export.h",
        "rtc_export_template.h",
    ],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "no_unique_address",
    hdrs = ["no_unique_address.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "no_cfi_icall",
    hdrs = ["no_cfi_icall.h"],
    visibility = ["//:__subpackages__"],
    deps = ["//rtc_base:sanitizer"],
)

objc_library(
    name = "cocoa_threading",
    srcs = ["cocoa_threading.mm"],
    hdrs = ["cocoa_threading.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "@apple_frameworks//:Foundation",
        "//rtc_base:checks",
    ],
)

objc_library(
    name = "gcd_helpers",
    srcs = ["gcd_helpers.m"],
    hdrs = ["gcd_helpers.h"],
    copts = [
        "-Wctad-maybe-unsupported",
        "-fno-exceptions",
        "-fno-rtti",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ARCH_ARM64",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAS_NEON",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_MAC",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_POSIX",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "warn_current_thread_is_deadlocked",
    hdrs = ["warn_current_thread_is_deadlocked.h"],
    visibility = ["//:__subpackages__"],
)
