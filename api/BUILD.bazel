# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "api",
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
    ],
)

cc_library(
    name = "call_api",
    hdrs = ["call/audio_sink.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "enable_media",
    srcs = ["enable_media.cc"],
    hdrs = ["enable_media.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/environment",
        "//call",
        "//media:rtc_audio_video",
        "//pc:media_factory",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "enable_media_with_defaults",
    srcs = ["enable_media_with_defaults.cc"],
    hdrs = ["enable_media_with_defaults.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:enable_media",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/audio:audio_processing",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/task_queue:default_task_queue_factory",
        "//api/video_codecs:builtin_video_decoder_factory",
        "//api/video_codecs:builtin_video_encoder_factory",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "create_peerconnection_factory",
    srcs = ["create_peerconnection_factory.cc"],
    hdrs = ["create_peerconnection_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:enable_media",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/audio:audio_device",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio_codecs:audio_codecs_api",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/video_codecs:video_codecs_api",
        "//pc:peer_connection_factory",
        "//pc:webrtc_sdp",
        "//rtc_base:threading",
        "//rtc_base/system:rtc_export",
        "//stats:rtc_stats",
    ],
)

cc_library(
    name = "location",
    hdrs = ["location.h"],
    visibility = ["//visibility:public"],
    deps = ["//rtc_base/system:rtc_export"],
)

cc_library(
    name = "rtp_headers",
    srcs = ["rtp_headers.cc"],
    hdrs = ["rtp_headers.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:timestamp",
        "//api/video:video_rtp_headers",
    ],
)

cc_library(
    name = "rtp_packet_info",
    srcs = ["rtp_packet_info.cc"],
    hdrs = [
        "rtp_packet_info.h",
        "rtp_packet_infos.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:refcountedbase",
        "//api:rtp_headers",
        "//api:scoped_refptr",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "video_track_source_constraints",
    hdrs = ["video_track_source_constraints.h"],
    visibility = ["//visibility:public"],
    deps = ["@com_google_absl//absl/types:optional"],
)

cc_library(
    name = "media_stream_interface",
    srcs = ["media_stream_interface.cc"],
    hdrs = [
        "media_stream_interface.h",
        "media_stream_track.h",
        "notifier.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:audio_options_api",
        "//api:make_ref_counted",
        "//api:ref_count",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:video_track_source_constraints",
        "//api/audio:audio_processing_statistics",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//rtc_base:checks",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "candidate",
    srcs = ["candidate.cc"],
    hdrs = ["candidate.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "//p2p:p2p_constants",
        "//rtc_base:checks",
        "//rtc_base:crc32",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:network_constants",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "turn_customizer",
    hdrs = ["turn_customizer.h"],
    visibility = ["//visibility:public"],
    deps = ["//api/transport:stun_types"],
)

cc_library(
    name = "ice_transport_interface",
    hdrs = ["ice_transport_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:async_dns_resolver",
        "//api:packet_socket_factory",
        "//api:ref_count",
        "//api:rtc_error",
        "//api:scoped_refptr",
        "//api/rtc_event_log",
    ],
)

cc_library(
    name = "dtls_transport_interface",
    srcs = ["dtls_transport_interface.cc"],
    hdrs = ["dtls_transport_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:ice_transport_interface",
        "//api:ref_count",
        "//api:rtc_error",
        "//api:scoped_refptr",
        "//rtc_base:ssl",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "dtmf_sender_interface",
    hdrs = ["dtmf_sender_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:media_stream_interface",
        "//api:ref_count",
    ],
)

cc_library(
    name = "rtp_sender_interface",
    srcs = ["rtp_sender_interface.cc"],
    hdrs = ["rtp_sender_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:frame_transformer_interface",
        "//api:media_stream_interface",
        "//api:ref_count",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api/crypto:frame_encryptor_interface",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "libjingle_peerconnection_api",
    srcs = [
        "data_channel_interface.cc",
        "jsep.cc",
        "jsep_ice_candidate.cc",
        "legacy_stats_types.cc",
        "peer_connection_interface.cc",
        "rtp_receiver_interface.cc",
        "rtp_transceiver_interface.cc",
        "sctp_transport_interface.cc",
    ],
    hdrs = [
        "data_channel_interface.h",
        "dtmf_sender_interface.h",
        "jsep.h",
        "jsep_ice_candidate.h",
        "jsep_session_description.h",
        "legacy_stats_types.h",
        "peer_connection_interface.h",
        "rtp_receiver_interface.h",
        "rtp_sender_interface.h",
        "rtp_transceiver_interface.h",
        "sctp_transport_interface.h",
        "set_local_description_observer_interface.h",
        "set_remote_description_observer_interface.h",
        "uma_metrics.h",
        "video_track_source_proxy_factory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:async_dns_resolver",
        "//api:audio_options_api",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:field_trials",
        "//api:field_trials_view",
        "//api:frame_transformer_interface",
        "//api:ice_transport_interface",
        "//api:libjingle_logging_api",
        "//api:make_ref_counted",
        "//api:media_stream_interface",
        "//api:network_state_predictor_api",
        "//api:packet_socket_factory",
        "//api:priority",
        "//api:ref_count",
        "//api:rtc_error",
        "//api:rtc_stats_api",
        "//api:rtp_packet_info",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:turn_customizer",
        "//api/adaptation:resource_adaptation_api",
        "//api/audio:audio_mixer_api",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/metronome",
        "//api/neteq:neteq_api",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/transport:bandwidth_estimation_settings",
        "//api/transport:bitrate_settings",
        "//api/transport:enums",
        "//api/transport:network_control",
        "//api/transport:sctp_transport_factory_interface",
        "//api/transport/rtp:rtp_source",
        "//api/units:data_rate",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//call:rtp_interfaces",
        "//media:media_engine",
        "//media:rtc_media_config",
        "//p2p:connection",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//pc:media_factory",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "frame_transformer_interface",
    srcs = ["frame_transformer_interface.cc"],
    hdrs = ["frame_transformer_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:make_ref_counted",
        "//api:ref_count",
        "//api:scoped_refptr",
        "//api/video:encoded_frame",
        "//api/video:video_frame_metadata",
    ],
)

cc_library(
    name = "rtc_error",
    srcs = ["rtc_error.cc"],
    hdrs = ["rtc_error.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "packet_socket_factory",
    hdrs = ["packet_socket_factory.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:async_dns_resolver",
        "//rtc_base:async_packet_socket",
        "//rtc_base:socket_address",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "async_dns_resolver",
    hdrs = ["async_dns_resolver.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "//rtc_base:checks",
        "//rtc_base:socket_address",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "ref_count",
    hdrs = ["ref_count.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "scoped_refptr",
    hdrs = ["scoped_refptr.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "make_ref_counted",
    hdrs = ["make_ref_counted.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:ref_count",
        "//rtc_base:refcount",
    ],
)

cc_library(
    name = "video_quality_analyzer_api",
    testonly = 1,
    hdrs = ["test/video_quality_analyzer_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:stats_observer_interface",
        "//api/video:encoded_image",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "track_id_stream_info_map",
    hdrs = ["test/track_id_stream_info_map.h"],
    visibility = ["//visibility:public"],
    deps = ["@com_google_absl//absl/strings"],
)

cc_library(
    name = "rtp_transceiver_direction",
    hdrs = ["rtp_transceiver_direction.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "priority",
    hdrs = ["priority.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "rtp_parameters",
    srcs = [
        "media_types.cc",
        "rtp_parameters.cc",
    ],
    hdrs = [
        "media_types.h",
        "rtp_parameters.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:priority",
        "//api:rtp_transceiver_direction",
        "//api/video:resolution",
        "//api/video_codecs:scalability_mode",
        "//media:media_constants",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "audio_quality_analyzer_api",
    testonly = 1,
    hdrs = ["test/audio_quality_analyzer_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:stats_observer_interface",
        "//api:track_id_stream_info_map",
    ],
)

cc_library(
    name = "stats_observer_interface",
    testonly = 1,
    hdrs = ["test/stats_observer_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:rtc_stats_api",
    ],
)

cc_library(
    name = "peer_network_dependencies",
    hdrs = ["test/peer_network_dependencies.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:packet_socket_factory",
        "//rtc_base:network",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "peer_connection_quality_test_fixture_api",
    testonly = 1,
    hdrs = ["test/peerconnection_quality_test_fixture.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_quality_analyzer_api",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:frame_generator_api",
        "//api:function_view",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:network_state_predictor_api",
        "//api:packet_socket_factory",
        "//api:peer_network_dependencies",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:simulated_network_api",
        "//api:stats_observer_interface",
        "//api:track_id_stream_info_map",
        "//api:video_quality_analyzer_api",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/test/pclf:media_configuration",
        "//api/test/pclf:media_quality_test_params",
        "//api/test/pclf:peer_configurer",
        "//api/test/video:video_frame_writer",
        "//api/transport:network_control",
        "//api/units:time_delta",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//media:media_constants",
        "//rtc_base:checks",
        "//rtc_base:network",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//test:fileutils",
    ],
)

cc_library(
    name = "frame_generator_api",
    srcs = ["test/frame_generator_interface.cc"],
    hdrs = ["test/frame_generator_interface.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:scoped_refptr",
        "//api/video:video_frame",
    ],
)

cc_library(
    name = "create_network_emulation_manager",
    testonly = 1,
    srcs = ["test/create_network_emulation_manager.cc"],
    hdrs = ["test/create_network_emulation_manager.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:field_trials_view",
        "//api:network_emulation_manager_api",
        "//test/network:emulated_network",
    ],
)

cc_library(
    name = "video_quality_test_fixture_api",
    testonly = 1,
    hdrs = ["test/video_quality_test_fixture.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:libjingle_peerconnection_api",
        "//api:network_state_predictor_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:simulated_network_api",
        "//api/transport:bitrate_settings",
        "//api/transport:network_control",
        "//api/video_codecs:video_codecs_api",
        "//call:fake_network",
        "//call:rtp_interfaces",
        "//test:test_common",
        "//test:video_test_common",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "test_dependency_factory",
    testonly = 1,
    srcs = ["test/test_dependency_factory.cc"],
    hdrs = ["test/test_dependency_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:video_quality_test_fixture_api",
        "//rtc_base:checks",
        "//rtc_base:platform_thread_types",
    ],
)

cc_library(
    name = "create_video_quality_test_fixture_api",
    testonly = 1,
    srcs = ["test/create_video_quality_test_fixture.cc"],
    hdrs = ["test/create_video_quality_test_fixture.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:fec_controller_api",
        "//api:network_state_predictor_api",
        "//api:scoped_refptr",
        "//api:video_quality_test_fixture_api",
        "//video:video_quality_test",
    ],
)

cc_library(
    name = "create_peerconnection_quality_test_fixture",
    testonly = 1,
    srcs = ["test/create_peerconnection_quality_test_fixture.cc"],
    hdrs = ["test/create_peerconnection_quality_test_fixture.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:audio_quality_analyzer_api",
        "//api:peer_connection_quality_test_fixture_api",
        "//api:time_controller",
        "//api:video_quality_analyzer_api",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//test/pc/e2e:peerconnection_quality_test",
    ],
)

cc_library(
    name = "create_frame_generator",
    testonly = 1,
    srcs = ["test/create_frame_generator.cc"],
    hdrs = ["test/create_frame_generator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "//api:frame_generator_api",
        "//api/environment",
        "//api/environment:environment_factory",
        "//rtc_base:checks",
        "//system_wrappers",
        "//test:frame_generator_impl",
    ],
)

cc_library(
    name = "create_peer_connection_quality_test_frame_generator",
    testonly = 1,
    srcs = ["test/create_peer_connection_quality_test_frame_generator.cc"],
    hdrs = ["test/create_peer_connection_quality_test_frame_generator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:create_frame_generator",
        "//api:frame_generator_api",
        "//api/test/pclf:media_configuration",
        "//rtc_base:checks",
        "//test:fileutils",
    ],
)

cc_library(
    name = "libjingle_logging_api",
    hdrs = ["rtc_event_log_output.h"],
    visibility = ["//visibility:public"],
    deps = ["@com_google_absl//absl/strings"],
)

cc_library(
    name = "rtc_event_log_output_file",
    srcs = ["rtc_event_log_output_file.cc"],
    hdrs = ["rtc_event_log_output_file.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:libjingle_logging_api",
        "//api/rtc_event_log",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base/system:file_wrapper",
    ],
)

cc_library(
    name = "rtc_stats_api",
    hdrs = [
        "stats/attribute.h",
        "stats/rtc_stats.h",
        "stats/rtc_stats_collector_callback.h",
        "stats/rtc_stats_report.h",
        "stats/rtcstats_objects.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api:make_ref_counted",
        "//api:ref_count",
        "//api:refcountedbase",
        "//api:scoped_refptr",
        "//api/units:timestamp",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "audio_options_api",
    srcs = ["audio_options.cc"],
    hdrs = ["audio_options.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "transport_api",
    srcs = ["call/transport.cc"],
    hdrs = ["call/transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:refcountedbase",
        "//api:scoped_refptr",
    ],
)

cc_library(
    name = "bitrate_allocation",
    hdrs = ["call/bitrate_allocation.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/units:data_rate",
        "//api/units:time_delta",
    ],
)

cc_library(
    name = "simulated_network_api",
    hdrs = ["test/simulated_network.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api/units:data_rate",
        "//rtc_base:macromagic",
        "//rtc_base:random",
    ],
)

cc_library(
    name = "network_emulation_manager_api",
    srcs = ["test/network_emulation_manager.cc"],
    hdrs = ["test/network_emulation_manager.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:packet_socket_factory",
        "//api:peer_network_dependencies",
        "//api:simulated_network_api",
        "//api:time_controller",
        "//api/test/network_emulation",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:timestamp",
        "//rtc_base:checks",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:threading",
        "//test/network:simulated_network",
    ],
)

cc_library(
    name = "time_controller",
    srcs = ["test/time_controller.cc"],
    hdrs = ["test/time_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//rtc_base:threading",
        "//rtc_base/synchronization:yield_policy",
        "//system_wrappers",
    ],
)

cc_library(
    name = "fec_controller_api",
    hdrs = [
        "fec_controller.h",
        "fec_controller_override.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//api/environment",
        "//api/video:video_frame_type",
        "//modules:module_fec_api",
    ],
)

cc_library(
    name = "network_state_predictor_api",
    hdrs = ["network_state_predictor.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "array_view",
    hdrs = ["array_view.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base:type_traits",
    ],
)

cc_library(
    name = "refcountedbase",
    hdrs = ["ref_counted_base.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:ref_count",
        "//rtc_base:macromagic",
        "//rtc_base:refcount",
    ],
)

cc_library(
    name = "ice_transport_factory",
    srcs = ["ice_transport_factory.cc"],
    hdrs = ["ice_transport_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:packet_socket_factory",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/rtc_event_log",
        "//p2p:connection",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//rtc_base:threading",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "neteq_simulator_api",
    srcs = ["test/neteq_simulator.cc"],
    hdrs = ["test/neteq_simulator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = ["//api/neteq:neteq_api"],
)

cc_library(
    name = "function_view",
    hdrs = ["function_view.h"],
    visibility = ["//visibility:public"],
    deps = ["//rtc_base:checks"],
)

cc_library(
    name = "sequence_checker",
    hdrs = ["sequence_checker.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base/synchronization:sequence_checker_internal",
    ],
)

cc_library(
    name = "audioproc_f_api",
    testonly = 1,
    srcs = ["test/audioproc_float.cc"],
    hdrs = ["test/audioproc_float.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/audio:audio_processing",
        "//modules/audio_processing",
        "//modules/audio_processing:audioproc_f_impl",
    ],
)

cc_library(
    name = "neteq_simulator_factory",
    testonly = 1,
    srcs = ["test/neteq_simulator_factory.cc"],
    hdrs = ["test/neteq_simulator_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:neteq_simulator_api",
        "//api/neteq:neteq_api",
        "//modules/audio_coding:neteq_test_factory",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "simulcast_test_fixture_api",
    testonly = 1,
    hdrs = ["test/simulcast_test_fixture.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "create_simulcast_test_fixture_api",
    testonly = 1,
    srcs = ["test/create_simulcast_test_fixture.cc"],
    hdrs = ["test/create_simulcast_test_fixture.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:simulcast_test_fixture_api",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:simulcast_test_fixture_impl",
    ],
)

cc_library(
    name = "videocodec_test_stats_api",
    testonly = 1,
    srcs = ["test/videocodec_test_stats.cc"],
    hdrs = ["test/videocodec_test_stats.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api/units:data_rate",
        "//api/units:frequency",
        "//api/video:video_frame_type",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "videocodec_test_fixture_api",
    testonly = 1,
    hdrs = ["test/videocodec_test_fixture.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:videocodec_test_stats_api",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:video_codec_interface",
    ],
)

cc_library(
    name = "create_videocodec_test_fixture_api",
    testonly = 1,
    srcs = ["test/create_videocodec_test_fixture.cc"],
    hdrs = ["test/create_videocodec_test_fixture.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:videocodec_test_fixture_api",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:video_codecs_test_framework",
        "//modules/video_coding:videocodec_test_impl",
    ],
)

cc_library(
    name = "mock_audio_mixer",
    testonly = 1,
    hdrs = ["test/mock_audio_mixer.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/audio:audio_mixer_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_audio_sink",
    testonly = 1,
    hdrs = ["test/mock_audio_sink.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:media_stream_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_data_channel",
    testonly = 1,
    hdrs = ["test/mock_data_channel.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_dtmf_sender",
    testonly = 1,
    hdrs = ["test/mock_dtmf_sender.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_fec_controller_override",
    testonly = 1,
    hdrs = ["test/mock_fec_controller_override.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:fec_controller_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_frame_encryptor",
    testonly = 1,
    hdrs = ["test/mock_frame_encryptor.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/crypto:frame_encryptor_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_frame_decryptor",
    testonly = 1,
    hdrs = ["test/mock_frame_decryptor.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/crypto:frame_decryptor_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_frame_transformer",
    testonly = 1,
    hdrs = ["test/mock_frame_transformer.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:frame_transformer_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_encoder_selector",
    testonly = 1,
    hdrs = ["test/mock_encoder_selector.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/video_codecs:video_codecs_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "fake_frame_encryptor",
    testonly = 1,
    srcs = ["test/fake_frame_encryptor.cc"],
    hdrs = ["test/fake_frame_encryptor.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:ref_count",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api/crypto:frame_encryptor_interface",
        "//rtc_base:checks",
        "//rtc_base:refcount",
    ],
)

cc_library(
    name = "fake_frame_decryptor",
    testonly = 1,
    srcs = ["test/fake_frame_decryptor.cc"],
    hdrs = ["test/fake_frame_decryptor.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api/crypto:frame_decryptor_interface",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "mock_media_stream_interface",
    testonly = 1,
    hdrs = ["test/mock_media_stream_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:media_stream_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_packet_socket_factory",
    testonly = 1,
    hdrs = ["test/mock_packet_socket_factory.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:packet_socket_factory",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_peerconnectioninterface",
    testonly = 1,
    hdrs = ["test/mock_peerconnectioninterface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:ref_count",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//rtc_base:refcount",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_peer_connection_factory_interface",
    testonly = 1,
    hdrs = ["test/mock_peer_connection_factory_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_session_description_interface",
    testonly = 1,
    hdrs = ["test/mock_session_description_interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_transformable_frame",
    testonly = 1,
    hdrs = ["test/mock_transformable_frame.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:frame_transformer_interface",
        "//api/units:timestamp",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_async_dns_resolver",
    testonly = 1,
    hdrs = ["test/mock_async_dns_resolver.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:async_dns_resolver",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_rtp",
    testonly = 1,
    hdrs = [
        "test/mock_rtp_transceiver.h",
        "test/mock_rtpreceiver.h",
        "test/mock_rtpsender.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/crypto:frame_decryptor_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_transformable_audio_frame",
    testonly = 1,
    hdrs = ["test/mock_transformable_audio_frame.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:frame_transformer_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_transformable_video_frame",
    testonly = 1,
    hdrs = ["test/mock_transformable_video_frame.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:frame_transformer_interface",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_video_bitrate_allocator",
    testonly = 1,
    hdrs = ["test/mock_video_bitrate_allocator.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/video:video_bitrate_allocator",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_video_bitrate_allocator_factory",
    testonly = 1,
    hdrs = ["test/mock_video_bitrate_allocator_factory.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/video:video_bitrate_allocator_factory",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_video_codec_factory",
    testonly = 1,
    hdrs = [
        "test/mock_video_decoder_factory.h",
        "test/mock_video_encoder_factory.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_video_decoder",
    testonly = 1,
    hdrs = ["test/mock_video_decoder.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/video_codecs:video_codecs_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_video_encoder",
    testonly = 1,
    hdrs = ["test/mock_video_encoder.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/video_codecs:video_codecs_api",
        "//test:test_support",
    ],
)

cc_library(
    name = "mock_video_track",
    testonly = 1,
    hdrs = ["test/mock_video_track.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:media_stream_interface",
        "//api:ref_count",
        "//api:scoped_refptr",
        "//rtc_base:refcount",
        "//test:test_support",
    ],
)

cc_library(
    name = "create_time_controller",
    testonly = 1,
    srcs = ["test/create_time_controller.cc"],
    hdrs = ["test/create_time_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:nullability",
        "//api:dtmf_sender_interface",
        "//api:enable_media_with_defaults",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:time_controller",
        "//api/environment",
        "//api/environment:environment_factory",
        "//call",
        "//call:call_interfaces",
        "//pc:media_factory",
        "//rtc_base:checks",
        "//system_wrappers",
        "//test/time_controller",
    ],
)

cc_library(
    name = "rtc_api_unittests",
    testonly = 1,
    srcs = [
        "array_view_unittest.cc",
        "candidate_unittest.cc",
        "field_trials_unittest.cc",
        "function_view_unittest.cc",
        "rtc_error_unittest.cc",
        "rtc_event_log_output_file_unittest.cc",
        "rtp_packet_info_unittest.cc",
        "rtp_packet_infos_unittest.cc",
        "rtp_parameters_unittest.cc",
        "scoped_refptr_unittest.cc",
        "sequence_checker_unittest.cc",
        "test/create_time_controller_unittest.cc",
        "test/peerconnection_quality_test_fixture_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:candidate",
        "//api:create_time_controller",
        "//api:dtmf_sender_interface",
        "//api:field_trials",
        "//api:field_trials_view",
        "//api:function_view",
        "//api:libjingle_peerconnection_api",
        "//api:peer_connection_quality_test_fixture_api",
        "//api:rtc_error",
        "//api:rtc_event_log_output_file",
        "//api:rtp_packet_info",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:time_controller",
        "//api/environment:environment_unittests",
        "//api/task_queue:task_queue_default_factory_unittests",
        "//api/test/pclf:media_configuration",
        "//api/test/video:video_frame_writer",
        "//api/transport:field_trial_based_config",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/units:units_unittests",
        "//api/video:frame_buffer_unittest",
        "//api/video:rtp_video_frame_assembler_unittests",
        "//api/video:video_frame_metadata_unittest",
        "//p2p:rtc_p2p",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:platform_thread",
        "//rtc_base:rtc_event",
        "//rtc_base:ssl",
        "//rtc_base:task_queue_for_test",
        "//rtc_base/containers:flat_set",
        "//rtc_base/task_utils:repeating_task",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:fileutils",
        "//test:rtc_expect_death",
        "//test:test_support",
    ],
)

cc_library(
    name = "compile_all_headers",
    testonly = 1,
    srcs = ["test/compile_all_headers.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:fake_frame_decryptor",
        "//api:fake_frame_encryptor",
        "//api:mock_async_dns_resolver",
        "//api:mock_audio_mixer",
        "//api:mock_audio_sink",
        "//api:mock_data_channel",
        "//api:mock_dtmf_sender",
        "//api:mock_frame_decryptor",
        "//api:mock_frame_encryptor",
        "//api:mock_media_stream_interface",
        "//api:mock_packet_socket_factory",
        "//api:mock_peer_connection_factory_interface",
        "//api:mock_peerconnectioninterface",
        "//api:mock_rtp",
        "//api:mock_session_description_interface",
        "//api:mock_transformable_audio_frame",
        "//api:mock_transformable_frame",
        "//api:mock_transformable_video_frame",
        "//api:mock_video_bitrate_allocator",
        "//api:mock_video_bitrate_allocator_factory",
        "//api:mock_video_codec_factory",
        "//api:mock_video_decoder",
        "//api:mock_video_encoder",
        "//api:mock_video_track",
        "//api:rtc_api_unittests",
        "//api/units:units_unittests",
    ],
)

cc_library(
    name = "field_trials_registry",
    srcs = ["field_trials_registry.cc"],
    hdrs = ["field_trials_registry.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "//api:field_trials_view",
        "//experiments:registered_field_trials",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base/containers:flat_set",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "field_trials_view",
    hdrs = ["field_trials_view.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "webrtc_key_value_config",
    hdrs = ["webrtc_key_value_config.h"],
    visibility = ["//visibility:public"],
    deps = ["//api:field_trials_view"],
)

cc_library(
    name = "field_trials",
    srcs = ["field_trials.cc"],
    hdrs = ["field_trials.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:field_trials_registry",
        "//rtc_base:checks",
        "//rtc_base/containers:flat_map",
        "//system_wrappers:field_trial",
    ],
)

cc_library(
    name = "frame_transformer_factory",
    srcs = ["frame_transformer_factory.cc"],
    hdrs = ["frame_transformer_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:frame_transformer_interface",
        "//api:ref_count",
        "//api:scoped_refptr",
        "//api/video:encoded_frame",
        "//api/video:video_frame_metadata",
        "//audio",
        "//modules/rtp_rtcp",
    ],
)
