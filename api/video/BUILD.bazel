# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "video_rtp_headers",
    srcs = [
        "color_space.cc",
        "hdr_metadata.cc",
        "video_content_type.cc",
        "video_timing.cc",
    ],
    hdrs = [
        "color_space.h",
        "hdr_metadata.h",
        "video_content_type.h",
        "video_rotation.h",
        "video_timing.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "video_frame",
    srcs = [
        "i420_buffer.cc",
        "i422_buffer.cc",
        "i444_buffer.cc",
        "nv12_buffer.cc",
        "video_frame.cc",
        "video_frame_buffer.cc",
        "video_source_interface.cc",
    ],
    hdrs = [
        "i420_buffer.h",
        "i422_buffer.h",
        "i444_buffer.h",
        "nv12_buffer.h",
        "video_codec_type.h",
        "video_frame.h",
        "video_frame_buffer.h",
        "video_sink_interface.h",
        "video_source_interface.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "@libyuv//:libyuv",
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:ref_count",
        "//api:rtp_packet_info",
        "//api:scoped_refptr",
        "//api:video_track_source_constraints",
        "//api/video:video_rtp_headers",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//rtc_base:timeutils",
        "//rtc_base/memory:aligned_malloc",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "video_frame_i010",
    srcs = [
        "i010_buffer.cc",
        "i210_buffer.cc",
        "i410_buffer.cc",
    ],
    hdrs = [
        "i010_buffer.h",
        "i210_buffer.h",
        "i410_buffer.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@libyuv//:libyuv",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//rtc_base/memory:aligned_malloc",
    ],
)

cc_library(
    name = "recordable_encoded_frame",
    hdrs = ["recordable_encoded_frame.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:array_view",
        "//api:make_ref_counted",
        "//api:scoped_refptr",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
    ],
)

cc_library(
    name = "video_frame_type",
    hdrs = ["video_frame_type.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "render_resolution",
    hdrs = ["render_resolution.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "resolution",
    hdrs = ["resolution.h"],
    visibility = ["//visibility:public"],
    deps = ["//rtc_base/system:rtc_export"],
)

cc_library(
    name = "encoded_image",
    srcs = ["encoded_image.cc"],
    hdrs = ["encoded_image.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:refcountedbase",
        "//api:rtp_packet_info",
        "//api:scoped_refptr",
        "//api/units:timestamp",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_frame_type",
        "//api/video:video_rtp_headers",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "encoded_frame",
    srcs = ["encoded_frame.cc"],
    hdrs = ["encoded_frame.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:video_frame",
        "//modules/rtp_rtcp:rtp_video_header",
        "//modules/video_coding:video_codec_interface",
    ],
)

cc_library(
    name = "rtp_video_frame_assembler",
    srcs = ["rtp_video_frame_assembler.cc"],
    hdrs = ["rtp_video_frame_assembler.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/types:optional",
        "//api/video:encoded_frame",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding",
        "//modules/video_coding:packet_buffer",
        "//rtc_base:logging",
        "//rtc_base:rtc_numerics",
    ],
)

cc_library(
    name = "rtp_video_frame_assembler_unittests",
    testonly = 1,
    srcs = ["rtp_video_frame_assembler_unittests.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//api/video:rtp_video_frame_assembler",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_packetizer_av1_test_helper",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//test:test_support",
    ],
)

cc_library(
    name = "video_codec_constants",
    hdrs = ["video_codec_constants.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "video_bitrate_allocation",
    srcs = ["video_bitrate_allocation.cc"],
    hdrs = ["video_bitrate_allocation.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api/video:video_codec_constants",
        "//rtc_base:checks",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "video_layers_allocation",
    hdrs = ["video_layers_allocation.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "//api/units:data_rate",
    ],
)

cc_library(
    name = "video_bitrate_allocator",
    srcs = ["video_bitrate_allocator.cc"],
    hdrs = ["video_bitrate_allocator.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api/units:data_rate",
        "//api/video:video_bitrate_allocation",
    ],
)

cc_library(
    name = "video_bitrate_allocator_factory",
    hdrs = ["video_bitrate_allocator_factory.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/environment",
        "//api/video:video_bitrate_allocator",
        "//api/video_codecs:video_codecs_api",
    ],
)

cc_library(
    name = "video_adaptation",
    srcs = ["video_adaptation_counters.cc"],
    hdrs = [
        "video_adaptation_counters.h",
        "video_adaptation_reason.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//rtc_base:checks",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "video_stream_encoder",
    hdrs = ["video_stream_encoder_settings.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:fec_controller_api",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api/adaptation:resource_adaptation_api",
        "//api/units:data_rate",
        "//api/video:video_adaptation",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_layers_allocation",
        "//api/video_codecs:video_codecs_api",
    ],
)

cc_library(
    name = "video_frame_metadata",
    srcs = ["video_frame_metadata.cc"],
    hdrs = ["video_frame_metadata.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api:array_view",
        "//api/transport/rtp:dependency_descriptor",
        "//api/video:video_frame",
        "//api/video:video_frame_type",
        "//api/video:video_rtp_headers",
        "//modules/video_coding:codec_globals_headers",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "builtin_video_bitrate_allocator_factory",
    srcs = ["builtin_video_bitrate_allocator_factory.cc"],
    hdrs = ["builtin_video_bitrate_allocator_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "//api:scoped_refptr",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video_codecs:video_codecs_api",
        "//media:rtc_media_base",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding/svc:svc_rate_allocator",
    ],
)

cc_library(
    name = "frame_buffer",
    srcs = ["frame_buffer.cc"],
    hdrs = ["frame_buffer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/types:optional",
        "//api:field_trials_view",
        "//api/units:timestamp",
        "//api/video:encoded_frame",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:logging",
        "//rtc_base:rtc_numerics",
    ],
)

cc_library(
    name = "frame_buffer_unittest",
    testonly = 1,
    srcs = ["frame_buffer_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/video:encoded_frame",
        "//api/video:frame_buffer",
        "//test:fake_encoded_frame",
        "//test:field_trial",
        "//test:scoped_key_value_config",
        "//test:test_support",
    ],
)

cc_library(
    name = "video_frame_metadata_unittest",
    testonly = 1,
    srcs = ["video_frame_metadata_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/video:video_frame",
        "//api/video:video_frame_metadata",
        "//modules/video_coding:codec_globals_headers",
        "//test:test_support",
        "//video",
    ],
)
