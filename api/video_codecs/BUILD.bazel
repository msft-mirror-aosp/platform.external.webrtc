# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "scalability_mode",
    srcs = ["scalability_mode.cc"],
    hdrs = ["scalability_mode.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//rtc_base:checks",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "scalability_mode_helper",
    srcs = ["scalability_mode_helper.cc"],
    hdrs = ["scalability_mode_helper.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api/video_codecs:scalability_mode",
        "//modules/video_coding/svc:scalability_mode_util",
    ],
)

cc_library(
    name = "video_codecs_api",
    srcs = [
        "av1_profile.cc",
        "h264_profile_level_id.cc",
        "sdp_video_format.cc",
        "simulcast_stream.cc",
        "video_codec.cc",
        "video_decoder.cc",
        "video_decoder_factory.cc",
        "video_encoder.cc",
        "vp8_frame_config.cc",
        "vp8_temporal_layers.cc",
        "vp9_profile.cc",
    ],
    hdrs = [
        "av1_profile.h",
        "h264_profile_level_id.h",
        "sdp_video_format.h",
        "simulcast_stream.h",
        "spatial_layer.h",
        "video_codec.h",
        "video_decoder.h",
        "video_decoder_factory.h",
        "video_encoder.h",
        "video_encoder_factory.h",
        "vp8_frame_buffer_controller.h",
        "vp8_frame_config.h",
        "vp8_temporal_layers.h",
        "vp9_profile.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:fec_controller_api",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api/environment",
        "//api/units:data_rate",
        "//api/video:encoded_image",
        "//api/video:render_resolution",
        "//api/video:resolution",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:scalability_mode",
        "//media:media_constants",
        "//modules/video_coding:codec_globals_headers",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:refcount",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "bitstream_parser_api",
    hdrs = ["bitstream_parser.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
    ],
)

cc_library(
    name = "builtin_video_decoder_factory",
    srcs = ["builtin_video_decoder_factory.cc"],
    hdrs = ["builtin_video_decoder_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:scoped_refptr",
        "//api/video_codecs:video_codecs_api",
        "//media:rtc_internal_video_codecs",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "builtin_video_encoder_factory",
    srcs = ["builtin_video_encoder_factory.cc"],
    hdrs = ["builtin_video_encoder_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
        "//media:rtc_internal_video_codecs",
        "//media:rtc_simulcast_encoder_adapter",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "video_encoder_factory_template",
    hdrs = ["video_encoder_factory_template.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:array_view",
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding/svc:scalability_mode_util",
    ],
)

cc_library(
    name = "video_encoder_factory_template_libvpx_vp8_adapter",
    hdrs = ["video_encoder_factory_template_libvpx_vp8_adapter.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp8_scalability",
    ],
)

cc_library(
    name = "video_encoder_factory_template_libvpx_vp9_adapter",
    hdrs = ["video_encoder_factory_template_libvpx_vp9_adapter.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:webrtc_vp9",
    ],
)

cc_library(
    name = "video_encoder_factory_template_open_h264_adapter",
    hdrs = ["video_encoder_factory_template_open_h264_adapter.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/environment",
        "//modules/video_coding:webrtc_h264",
    ],
)

cc_library(
    name = "video_encoder_factory_template_libaom_av1_adapter",
    hdrs = ["video_encoder_factory_template_libaom_av1_adapter.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
        "//api/environment",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding/codecs/av1:av1_svc_config",
        # "//modules/video_coding/codecs/av1:libaom_av1_encoder",
        "//modules/video_coding/svc:scalability_mode_util",
    ],
)

cc_library(
    name = "video_decoder_factory_template",
    hdrs = ["video_decoder_factory_template.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:array_view",
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
    ],
)

cc_library(
    name = "video_decoder_factory_template_libvpx_vp8_adapter",
    hdrs = ["video_decoder_factory_template_libvpx_vp8_adapter.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/environment",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:webrtc_vp8",
    ],
)

cc_library(
    name = "video_decoder_factory_template_libvpx_vp9_adapter",
    hdrs = ["video_decoder_factory_template_libvpx_vp9_adapter.h"],
    visibility = ["//visibility:public"],
    deps = ["//modules/video_coding:webrtc_vp9"],
)

cc_library(
    name = "video_decoder_factory_template_open_h264_adapter",
    hdrs = ["video_decoder_factory_template_open_h264_adapter.h"],
    visibility = ["//visibility:public"],
    deps = ["//modules/video_coding:webrtc_h264"],
)

cc_library(
    name = "video_decoder_factory_template_dav1d_adapter",
    hdrs = ["video_decoder_factory_template_dav1d_adapter.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding/codecs/av1:dav1d_decoder",
    ],
)

cc_library(
    name = "video_encoding_general",
    hdrs = ["video_encoding_general.h"],
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "video_encoder_interface",
    hdrs = ["video_encoder_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api/units:data_rate",
        "//api/units:data_size",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:resolution",
        "//api/video:video_frame",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_encoding_general",
        "//rtc_base:rtc_numerics",
    ],
)

cc_library(
    name = "video_encoder_factory_interface",
    hdrs = ["video_encoder_factory_interface.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api/units:time_delta",
        "//api/video:resolution",
        "//api/video_codecs:video_encoder_interface",
        "//api/video_codecs:video_encoding_general",
        "//rtc_base:rtc_numerics",
    ],
)

cc_library(
    name = "simple_encoder_wrapper",
    srcs = ["simple_encoder_wrapper.cc"],
    hdrs = ["simple_encoder_wrapper.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:variant",
        "//api/units:data_rate",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:scalability_mode_helper",
        "//api/video_codecs:video_encoder_factory_interface",
        "//api/video_codecs:video_encoder_interface",
        "//common_video/generic_frame_descriptor",
        "//modules/video_coding/svc:scalability_structures",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "simple_encoder_wrapper_unittests",
    testonly = 1,
    srcs = ["simple_encoder_wrapper_unittests.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/video:video_frame",
        "//api/video_codecs:libaom_av1_encoder_factory",
        "//api/video_codecs:simple_encoder_wrapper",
        "//api/video_codecs:video_encoder_factory_interface",
        "//api/video_codecs:video_encoder_interface",
        "//test:fileutils",
        "//test:test_support",
        "//test:video_test_support",
    ],
)

cc_library(
    name = "libaom_av1_encoder_factory",
    srcs = ["libaom_av1_encoder_factory.cc"],
    hdrs = ["libaom_av1_encoder_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/cleanup",
        "@libaom//:aom_highbd",
        "//api/units:time_delta",
        "//api/video_codecs:video_encoder_factory_interface",
        "//api/video_codecs:video_encoder_interface",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "libaom_av1_encoder_factory_test",
    testonly = 1,
    srcs = ["libaom_av1_encoder_factory_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = ["//resources:reference_video_640x360_30fps.y4m"],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:variant",
        "//api/video:video_frame",
        "//api/video_codecs:libaom_av1_encoder_factory",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_encoder_interface",
        "//common_video",
        "//modules/video_coding/codecs/av1:dav1d_decoder",
        "//rtc_base:logging",
        "//test:fileutils",
        "//test:test_support",
        "//test:video_test_support",
    ],
)

cc_library(
    name = "vp8_temporal_layers_factory",
    srcs = ["vp8_temporal_layers_factory.cc"],
    hdrs = ["vp8_temporal_layers_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:fec_controller_api",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_vp8_temporal_layers",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "rtc_software_fallback_wrappers",
    srcs = [
        "video_decoder_software_fallback_wrapper.cc",
        "video_encoder_software_fallback_wrapper.cc",
    ],
    hdrs = [
        "video_decoder_software_fallback_wrapper.h",
        "video_encoder_software_fallback_wrapper.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api/environment",
        "//api/video:encoded_image",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//media:video_common",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/system:rtc_export",
        "//system_wrappers:metrics",
    ],
)
