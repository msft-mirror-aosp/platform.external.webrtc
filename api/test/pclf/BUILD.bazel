# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "media_configuration",
    testonly = 1,
    srcs = ["media_configuration.cc"],
    hdrs = ["media_configuration.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:audio_quality_analyzer_api",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:frame_generator_api",
        "//api:function_view",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:packet_socket_factory",
        "//api:peer_network_dependencies",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:simulated_network_api",
        "//api:stats_observer_interface",
        "//api:track_id_stream_info_map",
        "//api:video_quality_analyzer_api",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/test/video:video_frame_writer",
        "//api/transport:network_control",
        "//api/units:time_delta",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
        "//rtc_base:network",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//test:fileutils",
        "//test:video_test_support",
        "//test/pc/e2e/analyzer/video:video_dumping",
    ],
)

cc_library(
    name = "media_quality_test_params",
    testonly = 1,
    hdrs = ["media_quality_test_params.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//api:async_dns_resolver",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:packet_socket_factory",
        "//api:rtp_sender_interface",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/rtc_event_log",
        "//api/test/pclf:media_configuration",
        "//api/transport:network_control",
        "//api/video_codecs:video_codecs_api",
        "//p2p:connection",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//rtc_base:network",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:ssl",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "peer_configurer",
    testonly = 1,
    srcs = ["peer_configurer.cc"],
    hdrs = ["peer_configurer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "//api:async_dns_resolver",
        "//api:create_peer_connection_quality_test_frame_generator",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:frame_generator_api",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:peer_network_dependencies",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio_codecs:audio_codecs_api",
        "//api/neteq:neteq_api",
        "//api/rtc_event_log",
        "//api/test/pclf:media_configuration",
        "//api/test/pclf:media_quality_test_params",
        "//api/transport:bitrate_settings",
        "//api/transport:network_control",
        "//api/video_codecs:video_codecs_api",
        "//rtc_base:checks",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:ssl",
    ],
)
