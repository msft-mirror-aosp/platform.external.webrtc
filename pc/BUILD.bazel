# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "pc",
    visibility = ["//:__subpackages__"],
    deps = ["//pc:rtc_pc"],
)

cc_library(
    name = "proxy",
    hdrs = ["proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:scoped_refptr",
        "//api/task_queue",
        "//rtc_base:event_tracer",
        "//rtc_base:rtc_event",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "channel",
    srcs = ["channel.cc"],
    hdrs = ["channel.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//pc:__pkg__",
        "//test/peer_scenario:__pkg__",
    ],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/crypto:options",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:timestamp",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//media:codec",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:rid_description",
        "//media:rtp_utils",
        "//media:stream_params",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:dtls_transport_internal",
        "//p2p:rtc_p2p",
        "//pc:channel_interface",
        "//pc:rtp_media_utils",
        "//pc:rtp_transport_internal",
        "//pc:session_description",
        "//rtc_base:async_packet_socket",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network_route",
        "//rtc_base:socket",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:unique_id_generator",
        "//rtc_base/containers:flat_set",
        "//rtc_base/network:sent_packet",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "channel_interface",
    hdrs = ["channel_interface.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//media:media_channel",
        "//pc:rtp_transport_internal",
    ],
)

cc_library(
    name = "dtls_srtp_transport",
    srcs = ["dtls_srtp_transport.cc"],
    hdrs = ["dtls_srtp_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//p2p:dtls_transport_internal",
        "//p2p:packet_transport_internal",
        "//p2p:rtc_p2p",
        # "//pc:srtp_transport",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "dtls_transport",
    srcs = ["dtls_transport.cc"],
    hdrs = ["dtls_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//p2p:dtls_transport",
        "//p2p:dtls_transport_internal",
        "//p2p:rtc_p2p",
        "//pc:ice_transport",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base/synchronization:mutex",
    ],
)

# cc_library(
#     name = "external_hmac",
#     srcs = ["external_hmac.cc"],
#     hdrs = ["external_hmac.h"],
#     copts = [
#         "-Wctad-maybe-unsupported",
#     ] + platform_select(
#         arm64 = [
#             "-fno-exceptions",
#             "-fno-rtti",
#         ],
#         linux = ["-fno-exceptions"],
#         windows = ["-fno-rtti"],
#     ),
#     defines = [
#         "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
#         "WEBRTC_ABSL_MUTEX",
#         "WEBRTC_ENABLE_AVX2",
#         "WEBRTC_ENABLE_PROTOBUF=1",
#         "WEBRTC_HAVE_SCTP",
#         "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
#         "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
#         "WEBRTC_STRICT_FIELD_TRIALS=0",
#     ] + platform_select(
#         arm64 = [
#             "WEBRTC_ARCH_ARM64",
#             "WEBRTC_HAS_NEON",
#             "WEBRTC_MAC",
#             "WEBRTC_POSIX",
#         ],
#         linux = [
#             "RTC_ENABLE_VP9",
#             "WEBRTC_ENABLE_LIBEVENT",
#             "WEBRTC_LINUX",
#             "WEBRTC_POSIX",
#         ],
#         windows = [
#             "RTC_ENABLE_VP9",
#             "WEBRTC_WIN",
#         ],
#     ),
#     visibility = ["//pc:__pkg__"],
#     deps = [
#         "//rtc_base:logging",
#         "//rtc_base:zero_memory",
#     ],
# )

cc_library(
    name = "ice_transport",
    srcs = ["ice_transport.cc"],
    hdrs = ["ice_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:sequence_checker",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "jsep_transport",
    srcs = ["jsep_transport.cc"],
    hdrs = ["jsep_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:candidate",
        "//api:dtmf_sender_interface",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/transport:datagram_transport_interface",
        "//media:rtc_data_sctp_transport_internal",
        "//p2p:dtls_transport",
        "//p2p:dtls_transport_internal",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        # "//pc:dtls_srtp_transport",
        "//pc:dtls_transport",
        "//pc:rtcp_mux_filter",
        "//pc:rtp_transport",
        "//pc:rtp_transport_internal",
        "//pc:sctp_transport",
        "//pc:session_description",
        # "//pc:srtp_transport",
        "//pc:transport_stats",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "jsep_transport_collection",
    srcs = ["jsep_transport_collection.cc"],
    hdrs = ["jsep_transport_collection.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:sequence_checker",
        "//p2p:p2p_constants",
        "//p2p:rtc_p2p",
        "//pc:jsep_transport",
        "//pc:session_description",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "jsep_transport_controller",
    srcs = ["jsep_transport_controller.cc"],
    hdrs = ["jsep_transport_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//pc:__pkg__",
        "//test/peer_scenario:__pkg__",
    ],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api:async_dns_resolver",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:ice_transport_factory",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/crypto:options",
        "//api/environment",
        "//api/rtc_event_log",
        "//api/transport:datagram_transport_interface",
        "//api/transport:enums",
        "//api/transport:sctp_transport_factory_interface",
        "//media:rtc_data_sctp_transport_internal",
        "//p2p:connection",
        "//p2p:dtls_transport",
        "//p2p:dtls_transport_factory",
        "//p2p:dtls_transport_internal",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel",
        "//p2p:packet_transport_internal",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        "//pc:channel",
        # "//pc:dtls_srtp_transport",
        "//pc:dtls_transport",
        "//pc:jsep_transport",
        "//pc:jsep_transport_collection",
        "//pc:rtp_transport",
        "//pc:rtp_transport_internal",
        "//pc:sctp_transport",
        "//pc:session_description",
        # "//pc:srtp_transport",
        "//pc:transport_stats",
        "//rtc_base:callback_list",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "media_factory",
    hdrs = ["media_factory.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/environment",
        "//call:call_interfaces",
        "//media:media_engine",
    ],
)

cc_library(
    name = "media_session",
    srcs = ["media_session.cc"],
    hdrs = ["media_session.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api/crypto:options",
        "//media:codec",
        "//media:media_constants",
        "//media:media_engine",
        "//media:rid_description",
        "//media:rtc_data_sctp_transport_internal",
        "//media:rtc_sdp_video_format_utils",
        "//media:stream_params",
        "//p2p:ice_credentials_iterator",
        "//p2p:p2p_constants",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_description_factory",
        "//p2p:transport_info",
        "//pc:jsep_transport",
        "//pc:media_protocol_names",
        "//pc:rtp_media_utils",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//pc:used_ids",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:unique_id_generator",
        "//rtc_base/memory:always_valid_pointer",
        "//rtc_base/third_party/base64",
    ],
)

cc_library(
    name = "media_stream_proxy",
    hdrs = ["media_stream_proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:media_stream_interface",
        "//pc:proxy",
    ],
)

cc_library(
    name = "media_stream_track_proxy",
    hdrs = ["media_stream_track_proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:media_stream_interface",
        "//pc:proxy",
    ],
)

cc_library(
    name = "peer_connection_factory_proxy",
    hdrs = ["peer_connection_factory_proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//pc:proxy",
    ],
)

cc_library(
    name = "peer_connection_proxy",
    hdrs = ["peer_connection_proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/transport:bandwidth_estimation_settings",
        "//pc:proxy",
    ],
)

cc_library(
    name = "rtcp_mux_filter",
    srcs = ["rtcp_mux_filter.cc"],
    hdrs = ["rtcp_mux_filter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//pc:session_description",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "rtp_media_utils",
    srcs = ["rtp_media_utils.cc"],
    hdrs = ["rtp_media_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:rtp_transceiver_direction",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "rtp_receiver_proxy",
    hdrs = ["rtp_receiver_proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//pc:proxy",
    ],
)

cc_library(
    name = "rtp_sender_proxy",
    hdrs = ["rtp_sender_proxy.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//pc:proxy",
    ],
)

cc_library(
    name = "rtp_transport",
    srcs = ["rtp_transport.cc"],
    hdrs = ["rtp_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:timestamp",
        "//call:rtp_receiver",
        "//call:video_stream_api",
        "//media:rtp_utils",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:packet_transport_internal",
        "//p2p:rtc_p2p",
        "//pc:rtp_transport_internal",
        "//pc:session_description",
        "//rtc_base:async_packet_socket",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:network_route",
        "//rtc_base:socket",
        "//rtc_base/network:received_packet",
        "//rtc_base/network:sent_packet",
    ],
)

cc_library(
    name = "rtp_transport_internal",
    hdrs = ["rtp_transport_internal.h"],
    visibility = [
        "//pc:__pkg__",
        "//test/peer_scenario:__pkg__",
    ],
    deps = [
        "//call:rtp_receiver",
        "//p2p:ice_transport_internal",
        "//p2p:rtc_p2p",
        "//pc:session_description",
        "//rtc_base:callback_list",
        "//rtc_base:network_route",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "sctp_transport",
    srcs = ["sctp_transport.cc"],
    hdrs = ["sctp_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/transport:datagram_transport_interface",
        "//media:rtc_data_sctp_transport_internal",
        "//p2p:dtls_transport_internal",
        "//p2p:rtc_p2p",
        "//pc:dtls_transport",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "sctp_utils",
    srcs = ["sctp_utils.cc"],
    hdrs = ["sctp_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//pc:__pkg__",
        "//test/fuzzers:__pkg__",
    ],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:priority",
        "//api:rtp_sender_interface",
        "//api/transport:datagram_transport_interface",
        "//media:media_channel",
        "//media:rtc_data_sctp_transport_internal",
        "//net/dcsctp/public:types",
        "//rtc_base:byte_buffer",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:logging",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "srtp_session",
    srcs = ["srtp_session.cc"],
    hdrs = ["srtp_session.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "//api:array_view",
        "//api:field_trials_view",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        # "//pc:external_hmac",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "srtp_transport",
    srcs = ["srtp_transport.cc"],
    hdrs = ["srtp_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//media:rtp_utils",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:packet_transport_internal",
        "//p2p:rtc_p2p",
        "//pc:rtp_transport",
        "//pc:srtp_session",
        "//rtc_base:async_packet_socket",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:network_route",
        "//rtc_base:safe_conversions",
        "//rtc_base:ssl",
        "//rtc_base:zero_memory",
        "//rtc_base/third_party/base64",
    ],
)

cc_library(
    name = "transport_stats",
    srcs = ["transport_stats.cc"],
    hdrs = ["transport_stats.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//p2p:connection",
        "//p2p:dtls_transport_internal",
        "//p2p:ice_transport_internal",
        "//p2p:port",
        "//p2p:rtc_p2p",
        "//rtc_base:ssl",
    ],
)

cc_library(
    name = "used_ids",
    hdrs = ["used_ids.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:rtp_parameters",
        "//media:codec",
        "//rtc_base:checks",
        "//rtc_base:logging",
    ],
)

cc_library(
    name = "video_track_source_proxy",
    srcs = ["video_track_source_proxy.cc"],
    hdrs = ["video_track_source_proxy.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:video_track_source_constraints",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//pc:proxy",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "session_description",
    srcs = ["session_description.cc"],
    hdrs = ["session_description.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//media:codec",
        "//media:media_channel",
        "//media:media_constants",
        "//media:rid_description",
        "//media:stream_params",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        "//pc:media_protocol_names",
        "//pc:simulcast_description",
        "//rtc_base:checks",
        "//rtc_base:socket_address",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "simulcast_description",
    srcs = ["simulcast_description.cc"],
    hdrs = ["simulcast_description.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//rtc_base:checks",
        "//rtc_base:socket_address",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "rtc_pc",
    visibility = ["//:__subpackages__"],
    deps = ["//media:rtc_audio_video"],
)

cc_library(
    name = "media_protocol_names",
    srcs = ["media_protocol_names.cc"],
    hdrs = ["media_protocol_names.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = ["@com_google_absl//absl/strings"],
)

cc_library(
    name = "sctp_data_channel",
    srcs = ["sctp_data_channel.cc"],
    hdrs = ["sctp_data_channel.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:priority",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:datagram_transport_interface",
        "//media:media_channel",
        "//media:rtc_data_sctp_transport_internal",
        "//pc:data_channel_utils",
        "//pc:proxy",
        "//pc:sctp_utils",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:weak_ptr",
        "//rtc_base/containers:flat_set",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:unused",
    ],
)

cc_library(
    name = "data_channel_utils",
    srcs = ["data_channel_utils.cc"],
    hdrs = ["data_channel_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//media:media_engine",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "connection_context",
    srcs = ["connection_context.cc"],
    hdrs = ["connection_context.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:refcountedbase",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/environment",
        "//api/neteq:neteq_api",
        "//api/transport:sctp_transport_factory_interface",
        "//media:media_engine",
        "//media:rtc_data_sctp_transport_factory",
        "//p2p:basic_packet_socket_factory",
        "//p2p:rtc_p2p",
        "//pc:media_factory",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:network",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:socket_factory",
        "//rtc_base:socket_server",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/memory:always_valid_pointer",
    ],
)

cc_library(
    name = "data_channel_controller",
    srcs = ["data_channel_controller.cc"],
    hdrs = ["data_channel_controller.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:datagram_transport_interface",
        "//media:media_channel",
        "//pc:data_channel_utils",
        "//pc:peer_connection_internal",
        "//pc:sctp_data_channel",
        "//pc:sctp_utils",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:weak_ptr",
    ],
)

cc_library(
    name = "peer_connection_internal",
    hdrs = ["peer_connection_internal.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/audio:audio_device",
        "//call:call_interfaces",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//pc:jsep_transport_controller",
        "//pc:peer_connection_message_handler",
        "//pc:rtp_transceiver",
        "//pc:rtp_transmission_manager",
        "//pc:sctp_data_channel",
    ],
)

cc_library(
    name = "rtc_stats_collector",
    srcs = ["rtc_stats_collector.cc"],
    hdrs = ["rtc_stats_collector.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = [
        "//api:__pkg__",
        "//pc:__pkg__",
    ],
    deps = [
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_stats_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/audio:audio_device",
        "//api/audio:audio_processing_statistics",
        "//api/task_queue",
        "//api/units:time_delta",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:scalability_mode",
        "//call:call_interfaces",
        "//common_video",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:port",
        "//p2p:rtc_p2p",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:data_channel_utils",
        "//pc:peer_connection_internal",
        "//pc:rtc_stats_traversal",
        "//pc:rtp_receiver",
        "//pc:rtp_receiver_proxy",
        "//pc:rtp_sender",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transceiver",
        "//pc:sctp_data_channel",
        "//pc:track_media_info_map",
        "//pc:transport_stats",
        "//pc:webrtc_sdp",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:network_constants",
        "//rtc_base:refcount",
        "//rtc_base:rtc_event",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/containers:flat_set",
        "//rtc_base/synchronization:mutex",
    ],
)

cc_library(
    name = "rtc_stats_traversal",
    srcs = ["rtc_stats_traversal.cc"],
    hdrs = ["rtc_stats_traversal.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:rtc_stats_api",
        "//api:scoped_refptr",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "sdp_offer_answer",
    srcs = ["sdp_offer_answer.cc"],
    hdrs = ["sdp_offer_answer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/crypto:options",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_bitrate_allocator_factory",
        "//media:codec",
        "//media:media_channel",
        "//media:rid_description",
        "//media:stream_params",
        "//p2p:connection",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_description_factory",
        "//p2p:transport_info",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:connection_context",
        "//pc:data_channel_controller",
        "//pc:dtls_transport",
        "//pc:jsep_transport_controller",
        "//pc:legacy_stats_collector",
        "//pc:media_session",
        "//pc:media_stream",
        "//pc:media_stream_observer",
        "//pc:media_stream_proxy",
        "//pc:peer_connection_internal",
        "//pc:peer_connection_message_handler",
        "//pc:rtp_media_utils",
        "//pc:rtp_receiver",
        "//pc:rtp_receiver_proxy",
        "//pc:rtp_sender",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transceiver",
        "//pc:rtp_transmission_manager",
        "//pc:sdp_state_provider",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//pc:stream_collection",
        "//pc:transceiver_list",
        "//pc:usage_pattern",
        "//pc:used_ids",
        "//pc:webrtc_session_description_factory",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_operations_chain",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:unique_id_generator",
        "//rtc_base:weak_ptr",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "jsep_ice_candidate",
    visibility = ["//pc:__pkg__"],
)

cc_library(
    name = "jsep_session_description",
    visibility = ["//pc:__pkg__"],
)

cc_library(
    name = "local_audio_source",
    srcs = ["local_audio_source.cc"],
    hdrs = ["local_audio_source.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:audio_options_api",
        "//api:media_stream_interface",
        "//api:scoped_refptr",
    ],
)

cc_library(
    name = "peer_connection",
    srcs = ["peer_connection.cc"],
    hdrs = ["peer_connection.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:async_dns_resolver",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:ice_transport_interface",
        "//api:libjingle_logging_api",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtc_stats_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:turn_customizer",
        "//api/adaptation:resource_adaptation_api",
        "//api/crypto:options",
        "//api/environment",
        "//api/rtc_event_log",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:bitrate_settings",
        "//api/transport:datagram_transport_interface",
        "//api/transport:enums",
        "//api/video:video_codec_constants",
        "//call:call_interfaces",
        "//media:media_channel",
        "//media:media_engine",
        "//media:rid_description",
        "//media:rtc_media_config",
        "//media:stream_params",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:basic_async_resolver_factory",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:dtls_transport_internal",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_transport_channel",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:connection_context",
        "//pc:data_channel_controller",
        "//pc:data_channel_utils",
        "//pc:dtls_transport",
        "//pc:ice_server_parsing",
        "//pc:jsep_transport_controller",
        "//pc:legacy_stats_collector",
        "//pc:peer_connection_internal",
        "//pc:peer_connection_message_handler",
        "//pc:rtc_stats_collector",
        "//pc:rtp_receiver",
        "//pc:rtp_receiver_proxy",
        "//pc:rtp_sender",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transceiver",
        "//pc:rtp_transmission_manager",
        "//pc:rtp_transport_internal",
        "//pc:sctp_data_channel",
        "//pc:sctp_transport",
        "//pc:sdp_offer_answer",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//pc:transceiver_list",
        "//pc:transport_stats",
        "//pc:usage_pattern",
        "//pc:webrtc_session_description_factory",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:net_helper",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:unique_id_generator",
        "//rtc_base:weak_ptr",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "simulcast_sdp_serializer",
    srcs = ["simulcast_sdp_serializer.cc"],
    hdrs = ["simulcast_sdp_serializer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:rtc_error",
        "//media:rid_description",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "sdp_utils",
    srcs = ["sdp_utils.cc"],
    hdrs = ["sdp_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//p2p:rtc_p2p",
        "//p2p:transport_info",
        "//pc:session_description",
        "//rtc_base:checks",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "legacy_stats_collector",
    srcs = ["legacy_stats_collector.cc"],
    hdrs = ["legacy_stats_collector.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:candidate",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/audio:audio_processing_statistics",
        "//api/audio_codecs:audio_codecs_api",
        "//api/video:video_rtp_headers",
        "//call:call_interfaces",
        "//media:media_channel",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:port",
        "//p2p:rtc_p2p",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:data_channel_utils",
        "//pc:legacy_stats_collector_interface",
        "//pc:peer_connection_internal",
        "//pc:rtp_receiver",
        "//pc:rtp_receiver_proxy",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transceiver",
        "//pc:transport_stats",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network_constants",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
    ],
)

cc_library(
    name = "stream_collection",
    hdrs = ["stream_collection.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
    ],
)

cc_library(
    name = "track_media_info_map",
    srcs = ["track_media_info_map.cc"],
    hdrs = ["track_media_info_map.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:media_stream_interface",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//media:media_channel",
        "//media:stream_params",
        "//pc:rtp_receiver",
        "//pc:rtp_sender",
        "//rtc_base:checks",
        "//rtc_base:refcount",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "webrtc_sdp",
    srcs = [
        "jsep_ice_candidate.cc",
        "jsep_session_description.cc",
        "webrtc_sdp.cc",
    ],
    hdrs = ["webrtc_sdp.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:candidate",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//media:codec",
        "//media:media_constants",
        "//media:rid_description",
        "//media:rtc_data_sctp_transport_internal",
        "//media:rtp_utils",
        "//media:stream_params",
        "//p2p:candidate_pair_interface",
        "//p2p:connection",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:port",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        "//pc:media_protocol_names",
        "//pc:media_session",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//pc:simulcast_sdp_serializer",
        "//rtc_base:checks",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:net_helper",
        "//rtc_base:network_constants",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "webrtc_session_description_factory",
    srcs = ["webrtc_session_description_factory.cc"],
    hdrs = ["webrtc_session_description_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_description_factory",
        "//pc:connection_context",
        "//pc:media_session",
        "//pc:sdp_state_provider",
        "//pc:session_description",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:unique_id_generator",
        "//rtc_base:weak_ptr",
    ],
)

cc_library(
    name = "ice_server_parsing",
    srcs = ["ice_server_parsing.cc"],
    hdrs = ["ice_server_parsing.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//p2p:connection",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//rtc_base:checks",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:socket_address",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "media_stream_observer",
    srcs = ["media_stream_observer.cc"],
    hdrs = ["media_stream_observer.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:media_stream_interface",
        "//api:scoped_refptr",
    ],
)

cc_library(
    name = "peer_connection_factory",
    srcs = ["peer_connection_factory.cc"],
    hdrs = ["peer_connection_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:audio_options_api",
        "//api:dtmf_sender_interface",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:ice_transport_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:network_state_predictor_api",
        "//api:packet_socket_factory",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/metronome",
        "//api/neteq:neteq_api",
        "//api/rtc_event_log",
        "//api/transport:bitrate_settings",
        "//api/transport:network_control",
        "//api/transport:sctp_transport_factory_interface",
        "//api/units:data_rate",
        "//call:call_interfaces",
        "//call:rtp_interfaces",
        "//call:rtp_sender",
        "//media:media_engine",
        "//p2p:basic_packet_socket_factory",
        "//p2p:basic_port_allocator",
        "//p2p:connection",
        "//p2p:default_ice_transport_factory",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//pc:audio_track",
        "//pc:connection_context",
        "//pc:local_audio_source",
        "//pc:media_factory",
        "//pc:media_stream",
        "//pc:media_stream_proxy",
        "//pc:media_stream_track_proxy",
        "//pc:peer_connection",
        "//pc:peer_connection_factory_proxy",
        "//pc:peer_connection_proxy",
        "//pc:rtp_parameters_conversion",
        "//pc:session_description",
        "//pc:video_track",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:safe_conversions",
        "//rtc_base:threading",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/system:file_wrapper",
    ],
)

cc_library(
    name = "peer_connection_message_handler",
    srcs = ["peer_connection_message_handler.cc"],
    hdrs = ["peer_connection_message_handler.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//pc:legacy_stats_collector_interface",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "usage_pattern",
    srcs = ["usage_pattern.cc"],
    hdrs = ["usage_pattern.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//rtc_base:logging",
        "//system_wrappers:metrics",
    ],
)

cc_library(
    name = "rtp_transceiver",
    srcs = ["rtp_transceiver.cc"],
    hdrs = ["rtp_transceiver.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:options",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/video:video_bitrate_allocator_factory",
        "//media:codec",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:media_constants",
        "//media:media_engine",
        "//media:rtc_media_config",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:connection_context",
        "//pc:proxy",
        "//pc:rtp_media_utils",
        "//pc:rtp_parameters_conversion",
        "//pc:rtp_receiver",
        "//pc:rtp_receiver_proxy",
        "//pc:rtp_sender",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transport_internal",
        "//pc:session_description",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "rtp_transmission_manager",
    srcs = ["rtp_transmission_manager.cc"],
    hdrs = ["rtp_transmission_manager.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//media:media_channel",
        "//pc:audio_rtp_receiver",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:legacy_stats_collector_interface",
        "//pc:rtp_receiver",
        "//pc:rtp_receiver_proxy",
        "//pc:rtp_sender",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transceiver",
        "//pc:transceiver_list",
        "//pc:usage_pattern",
        "//pc:video_rtp_receiver",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base:weak_ptr",
    ],
)

cc_library(
    name = "transceiver_list",
    srcs = ["transceiver_list.cc"],
    hdrs = ["transceiver_list.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//pc:rtp_transceiver",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "rtp_receiver",
    srcs = ["rtp_receiver.cc"],
    hdrs = ["rtp_receiver.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/crypto:frame_decryptor_interface",
        "//api/video:video_frame",
        "//media:media_channel",
        "//media:video_broadcaster",
        "//pc:media_stream",
        "//pc:media_stream_proxy",
        "//pc:video_track_source",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "audio_rtp_receiver",
    srcs = ["audio_rtp_receiver.cc"],
    hdrs = ["audio_rtp_receiver.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:frame_transformer_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/crypto:frame_decryptor_interface",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport/rtp:rtp_source",
        "//media:media_channel",
        "//pc:audio_track",
        "//pc:jitter_buffer_delay",
        "//pc:media_stream",
        "//pc:media_stream_track_proxy",
        "//pc:remote_audio_source",
        "//pc:rtp_receiver",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "video_rtp_receiver",
    srcs = ["video_rtp_receiver.cc"],
    hdrs = ["video_rtp_receiver.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:frame_transformer_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/crypto:frame_decryptor_interface",
        "//api/transport/rtp:rtp_source",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//media:media_channel",
        "//pc:jitter_buffer_delay",
        "//pc:media_stream",
        "//pc:media_stream_track_proxy",
        "//pc:rtp_receiver",
        "//pc:video_rtp_track_source",
        "//pc:video_track",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "video_rtp_track_source",
    srcs = ["video_rtp_track_source.cc"],
    hdrs = ["video_rtp_track_source.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:sequence_checker",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//media:video_broadcaster",
        "//pc:video_track_source",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "audio_track",
    srcs = ["audio_track.cc"],
    hdrs = ["audio_track.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:media_stream_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//rtc_base:checks",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "video_track",
    srcs = ["video_track.cc"],
    hdrs = ["video_track.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:media_stream_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/video:video_frame",
        "//media:video_source_base",
        "//pc:video_track_source_proxy",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:threading",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "sdp_state_provider",
    hdrs = ["sdp_state_provider.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
    ],
)

cc_library(
    name = "jitter_buffer_delay",
    srcs = ["jitter_buffer_delay.cc"],
    hdrs = ["jitter_buffer_delay.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:sequence_checker",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:safe_conversions",
        "//rtc_base:safe_minmax",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "remote_audio_source",
    srcs = ["remote_audio_source.cc"],
    hdrs = ["remote_audio_source.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:call_api",
        "//api:media_stream_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue",
        "//media:media_channel",
        "//pc:channel",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base/synchronization:mutex",
    ],
)

cc_library(
    name = "rtp_sender",
    srcs = ["rtp_sender.cc"],
    hdrs = ["rtp_sender.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:audio_options_api",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:frame_transformer_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:priority",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/crypto:frame_encryptor_interface",
        "//media:audio_source",
        "//media:media_channel",
        "//media:media_engine",
        "//pc:dtmf_sender",
        "//pc:legacy_stats_collector_interface",
        "//rtc_base:checks",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:ssl",
        "//rtc_base:threading",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "rtp_parameters_conversion",
    srcs = ["rtp_parameters_conversion.cc"],
    hdrs = ["rtp_parameters_conversion.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//media:codec",
        "//media:media_constants",
        "//media:rtp_utils",
        "//media:stream_params",
        "//pc:session_description",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "dtmf_sender",
    srcs = ["dtmf_sender.cc"],
    hdrs = ["dtmf_sender.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:time_delta",
        "//pc:proxy",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:refcount",
        "//rtc_base/third_party/sigslot",
    ],
)

cc_library(
    name = "media_stream",
    srcs = ["media_stream.cc"],
    hdrs = ["media_stream.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "video_track_source",
    srcs = ["video_track_source.cc"],
    hdrs = ["video_track_source.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:media_stream_interface",
        "//api:sequence_checker",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//media:media_channel",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "legacy_stats_collector_interface",
    hdrs = ["legacy_stats_collector_interface.h"],
    visibility = ["//pc:__pkg__"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtp_sender_interface",
    ],
)

cc_library(
    name = "libjingle_peerconnection",
    visibility = ["//visibility:public"],
    deps = [
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//pc:jsep_session_description",
        "//pc:peer_connection_factory",
        "//pc:rtc_stats_collector",
        "//stats",
    ],
)

cc_test(
    name = "rtc_pc_unittests",
    testonly = 1,
    srcs = [
        "audio_rtp_receiver_unittest.cc",
        "channel_unittest.cc",
        # "dtls_srtp_transport_unittest.cc",
        "dtls_transport_unittest.cc",
        "ice_transport_unittest.cc",
        "jsep_transport_controller_unittest.cc",
        "jsep_transport_unittest.cc",
        "media_session_unittest.cc",
        "rtcp_mux_filter_unittest.cc",
        "rtp_transport_unittest.cc",
        "sctp_transport_unittest.cc",
        "session_description_unittest.cc",
        # "srtp_session_unittest.cc",
        # "srtp_transport_unittest.cc",
        "test/rtp_transport_test_util.h",
        # "test/srtp_test_util.h",
        "used_ids_unittest.cc",
        "video_rtp_receiver_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    includes = ["../third_party/libsrtp/srtp"],
    linkopts = platform_select(
        arm64 = [],
        linux = [],
        windows = ["strmiids.lib"],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:candidate",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:ice_transport_factory",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:rtc_error",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/environment:environment_factory",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:datagram_transport_interface",
        "//api/transport:enums",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:recordable_encoded_frame",
        "//api/video/test:mock_recordable_encoded_frame",
        "//call:rtp_interfaces",
        "//call:rtp_receiver",
        "//media:codec",
        "//media:media_channel",
        "//media:media_constants",
        "//media:rid_description",
        "//media:rtc_data_sctp_transport_internal",
        "//media:rtc_media_tests_utils",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:candidate_pair_interface",
        "//p2p:dtls_transport_factory",
        "//p2p:dtls_transport_internal",
        "//p2p:fake_ice_transport",
        "//p2p:fake_port_allocator",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_test_utils",
        "//p2p:packet_transport_internal",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        "//pc:audio_rtp_receiver",
        "//pc:channel",
        # "//pc:dtls_srtp_transport",
        "//pc:dtls_transport",
        "//pc:ice_transport",
        "//pc:jsep_transport",
        "//pc:jsep_transport_controller",
        "//pc:libjingle_peerconnection",
        "//pc:media_protocol_names",
        "//pc:media_session",
        "//pc:pc_test_utils",
        "//pc:rtc_pc",
        "//pc:rtcp_mux_filter",
        "//pc:rtp_media_utils",
        "//pc:rtp_parameters_conversion",
        "//pc:rtp_transport",
        "//pc:rtp_transport_internal",
        "//pc:sctp_transport",
        "//pc:session_description",
        # "//pc:srtp_session",
        # "//pc:srtp_transport",
        "//pc:used_ids",
        "//pc:video_rtp_receiver",
        "//rtc_base:async_packet_socket",
        "//rtc_base:buffer",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:net_helper",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:unique_id_generator",
        "//rtc_base/containers:flat_set",
        "//rtc_base/network:received_packet",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers:metrics",
        "//test:explicit_key_value_config",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_main",
        "//test:test_support",
    ],
)

cc_library(
    name = "peerconnection_perf_tests",
    testonly = 1,
    srcs = ["peer_connection_rampup_tests.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:audio_options_api",
        "//api:create_peerconnection_factory",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtc_stats_api",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/audio:audio_device",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/metrics:metric",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_decoder_factory_template",
        "//api/video_codecs:video_decoder_factory_template_dav1d_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_decoder_factory_template_open_h264_adapter",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//media:rtc_media_tests_utils",
        "//p2p:basic_port_allocator",
        "//p2p:connection",
        "//p2p:p2p_test_utils",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//pc:pc_test_utils",
        "//pc:peer_connection",
        "//pc:peerconnection_wrapper",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket_address",
        "//rtc_base:socket_factory",
        "//rtc_base:ssl",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//system_wrappers",
        "//test:test_support",
    ],
)

cc_library(
    name = "peerconnection_wrapper",
    testonly = 1,
    srcs = ["peer_connection_wrapper.cc"],
    hdrs = ["peer_connection_wrapper.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:function_view",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtc_stats_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//pc:pc_test_utils",
        "//pc:sdp_utils",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//test:test_support",
    ],
)

cc_test(
    name = "slow_peer_connection_unittests",
    testonly = 1,
    srcs = ["slow_peer_connection_integration_test.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/units:time_delta",
        "//p2p:connection",
        "//p2p:p2p_server_utils",
        "//p2p:p2p_test_utils",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//pc:integration_test_helpers",
        "//pc:pc_test_utils",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//test:test_main",
        "//test:test_support",
        "//test/time_controller",
    ],
)

cc_test(
    name = "peerconnection_unittests",
    testonly = 1,
    srcs = [
        "data_channel_integrationtest.cc",
        "data_channel_unittest.cc",
        "dtmf_sender_unittest.cc",
        "ice_server_parsing_unittest.cc",
        "jitter_buffer_delay_unittest.cc",
        "jsep_session_description_unittest.cc",
        "legacy_stats_collector_unittest.cc",
        "local_audio_source_unittest.cc",
        "media_stream_unittest.cc",
        "peer_connection_adaptation_integrationtest.cc",
        "peer_connection_bundle_unittest.cc",
        "peer_connection_crypto_unittest.cc",
        "peer_connection_data_channel_unittest.cc",
        "peer_connection_encodings_integrationtest.cc",
        "peer_connection_end_to_end_unittest.cc",
        "peer_connection_factory_unittest.cc",
        "peer_connection_field_trial_tests.cc",
        "peer_connection_header_extension_unittest.cc",
        "peer_connection_histogram_unittest.cc",
        "peer_connection_ice_unittest.cc",
        "peer_connection_integrationtest.cc",
        "peer_connection_interface_unittest.cc",
        "peer_connection_jsep_unittest.cc",
        "peer_connection_media_unittest.cc",
        "peer_connection_rtp_unittest.cc",
        "peer_connection_signaling_unittest.cc",
        "peer_connection_simulcast_unittest.cc",
        "peer_connection_svc_integrationtest.cc",
        "peer_connection_wrapper.cc",
        "peer_connection_wrapper.h",
        "proxy_unittest.cc",
        "rtc_stats_collector_unittest.cc",
        "rtc_stats_integrationtest.cc",
        "rtc_stats_traversal_unittest.cc",
        "rtp_media_utils_unittest.cc",
        "rtp_parameters_conversion_unittest.cc",
        "rtp_sender_receiver_unittest.cc",
        "rtp_transceiver_unittest.cc",
        "sctp_utils_unittest.cc",
        "sdp_offer_answer_unittest.cc",
        "simulcast_sdp_serializer_unittest.cc",
        "test/fake_audio_capture_module_unittest.cc",
        "test/test_sdp_strings.h",
        "track_media_info_map_unittest.cc",
        "video_rtp_track_source_unittest.cc",
        "video_track_unittest.cc",
        "webrtc_sdp_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    shard_count = 4,
    tags = ["noasan"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:candidate",
        "//api:create_peerconnection_factory",
        "//api:dtls_transport_interface",
        "//api:dtmf_sender_interface",
        "//api:enable_media",
        "//api:enable_media_with_defaults",
        "//api:fake_frame_decryptor",
        "//api:fake_frame_encryptor",
        "//api:field_trials_view",
        "//api:function_view",
        "//api:ice_transport_interface",
        "//api:libjingle_logging_api",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:media_stream_interface",
        "//api:mock_async_dns_resolver",
        "//api:mock_encoder_selector",
        "//api:mock_packet_socket_factory",
        "//api:mock_video_track",
        "//api:packet_socket_factory",
        "//api:priority",
        "//api:rtc_error",
        "//api:rtc_event_log_output_file",
        "//api:rtc_stats_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api/adaptation:resource_adaptation_api",
        "//api/audio:audio_device",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio:audio_processing_statistics",
        "//api/audio_codecs:audio_codecs_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/audio_codecs:opus_audio_decoder_factory",
        "//api/audio_codecs:opus_audio_encoder_factory",
        "//api/audio_codecs/L16:audio_decoder_L16",
        "//api/audio_codecs/L16:audio_encoder_L16",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/environment:environment_factory",
        "//api/rtc_event_log",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/transport:datagram_transport_interface",
        "//api/transport:field_trial_based_config",
        "//api/transport:sctp_transport_factory_interface",
        "//api/transport/rtp:rtp_source",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:encoded_image",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:builtin_video_decoder_factory",
        "//api/video_codecs:builtin_video_encoder_factory",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_decoder_factory_template",
        "//api/video_codecs:video_decoder_factory_template_dav1d_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_decoder_factory_template_open_h264_adapter",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//call:call_interfaces",
        "//call/adaptation:resource_adaptation_test_utilities",
        "//common_video",
        "//logging:fake_rtc_event_log",
        "//media:codec",
        "//media:media_channel",
        "//media:media_constants",
        "//media:media_engine",
        "//media:rid_description",
        "//media:rtc_audio_video",
        "//media:rtc_data_sctp_transport_internal",
        "//media:rtc_media_config",
        "//media:rtc_media_tests_utils",
        "//media:stream_params",
        "//modules/audio_processing",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:basic_port_allocator",
        "//p2p:connection",
        "//p2p:connection_info",
        "//p2p:dtls_transport_internal",
        "//p2p:fake_port_allocator",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_server_utils",
        "//p2p:p2p_test_utils",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//p2p:transport_description",
        "//p2p:transport_info",
        "//pc:audio_rtp_receiver",
        "//pc:audio_track",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:data_channel_controller_unittest",
        # "//pc:dtls_srtp_transport",
        "//pc:dtls_transport",
        "//pc:dtmf_sender",
        "//pc:enable_fake_media",
        "//pc:ice_server_parsing",
        "//pc:integration_test_helpers",
        "//pc:jitter_buffer_delay",
        "//pc:legacy_stats_collector",
        "//pc:libjingle_peerconnection",
        "//pc:local_audio_source",
        "//pc:media_protocol_names",
        "//pc:media_session",
        "//pc:media_stream",
        "//pc:pc_test_utils",
        "//pc:peer_connection",
        "//pc:peer_connection_factory",
        "//pc:peer_connection_proxy",
        "//pc:proxy",
        "//pc:rtc_pc",
        "//pc:rtc_stats_collector",
        "//pc:rtc_stats_traversal",
        "//pc:rtp_media_utils",
        "//pc:rtp_parameters_conversion",
        "//pc:rtp_receiver",
        "//pc:rtp_sender",
        "//pc:rtp_sender_proxy",
        "//pc:rtp_transceiver",
        "//pc:rtp_transport_internal",
        "//pc:sctp_data_channel",
        "//pc:sctp_transport",
        "//pc:sctp_utils",
        "//pc:sdp_utils",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//pc:simulcast_sdp_serializer",
        "//pc:stream_collection",
        "//pc:track_media_info_map",
        "//pc:transport_stats",
        "//pc:usage_pattern",
        "//pc:video_rtp_receiver",
        "//pc:video_rtp_track_source",
        "//pc:video_track",
        "//pc:video_track_source",
        "//pc:webrtc_sdp",
        "//rtc_base:byte_buffer",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:digest",
        "//rtc_base:event_tracer",
        "//rtc_base:gunit_helpers",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mdns_responder_interface",
        "//rtc_base:net_helper",
        "//rtc_base:network",
        "//rtc_base:network_constants",
        "//rtc_base:null_socket_server",
        "//rtc_base:refcount",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:rtc_json",
        "//rtc_base:safe_conversions",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base:unique_id_generator",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/third_party/base64",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers:metrics",
        "//test:audio_codec_mocks",
        "//test:field_trial",
        "//test:rtc_expect_death",
        "//test:run_loop",
        "//test:scoped_key_value_config",
        "//test:test_main",
        "//test:test_support",
        "//test/pc/sctp:fake_sctp_transport",
    ],
)

cc_library(
    name = "data_channel_controller_unittest",
    testonly = 1,
    srcs = ["data_channel_controller_unittest.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//pc:data_channel_controller",
        "//pc:pc_test_utils",
        "//pc:peer_connection_internal",
        "//pc:sctp_data_channel",
        "//rtc_base:null_socket_server",
        "//test:run_loop",
        "//test:test_support",
    ],
)

cc_library(
    name = "integration_test_helpers",
    testonly = 1,
    srcs = ["test/integration_test_helpers.cc"],
    hdrs = ["test/integration_test_helpers.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:candidate",
        "//api:create_peerconnection_factory",
        "//api:dtmf_sender_interface",
        "//api:enable_media_with_defaults",
        "//api:fake_frame_decryptor",
        "//api:fake_frame_encryptor",
        "//api:field_trials_view",
        "//api:function_view",
        "//api:ice_transport_interface",
        "//api:libjingle_logging_api",
        "//api:libjingle_peerconnection_api",
        "//api:media_stream_interface",
        "//api:mock_async_dns_resolver",
        "//api:mock_rtp",
        "//api:packet_socket_factory",
        "//api:rtc_error",
        "//api:rtc_stats_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api/audio:audio_device",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/rtc_event_log",
        "//api/rtc_event_log:rtc_event_log_factory",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:field_trial_based_config",
        "//api/transport/rtp:rtp_source",
        "//api/units:time_delta",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//call:call_interfaces",
        "//call/adaptation:resource_adaptation_test_utilities",
        "//logging:fake_rtc_event_log",
        "//media:media_engine",
        "//media:rtc_media_config",
        "//media:rtc_media_tests_utils",
        "//media:stream_params",
        "//modules/audio_processing:audioproc_test_utils",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:basic_port_allocator",
        "//p2p:connection",
        "//p2p:fake_ice_transport",
        "//p2p:fake_port_allocator",
        "//p2p:ice_transport_internal",
        "//p2p:p2p_constants",
        "//p2p:p2p_server_utils",
        "//p2p:p2p_test_utils",
        "//p2p:port",
        "//p2p:port_allocator",
        "//p2p:port_interface",
        "//p2p:rtc_p2p",
        "//pc:audio_rtp_receiver",
        "//pc:audio_track",
        "//pc:dtmf_sender",
        "//pc:jitter_buffer_delay",
        "//pc:local_audio_source",
        "//pc:media_session",
        "//pc:media_stream",
        "//pc:pc_test_utils",
        "//pc:peer_connection",
        "//pc:peer_connection_factory",
        "//pc:peer_connection_proxy",
        "//pc:remote_audio_source",
        "//pc:rtp_media_utils",
        "//pc:rtp_parameters_conversion",
        "//pc:rtp_receiver",
        "//pc:rtp_sender",
        "//pc:rtp_transceiver",
        "//pc:session_description",
        "//pc:usage_pattern",
        "//pc:video_rtp_receiver",
        "//pc:video_rtp_track_source",
        "//pc:video_track",
        "//pc:video_track_source",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:ip_address",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:mdns_responder_interface",
        "//rtc_base:null_socket_server",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:rtc_event",
        "//rtc_base:rtc_json",
        "//rtc_base:safe_conversions",
        "//rtc_base:socket_address",
        "//rtc_base:ssl",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//rtc_base/third_party/base64",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers:metrics",
        "//test:explicit_key_value_config",
        "//test:fileutils",
        "//test:rtp_test_utils",
        "//test:scoped_key_value_config",
        "//test:test_support",
        "//test/pc/sctp:fake_sctp_transport",
        "//test/time_controller",
    ],
)

cc_library(
    name = "enable_fake_media",
    testonly = 1,
    srcs = ["test/enable_fake_media.cc"],
    hdrs = ["test/enable_fake_media.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//pc:__pkg__"],
    deps = [
        "@com_google_absl//absl/base:nullability",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/environment",
        "//call:call_interfaces",
        "//media:rtc_media_tests_utils",
        "//pc:media_factory",
        "//rtc_base:checks",
    ],
)

cc_library(
    name = "pc_test_utils",
    testonly = 1,
    srcs = [
        "test/fake_audio_capture_module.cc",
        "test/peer_connection_test_wrapper.cc",
        "test/simulcast_layer_util.cc",
    ],
    hdrs = [
        "test/fake_audio_capture_module.h",
        "test/fake_data_channel_controller.h",
        "test/fake_peer_connection_base.h",
        "test/fake_peer_connection_for_stats.h",
        "test/fake_periodic_video_source.h",
        "test/fake_periodic_video_track_source.h",
        "test/fake_rtc_certificate_generator.h",
        "test/fake_video_track_renderer.h",
        "test/fake_video_track_source.h",
        "test/frame_generator_capturer_video_track_source.h",
        "test/mock_channel_interface.h",
        "test/mock_data_channel.h",
        "test/mock_peer_connection_internal.h",
        "test/mock_peer_connection_observers.h",
        "test/mock_rtp_receiver_internal.h",
        "test/mock_rtp_sender_internal.h",
        "test/mock_voice_media_receive_channel_interface.h",
        "test/peer_connection_test_wrapper.h",
        "test/rtc_stats_obtainer.h",
        "test/simulcast_layer_util.h",
        "test/test_sdp_strings.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:audio_options_api",
        "//api:call_api",
        "//api:create_frame_generator",
        "//api:create_peerconnection_factory",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtc_stats_api",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/audio:audio_device",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio_codecs:audio_codecs_api",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/units:time_delta",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:resolution",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_decoder_factory_template",
        "//api/video_codecs:video_decoder_factory_template_dav1d_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_decoder_factory_template_open_h264_adapter",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//call:call_interfaces",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:rtc_media",
        "//media:rtc_media_tests_utils",
        "//media:rtc_simulcast_encoder_adapter",
        "//media:video_broadcaster",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_processing",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//p2p:connection",
        "//p2p:fake_port_allocator",
        "//p2p:p2p_test_utils",
        "//p2p:port_allocator",
        "//p2p:rtc_p2p",
        "//pc:channel",
        "//pc:channel_interface",
        "//pc:enable_fake_media",
        "//pc:jitter_buffer_delay",
        "//pc:libjingle_peerconnection",
        "//pc:peer_connection_internal",
        "//pc:rtp_receiver",
        "//pc:rtp_sender",
        "//pc:sctp_data_channel",
        "//pc:session_description",
        "//pc:simulcast_description",
        "//pc:stream_collection",
        "//pc:video_track_source",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_certificate_generator",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:task_queue_for_test",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base:weak_ptr",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/task_utils:repeating_task",
        "//rtc_base/third_party/sigslot",
        "//test:frame_generator_capturer",
        "//test:scoped_key_value_config",
        "//test:test_support",
    ],
)

cc_test(
    name = "svc_tests",
    srcs = ["test/svc_e2e_tests.cc"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:difficult_photo_1850_1110.yuv",
        "//resources:photo_1850_1110.yuv",
        "//resources:presentation_1850_1110.yuv",
        "//resources:web_screenshot_1850_1110.yuv",
    ],
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:create_network_emulation_manager",
        "//api:create_peer_connection_quality_test_frame_generator",
        "//api:create_peerconnection_quality_test_fixture",
        "//api:frame_generator_api",
        "//api:media_stream_interface",
        "//api:network_emulation_manager_api",
        "//api:peer_connection_quality_test_fixture_api",
        "//api:rtc_stats_api",
        "//api:simulated_network_api",
        "//api:time_controller",
        "//api/test/metrics:global_metrics_logger_and_exporter",
        "//api/test/pclf:media_configuration",
        "//api/test/pclf:media_quality_test_params",
        "//api/test/pclf:peer_configurer",
        "//api/video_codecs:video_codecs_api",
        "//modules/video_coding:webrtc_vp9",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base/containers:flat_map",
        "//system_wrappers:field_trial",
        "//test:field_trial",
        "//test:fileutils",
        "//test:test_main",
        "//test:test_support",
        "//test/network:simulated_network",
        "//test/pc/e2e:network_quality_metrics_reporter",
        "//test/pc/e2e/analyzer/video:default_video_quality_analyzer",
    ],
)
