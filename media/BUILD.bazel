# DO NOT MODIFY!
# This file is automatically generated from .gn files upstream.

package(features = [
    "-parse_headers",
])

licenses(["notice"])

load("//:build_defs.bzl", "platform_select")

cc_library(
    name = "media",
    visibility = ["//:__subpackages__"],
    deps = [
        "//media:rtc_media",
        "//media:rtc_media_base",
    ],
)

cc_library(
    name = "rtc_media_config",
    hdrs = ["base/media_config.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "rtc_sdp_video_format_utils",
    srcs = ["base/sdp_video_format_utils.cc"],
    hdrs = ["base/sdp_video_format_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/types:optional",
        "//api/video_codecs:video_codecs_api",
        "//media:media_constants",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
    ],
)

cc_library(
    name = "rtc_media_base",
    hdrs = [
        "base/adapted_video_track_source.h",
        "base/video_adapter.h",
        "base/video_broadcaster.h",
        "base/video_common.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:call_api",
        "//api:field_trials_view",
        "//api:frame_transformer_interface",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:transport_api",
        "//api/audio:audio_frame_processor",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:datagram_transport_interface",
        "//api/transport:stun_types",
        "//api/transport/rtp:rtp_source",
        "//api/units:time_delta",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//call:call_interfaces",
        "//call:video_stream_api",
        "//common_video",
        "//media:adapted_video_track_source",
        "//media:codec",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:rid_description",
        "//media:rtc_media_config",
        "//media:rtp_utils",
        "//media:stream_params",
        "//media:video_adapter",
        "//media:video_broadcaster",
        "//media:video_common",
        "//media:video_source_base",
        "//modules/async_audio_processing",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:async_packet_socket",
        "//rtc_base:buffer",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:dscp",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network_route",
        "//rtc_base:sanitizer",
        "//rtc_base:socket",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base:unique_id_generator",
        "//rtc_base/network:sent_packet",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:file_wrapper",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/sigslot",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "adapted_video_track_source",
    srcs = ["base/adapted_video_track_source.cc"],
    hdrs = ["base/adapted_video_track_source.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:media_stream_interface",
        "//api:scoped_refptr",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//media:video_adapter",
        "//media:video_broadcaster",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "audio_source",
    hdrs = ["base/audio_source.h"],
    visibility = ["//:__subpackages__"],
    deps = ["@com_google_absl//absl/types:optional"],
)

cc_library(
    name = "video_adapter",
    srcs = ["base/video_adapter.cc"],
    hdrs = ["base/video_adapter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api/video:video_frame",
        "//common_video",
        "//media:video_common",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:rtc_export",
        "//system_wrappers:field_trial",
    ],
)

cc_library(
    name = "video_source_base",
    srcs = ["base/video_source_base.cc"],
    hdrs = ["base/video_source_base.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:sequence_checker",
        "//api/video:video_frame",
        "//rtc_base:checks",
        "//rtc_base/system:no_unique_address",
    ],
)

cc_library(
    name = "video_broadcaster",
    srcs = ["base/video_broadcaster.cc"],
    hdrs = ["base/video_broadcaster.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "//api:media_stream_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//media:video_common",
        "//media:video_source_base",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base/synchronization:mutex",
    ],
)

cc_library(
    name = "video_common",
    srcs = ["base/video_common.cc"],
    hdrs = ["base/video_common.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:array_view",
        "//rtc_base:checks",
        "//rtc_base:macromagic",
        "//rtc_base:stringutils",
        "//rtc_base:timeutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "media_engine",
    srcs = ["base/media_engine.cc"],
    hdrs = ["base/media_engine.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:field_trials_view",
        "//api:rtp_parameters",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:options",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator_factory",
        "//call:call_interfaces",
        "//media:codec",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:rtc_media_config",
        "//media:video_common",
        "//rtc_base:checks",
        "//rtc_base:stringutils",
        "//rtc_base/system:file_wrapper",
    ],
)

cc_library(
    name = "media_channel_impl",
    srcs = ["base/media_channel_impl.cc"],
    hdrs = ["base/media_channel_impl.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:audio_options_api",
        "//api:call_api",
        "//api:frame_transformer_interface",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:transport_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport/rtp:rtp_source",
        "//api/units:time_delta",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//common_video",
        "//media:codec",
        "//media:media_channel",
        "//media:rtp_utils",
        "//media:stream_params",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:async_packet_socket",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:dscp",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network_route",
        "//rtc_base:socket",
        "//rtc_base/network:sent_packet",
    ],
)

cc_library(
    name = "media_channel",
    hdrs = ["base/media_channel.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:audio_options_api",
        "//api:call_api",
        "//api:frame_transformer_interface",
        "//api:media_stream_interface",
        "//api:rtc_error",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api/audio:audio_processing_statistics",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:datagram_transport_interface",
        "//api/transport/rtp:rtp_source",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:recordable_encoded_frame",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//call:video_stream_api",
        "//common_video",
        "//media:codec",
        "//media:media_constants",
        "//media:rtp_utils",
        "//media:stream_params",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:async_packet_socket",
        "//rtc_base:buffer",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:dscp",
        "//rtc_base:logging",
        "//rtc_base:network_route",
        "//rtc_base:socket",
        "//rtc_base:stringutils",
        "//rtc_base/network:sent_packet",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "codec",
    srcs = ["base/codec.cc"],
    hdrs = ["base/codec.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:rtp_parameters",
        "//api/audio_codecs:audio_codecs_api",
        "//api/video_codecs:video_codecs_api",
        "//media:media_constants",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base:stringutils",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "rtp_utils",
    srcs = ["base/rtp_utils.cc"],
    hdrs = ["base/rtp_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "//api:array_view",
        "//media:turn_utils",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//rtc_base:async_packet_socket",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:digest",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "stream_params",
    srcs = ["base/stream_params.cc"],
    hdrs = ["base/stream_params.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "//api:array_view",
        "//media:rid_description",
        "//rtc_base:stringutils",
        "//rtc_base:unique_id_generator",
    ],
)

cc_library(
    name = "media_constants",
    srcs = ["base/media_constants.cc"],
    hdrs = ["base/media_constants.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = ["//rtc_base/system:rtc_export"],
)

cc_library(
    name = "turn_utils",
    srcs = ["base/turn_utils.cc"],
    hdrs = ["base/turn_utils.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/transport:stun_types",
        "//rtc_base:byte_order",
        "//rtc_base/system:rtc_export",
    ],
)

cc_library(
    name = "rid_description",
    srcs = ["base/rid_description.cc"],
    hdrs = ["base/rid_description.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
)

cc_library(
    name = "rtc_simulcast_encoder_adapter",
    srcs = ["engine/simulcast_encoder_adapter.cc"],
    hdrs = ["engine/simulcast_encoder_adapter.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/types:optional",
        "//api:fec_controller_api",
        "//api:field_trials_view",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api/environment",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:rtc_software_fallback_wrappers",
        "//api/video_codecs:video_codecs_api",
        "//call:video_stream_api",
        "//common_video",
        "//media:media_constants",
        "//media:rtc_sdp_video_format_utils",
        "//media:video_common",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base/experiments:encoder_info_settings",
        "//rtc_base/experiments:rate_control_settings",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
        "//system_wrappers",
    ],
)

cc_library(
    name = "rtc_internal_video_codecs",
    srcs = [
        "engine/fake_video_codec_factory.cc",
        "engine/internal_decoder_factory.cc",
        "engine/internal_encoder_factory.cc",
    ],
    hdrs = [
        "engine/fake_video_codec_factory.h",
        "engine/internal_decoder_factory.h",
        "engine/internal_encoder_factory.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api/environment",
        "//api/video:encoded_image",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:rtc_software_fallback_wrappers",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//call:call_interfaces",
        "//call:video_stream_api",
        "//media:codec",
        "//media:media_constants",
        "//media:rtc_simulcast_encoder_adapter",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding:webrtc_vp9",
        "//rtc_base:checks",
        "//rtc_base:logging",
        "//rtc_base/system:rtc_export",
        "//system_wrappers:field_trial",
        "//test:fake_video_codecs",
    ],
)

cc_library(
    name = "rtc_audio_video",
    srcs = [
        "engine/adm_helpers.cc",
        "engine/payload_type_mapper.cc",
        "engine/webrtc_media_engine.cc",
        "engine/webrtc_video_engine.cc",
        "engine/webrtc_voice_engine.cc",
    ],
    hdrs = [
        "engine/adm_helpers.h",
        "engine/payload_type_mapper.h",
        "engine/webrtc_media_engine.h",
        "engine/webrtc_video_engine.h",
        "engine/webrtc_voice_engine.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/algorithm",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:inlined_vector",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:audio_options_api",
        "//api:call_api",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:frame_transformer_interface",
        "//api:libjingle_peerconnection_api",
        "//api:make_ref_counted",
        "//api:media_stream_interface",
        "//api:priority",
        "//api:rtc_error",
        "//api:rtp_headers",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:rtp_transceiver_direction",
        "//api:scoped_refptr",
        "//api:sequence_checker",
        "//api:transport_api",
        "//api/audio:audio_device",
        "//api/audio:audio_frame_api",
        "//api/audio:audio_frame_processor",
        "//api/audio:audio_mixer_api",
        "//api/audio:audio_processing",
        "//api/audio:audio_processing_statistics",
        "//api/audio_codecs:audio_codecs_api",
        "//api/crypto:frame_decryptor_interface",
        "//api/crypto:frame_encryptor_interface",
        "//api/crypto:options",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/transport:bitrate_settings",
        "//api/transport:field_trial_based_config",
        "//api/transport/rtp:rtp_source",
        "//api/units:data_rate",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:recordable_encoded_frame",
        "//api/video:resolution",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_bitrate_allocator_factory",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video:video_stream_encoder",
        "//api/video_codecs:rtc_software_fallback_wrappers",
        "//api/video_codecs:scalability_mode",
        "//api/video_codecs:video_codecs_api",
        "//call",
        "//call:call_interfaces",
        "//call:receive_stream_interface",
        "//call:rtp_interfaces",
        "//call:video_stream_api",
        "//common_video",
        "//common_video:frame_counts",
        "//media:audio_source",
        "//media:codec",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:media_constants",
        "//media:media_engine",
        "//media:rid_description",
        "//media:rtc_media_config",
        "//media:rtp_utils",
        "//media:stream_params",
        "//modules/async_audio_processing",
        "//modules/audio_coding:ana_config_proto",
        "//modules/audio_device",
        "//modules/audio_device:audio_device_api",
        "//modules/audio_device:audio_device_impl",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/audio_processing/aec_dump",
        "//modules/audio_processing/aec_dump:aec_dump_impl",
        "//modules/audio_processing/agc:gain_control_interface",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_capture:video_capture_internal_impl",
        "//modules/video_coding",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding:webrtc_vp9_helpers",
        "//modules/video_coding/svc:scalability_mode_util",
        "//rtc_base:audio_format_to_string",
        "//rtc_base:buffer",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:dscp",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:network_route",
        "//rtc_base:race_checker",
        "//rtc_base:safe_conversions",
        "//rtc_base:socket",
        "//rtc_base:ssl",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:field_trial_parser",
        "//rtc_base/experiments:min_video_bitrate_experiment",
        "//rtc_base/experiments:normalize_simulcast_size_experiment",
        "//rtc_base/experiments:rate_control_settings",
        "//rtc_base/network:sent_packet",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/system:file_wrapper",
        "//rtc_base/system:no_unique_address",
        "//rtc_base/system:rtc_export",
        "//rtc_base/third_party/base64",
        "//system_wrappers",
        "//system_wrappers:metrics",
        "//video/config:encoder_config",
    ],
)

cc_library(
    name = "rtc_data_sctp_transport_internal",
    hdrs = ["sctp/sctp_transport_internal.h"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//api:rtc_error",
        "//api/transport:datagram_transport_interface",
        "//media:media_channel",
        "//p2p:packet_transport_internal",
        "//p2p:rtc_p2p",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:threading",
    ],
)

cc_library(
    name = "rtc_data_dcsctp_transport",
    srcs = ["sctp/dcsctp_transport.cc"],
    hdrs = ["sctp/dcsctp_transport.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:array_view",
        "//api:dtmf_sender_interface",
        "//api:libjingle_peerconnection_api",
        "//api:rtp_sender_interface",
        "//api/environment",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//media:media_channel",
        "//media:rtc_data_sctp_transport_internal",
        "//net/dcsctp/public:factory",
        "//net/dcsctp/public:socket",
        "//net/dcsctp/public:types",
        "//net/dcsctp/public:utils",
        "//net/dcsctp/timer:task_queue_timeout",
        "//p2p:packet_transport_internal",
        "//p2p:rtc_p2p",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:event_tracer",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:random",
        "//rtc_base:socket",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base/containers:flat_map",
        "//rtc_base/network:received_packet",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers",
    ],
)

cc_library(
    name = "rtc_data_sctp_transport_factory",
    srcs = ["sctp/sctp_transport_factory.cc"],
    hdrs = ["sctp/sctp_transport_factory.h"],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_DCSCTP",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "//api/environment",
        "//api/transport:sctp_transport_factory_interface",
        "//media:rtc_data_dcsctp_transport",
        "//media:rtc_data_sctp_transport_internal",
        "//rtc_base:threading",
        "//rtc_base/system:unused",
        "//system_wrappers",
        "//system_wrappers:field_trial",
    ],
)

cc_library(
    name = "rtc_media",
    visibility = ["//visibility:public"],
    deps = ["//media:rtc_audio_video"],
)

cc_library(
    name = "rtc_media_tests_utils",
    testonly = 1,
    srcs = [
        "base/fake_frame_source.cc",
        "base/fake_media_engine.cc",
        "base/fake_rtp.cc",
        "base/fake_video_renderer.cc",
        "base/test_utils.cc",
        "engine/fake_webrtc_call.cc",
        "engine/fake_webrtc_video_engine.cc",
    ],
    hdrs = [
        "base/fake_frame_source.h",
        "base/fake_media_engine.h",
        "base/fake_network_interface.h",
        "base/fake_rtp.h",
        "base/fake_video_renderer.h",
        "base/test_utils.h",
        "engine/fake_webrtc_call.h",
        "engine/fake_webrtc_video_engine.h",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest",
        "//api:call_api",
        "//api:fec_controller_api",
        "//api:rtp_parameters",
        "//api:scoped_refptr",
        "//api/audio:audio_processing",
        "//api/environment",
        "//api/task_queue",
        "//api/task_queue:pending_task_safety_flag",
        "//api/units:timestamp",
        "//api/video:encoded_image",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//call:call_interfaces",
        "//call:mock_rtp_interfaces",
        "//call:video_stream_api",
        "//common_video",
        "//media:audio_source",
        "//media:codec",
        "//media:media_channel",
        "//media:media_channel_impl",
        "//media:media_constants",
        "//media:media_engine",
        "//media:rtc_audio_video",
        "//media:rtc_internal_video_codecs",
        "//media:rtc_media",
        "//media:rtc_simulcast_encoder_adapter",
        "//media:rtp_utils",
        "//media:stream_params",
        "//media:video_common",
        "//modules/audio_processing",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:video_coding_utility",
        "//modules/video_coding/svc:scalability_mode_util",
        "//p2p:rtc_p2p",
        "//rtc_base:buffer",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:copy_on_write_buffer",
        "//rtc_base:dscp",
        "//rtc_base:gunit_helpers",
        "//rtc_base:macromagic",
        "//rtc_base:network_route",
        "//rtc_base:rtc_event",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/third_party/sigslot",
        "//test:test_support",
        "//video/config:streams_config",
    ],
)

cc_test(
    name = "rtc_media_unittests",
    testonly = 1,
    srcs = [
        "base/codec_unittest.cc",
        "base/media_engine_unittest.cc",
        "base/rtp_utils_unittest.cc",
        "base/sdp_video_format_utils_unittest.cc",
        "base/stream_params_unittest.cc",
        "base/turn_utils_unittest.cc",
        "base/video_adapter_unittest.cc",
        "base/video_broadcaster_unittest.cc",
        "base/video_common_unittest.cc",
        "engine/internal_decoder_factory_unittest.cc",
        "engine/internal_encoder_factory_unittest.cc",
        "engine/payload_type_mapper_unittest.cc",
        "engine/simulcast_encoder_adapter_unittest.cc",
        "engine/webrtc_media_engine_unittest.cc",
        "engine/webrtc_video_engine_unittest.cc",
        "engine/webrtc_voice_engine_unittest.cc",
        "sctp/dcsctp_transport_unittest.cc",
    ],
    copts = [
        "-Wctad-maybe-unsupported",
    ] + platform_select(
        arm64 = [
            "-fno-exceptions",
            "-fno-rtti",
        ],
        linux = ["-fno-exceptions"],
        windows = ["-fno-rtti"],
    ),
    data = [
        "//resources:media/captured-320x240-2s-48.frames",
        "//resources:media/faces.1280x720_P420.yuv",
        "//resources:media/faces_I400.jpg",
        "//resources:media/faces_I411.jpg",
        "//resources:media/faces_I420.jpg",
        "//resources:media/faces_I422.jpg",
        "//resources:media/faces_I444.jpg",
    ],
    defines = [
        "HAVE_WEBRTC_VIDEO",
        "RTC_JNI_GENERATOR_LEGACY_SYMBOLS",
        "WEBRTC_ABSL_MUTEX",
        "WEBRTC_ENABLE_AVX2",
        "WEBRTC_ENABLE_PROTOBUF=1",
        "WEBRTC_HAVE_SCTP",
        "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE",
        "WEBRTC_NON_STATIC_TRACE_EVENT_HANDLERS=1",
        "WEBRTC_OPUS_SUPPORT_120MS_PTIME=1",
        "WEBRTC_STRICT_FIELD_TRIALS=0",
        "WEBRTC_UNIT_TEST",
    ] + platform_select(
        arm64 = [
            "WEBRTC_ARCH_ARM64",
            "WEBRTC_HAS_NEON",
            "WEBRTC_MAC",
            "WEBRTC_POSIX",
        ],
        linux = [
            "RTC_ENABLE_VP9",
            "WEBRTC_ENABLE_LIBEVENT",
            "WEBRTC_LINUX",
            "WEBRTC_POSIX",
        ],
        windows = [
            "RTC_ENABLE_VP9",
            "WEBRTC_WIN",
        ],
    ),
    visibility = ["//:__subpackages__"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "//api:create_simulcast_test_fixture_api",
        "//api:dtmf_sender_interface",
        "//api:field_trials_view",
        "//api:libjingle_peerconnection_api",
        "//api:mock_encoder_selector",
        "//api:mock_video_bitrate_allocator",
        "//api:mock_video_bitrate_allocator_factory",
        "//api:mock_video_codec_factory",
        "//api:mock_video_encoder",
        "//api:rtp_parameters",
        "//api:rtp_sender_interface",
        "//api:scoped_refptr",
        "//api:simulcast_test_fixture_api",
        "//api/audio_codecs:builtin_audio_decoder_factory",
        "//api/audio_codecs:builtin_audio_encoder_factory",
        "//api/environment",
        "//api/environment:environment_factory",
        "//api/rtc_event_log",
        "//api/task_queue",
        "//api/task_queue:default_task_queue_factory",
        "//api/test/video:function_video_factory",
        "//api/transport:field_trial_based_config",
        "//api/units:time_delta",
        "//api/units:timestamp",
        "//api/video:builtin_video_bitrate_allocator_factory",
        "//api/video:resolution",
        "//api/video:video_bitrate_allocation",
        "//api/video:video_codec_constants",
        "//api/video:video_frame",
        "//api/video:video_rtp_headers",
        "//api/video_codecs:video_codecs_api",
        "//api/video_codecs:video_decoder_factory_template",
        "//api/video_codecs:video_decoder_factory_template_dav1d_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_decoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_decoder_factory_template_open_h264_adapter",
        "//api/video_codecs:video_encoder_factory_template",
        "//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter",
        "//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter",
        "//api/video_codecs:video_encoder_factory_template_open_h264_adapter",
        "//audio",
        "//call:call_interfaces",
        "//common_video",
        "//media:codec",
        "//media:media_channel",
        "//media:media_constants",
        "//media:media_engine",
        "//media:rtc_audio_video",
        "//media:rtc_data_dcsctp_transport",
        "//media:rtc_internal_video_codecs",
        "//media:rtc_media",
        "//media:rtc_media_tests_utils",
        "//media:rtc_sdp_video_format_utils",
        "//media:rtc_simulcast_encoder_adapter",
        "//media:rtp_utils",
        "//media:stream_params",
        "//media:turn_utils",
        "//media:video_adapter",
        "//media:video_broadcaster",
        "//media:video_common",
        "//modules/audio_device:mock_audio_device",
        "//modules/audio_mixer:audio_mixer_impl",
        "//modules/audio_processing",
        "//modules/audio_processing:mocks",
        "//modules/rtp_rtcp",
        "//modules/rtp_rtcp:rtp_rtcp_format",
        "//modules/video_coding:simulcast_test_fixture_impl",
        "//modules/video_coding:video_codec_interface",
        "//modules/video_coding:webrtc_h264",
        "//modules/video_coding:webrtc_vp8",
        "//modules/video_coding/svc:scalability_mode_util",
        "//net/dcsctp/public:factory",
        "//net/dcsctp/public:mocks",
        "//net/dcsctp/public:socket",
        "//p2p:p2p_test_utils",
        "//rtc_base:async_packet_socket",
        "//rtc_base:byte_order",
        "//rtc_base:checks",
        "//rtc_base:gunit_helpers",
        "//rtc_base:logging",
        "//rtc_base:macromagic",
        "//rtc_base:rtc_base_tests_utils",
        "//rtc_base:rtc_event",
        "//rtc_base:safe_conversions",
        "//rtc_base:stringutils",
        "//rtc_base:threading",
        "//rtc_base:timeutils",
        "//rtc_base/experiments:min_video_bitrate_experiment",
        "//rtc_base/synchronization:mutex",
        "//rtc_base/third_party/sigslot",
        "//system_wrappers:field_trial",
        "//test:audio_codec_mocks",
        "//test:fake_video_codecs",
        "//test:field_trial",
        "//test:rtp_test_utils",
        "//test:scoped_key_value_config",
        "//test:test_main",
        "//test:test_support",
        "//test:video_test_common",
        "//test/time_controller",
        "//video/config:streams_config",
    ],
)
